
OLED_Audio_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dd8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dd4  08006f60  08006f60  00016f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d34  08007d34  00020478  2**0
                  CONTENTS
  4 .ARM          00000008  08007d34  08007d34  00017d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d3c  08007d3c  00020478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d3c  08007d3c  00017d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d40  08007d40  00017d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000478  20000000  08007d44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020478  2**0
                  CONTENTS
 10 .bss          000008c8  20000478  20000478  00020478  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000d40  20000d40  00020478  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020478  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b808  00000000  00000000  000204a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021d1  00000000  00000000  0002bcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a50  00000000  00000000  0002de88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000205f4  00000000  00000000  0002e8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef83  00000000  00000000  0004eecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c146c  00000000  00000000  0005de4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cf  00000000  00000000  0011f2bb  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00000948  00000000  00000000  0011f390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002c1c  00000000  00000000  0011fcd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000478 	.word	0x20000478
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006f48 	.word	0x08006f48

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000047c 	.word	0x2000047c
 80001c4:	08006f48 	.word	0x08006f48

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b974 	b.w	8000cb4 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9d08      	ldr	r5, [sp, #32]
 80009ea:	4604      	mov	r4, r0
 80009ec:	468e      	mov	lr, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d14d      	bne.n	8000a8e <__udivmoddi4+0xaa>
 80009f2:	428a      	cmp	r2, r1
 80009f4:	4694      	mov	ip, r2
 80009f6:	d969      	bls.n	8000acc <__udivmoddi4+0xe8>
 80009f8:	fab2 f282 	clz	r2, r2
 80009fc:	b152      	cbz	r2, 8000a14 <__udivmoddi4+0x30>
 80009fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000a02:	f1c2 0120 	rsb	r1, r2, #32
 8000a06:	fa20 f101 	lsr.w	r1, r0, r1
 8000a0a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a0e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a12:	4094      	lsls	r4, r2
 8000a14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a18:	0c21      	lsrs	r1, r4, #16
 8000a1a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a1e:	fa1f f78c 	uxth.w	r7, ip
 8000a22:	fb08 e316 	mls	r3, r8, r6, lr
 8000a26:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a2a:	fb06 f107 	mul.w	r1, r6, r7
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d90a      	bls.n	8000a48 <__udivmoddi4+0x64>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a3a:	f080 811f 	bcs.w	8000c7c <__udivmoddi4+0x298>
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	f240 811c 	bls.w	8000c7c <__udivmoddi4+0x298>
 8000a44:	3e02      	subs	r6, #2
 8000a46:	4463      	add	r3, ip
 8000a48:	1a5b      	subs	r3, r3, r1
 8000a4a:	b2a4      	uxth	r4, r4
 8000a4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a50:	fb08 3310 	mls	r3, r8, r0, r3
 8000a54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a58:	fb00 f707 	mul.w	r7, r0, r7
 8000a5c:	42a7      	cmp	r7, r4
 8000a5e:	d90a      	bls.n	8000a76 <__udivmoddi4+0x92>
 8000a60:	eb1c 0404 	adds.w	r4, ip, r4
 8000a64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a68:	f080 810a 	bcs.w	8000c80 <__udivmoddi4+0x29c>
 8000a6c:	42a7      	cmp	r7, r4
 8000a6e:	f240 8107 	bls.w	8000c80 <__udivmoddi4+0x29c>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a7a:	1be4      	subs	r4, r4, r7
 8000a7c:	2600      	movs	r6, #0
 8000a7e:	b11d      	cbz	r5, 8000a88 <__udivmoddi4+0xa4>
 8000a80:	40d4      	lsrs	r4, r2
 8000a82:	2300      	movs	r3, #0
 8000a84:	e9c5 4300 	strd	r4, r3, [r5]
 8000a88:	4631      	mov	r1, r6
 8000a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8e:	428b      	cmp	r3, r1
 8000a90:	d909      	bls.n	8000aa6 <__udivmoddi4+0xc2>
 8000a92:	2d00      	cmp	r5, #0
 8000a94:	f000 80ef 	beq.w	8000c76 <__udivmoddi4+0x292>
 8000a98:	2600      	movs	r6, #0
 8000a9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	4631      	mov	r1, r6
 8000aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa6:	fab3 f683 	clz	r6, r3
 8000aaa:	2e00      	cmp	r6, #0
 8000aac:	d14a      	bne.n	8000b44 <__udivmoddi4+0x160>
 8000aae:	428b      	cmp	r3, r1
 8000ab0:	d302      	bcc.n	8000ab8 <__udivmoddi4+0xd4>
 8000ab2:	4282      	cmp	r2, r0
 8000ab4:	f200 80f9 	bhi.w	8000caa <__udivmoddi4+0x2c6>
 8000ab8:	1a84      	subs	r4, r0, r2
 8000aba:	eb61 0303 	sbc.w	r3, r1, r3
 8000abe:	2001      	movs	r0, #1
 8000ac0:	469e      	mov	lr, r3
 8000ac2:	2d00      	cmp	r5, #0
 8000ac4:	d0e0      	beq.n	8000a88 <__udivmoddi4+0xa4>
 8000ac6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000aca:	e7dd      	b.n	8000a88 <__udivmoddi4+0xa4>
 8000acc:	b902      	cbnz	r2, 8000ad0 <__udivmoddi4+0xec>
 8000ace:	deff      	udf	#255	; 0xff
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	2a00      	cmp	r2, #0
 8000ad6:	f040 8092 	bne.w	8000bfe <__udivmoddi4+0x21a>
 8000ada:	eba1 010c 	sub.w	r1, r1, ip
 8000ade:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae2:	fa1f fe8c 	uxth.w	lr, ip
 8000ae6:	2601      	movs	r6, #1
 8000ae8:	0c20      	lsrs	r0, r4, #16
 8000aea:	fbb1 f3f7 	udiv	r3, r1, r7
 8000aee:	fb07 1113 	mls	r1, r7, r3, r1
 8000af2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000af6:	fb0e f003 	mul.w	r0, lr, r3
 8000afa:	4288      	cmp	r0, r1
 8000afc:	d908      	bls.n	8000b10 <__udivmoddi4+0x12c>
 8000afe:	eb1c 0101 	adds.w	r1, ip, r1
 8000b02:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b06:	d202      	bcs.n	8000b0e <__udivmoddi4+0x12a>
 8000b08:	4288      	cmp	r0, r1
 8000b0a:	f200 80cb 	bhi.w	8000ca4 <__udivmoddi4+0x2c0>
 8000b0e:	4643      	mov	r3, r8
 8000b10:	1a09      	subs	r1, r1, r0
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b18:	fb07 1110 	mls	r1, r7, r0, r1
 8000b1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b20:	fb0e fe00 	mul.w	lr, lr, r0
 8000b24:	45a6      	cmp	lr, r4
 8000b26:	d908      	bls.n	8000b3a <__udivmoddi4+0x156>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b30:	d202      	bcs.n	8000b38 <__udivmoddi4+0x154>
 8000b32:	45a6      	cmp	lr, r4
 8000b34:	f200 80bb 	bhi.w	8000cae <__udivmoddi4+0x2ca>
 8000b38:	4608      	mov	r0, r1
 8000b3a:	eba4 040e 	sub.w	r4, r4, lr
 8000b3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b42:	e79c      	b.n	8000a7e <__udivmoddi4+0x9a>
 8000b44:	f1c6 0720 	rsb	r7, r6, #32
 8000b48:	40b3      	lsls	r3, r6
 8000b4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b52:	fa20 f407 	lsr.w	r4, r0, r7
 8000b56:	fa01 f306 	lsl.w	r3, r1, r6
 8000b5a:	431c      	orrs	r4, r3
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b62:	fa00 f306 	lsl.w	r3, r0, r6
 8000b66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b6a:	0c20      	lsrs	r0, r4, #16
 8000b6c:	fa1f fe8c 	uxth.w	lr, ip
 8000b70:	fb09 1118 	mls	r1, r9, r8, r1
 8000b74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b78:	fb08 f00e 	mul.w	r0, r8, lr
 8000b7c:	4288      	cmp	r0, r1
 8000b7e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b82:	d90b      	bls.n	8000b9c <__udivmoddi4+0x1b8>
 8000b84:	eb1c 0101 	adds.w	r1, ip, r1
 8000b88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b8c:	f080 8088 	bcs.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b90:	4288      	cmp	r0, r1
 8000b92:	f240 8085 	bls.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b96:	f1a8 0802 	sub.w	r8, r8, #2
 8000b9a:	4461      	add	r1, ip
 8000b9c:	1a09      	subs	r1, r1, r0
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ba4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ba8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bb0:	458e      	cmp	lr, r1
 8000bb2:	d908      	bls.n	8000bc6 <__udivmoddi4+0x1e2>
 8000bb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bb8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bbc:	d26c      	bcs.n	8000c98 <__udivmoddi4+0x2b4>
 8000bbe:	458e      	cmp	lr, r1
 8000bc0:	d96a      	bls.n	8000c98 <__udivmoddi4+0x2b4>
 8000bc2:	3802      	subs	r0, #2
 8000bc4:	4461      	add	r1, ip
 8000bc6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bca:	fba0 9402 	umull	r9, r4, r0, r2
 8000bce:	eba1 010e 	sub.w	r1, r1, lr
 8000bd2:	42a1      	cmp	r1, r4
 8000bd4:	46c8      	mov	r8, r9
 8000bd6:	46a6      	mov	lr, r4
 8000bd8:	d356      	bcc.n	8000c88 <__udivmoddi4+0x2a4>
 8000bda:	d053      	beq.n	8000c84 <__udivmoddi4+0x2a0>
 8000bdc:	b15d      	cbz	r5, 8000bf6 <__udivmoddi4+0x212>
 8000bde:	ebb3 0208 	subs.w	r2, r3, r8
 8000be2:	eb61 010e 	sbc.w	r1, r1, lr
 8000be6:	fa01 f707 	lsl.w	r7, r1, r7
 8000bea:	fa22 f306 	lsr.w	r3, r2, r6
 8000bee:	40f1      	lsrs	r1, r6
 8000bf0:	431f      	orrs	r7, r3
 8000bf2:	e9c5 7100 	strd	r7, r1, [r5]
 8000bf6:	2600      	movs	r6, #0
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	f1c2 0320 	rsb	r3, r2, #32
 8000c02:	40d8      	lsrs	r0, r3
 8000c04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c08:	fa21 f303 	lsr.w	r3, r1, r3
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4301      	orrs	r1, r0
 8000c10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c1c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c20:	0c0b      	lsrs	r3, r1, #16
 8000c22:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c26:	fb00 f60e 	mul.w	r6, r0, lr
 8000c2a:	429e      	cmp	r6, r3
 8000c2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x260>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c3a:	d22f      	bcs.n	8000c9c <__udivmoddi4+0x2b8>
 8000c3c:	429e      	cmp	r6, r3
 8000c3e:	d92d      	bls.n	8000c9c <__udivmoddi4+0x2b8>
 8000c40:	3802      	subs	r0, #2
 8000c42:	4463      	add	r3, ip
 8000c44:	1b9b      	subs	r3, r3, r6
 8000c46:	b289      	uxth	r1, r1
 8000c48:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c4c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c54:	fb06 f30e 	mul.w	r3, r6, lr
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x28a>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c64:	d216      	bcs.n	8000c94 <__udivmoddi4+0x2b0>
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d914      	bls.n	8000c94 <__udivmoddi4+0x2b0>
 8000c6a:	3e02      	subs	r6, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	1ac9      	subs	r1, r1, r3
 8000c70:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c74:	e738      	b.n	8000ae8 <__udivmoddi4+0x104>
 8000c76:	462e      	mov	r6, r5
 8000c78:	4628      	mov	r0, r5
 8000c7a:	e705      	b.n	8000a88 <__udivmoddi4+0xa4>
 8000c7c:	4606      	mov	r6, r0
 8000c7e:	e6e3      	b.n	8000a48 <__udivmoddi4+0x64>
 8000c80:	4618      	mov	r0, r3
 8000c82:	e6f8      	b.n	8000a76 <__udivmoddi4+0x92>
 8000c84:	454b      	cmp	r3, r9
 8000c86:	d2a9      	bcs.n	8000bdc <__udivmoddi4+0x1f8>
 8000c88:	ebb9 0802 	subs.w	r8, r9, r2
 8000c8c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c90:	3801      	subs	r0, #1
 8000c92:	e7a3      	b.n	8000bdc <__udivmoddi4+0x1f8>
 8000c94:	4646      	mov	r6, r8
 8000c96:	e7ea      	b.n	8000c6e <__udivmoddi4+0x28a>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	e794      	b.n	8000bc6 <__udivmoddi4+0x1e2>
 8000c9c:	4640      	mov	r0, r8
 8000c9e:	e7d1      	b.n	8000c44 <__udivmoddi4+0x260>
 8000ca0:	46d0      	mov	r8, sl
 8000ca2:	e77b      	b.n	8000b9c <__udivmoddi4+0x1b8>
 8000ca4:	3b02      	subs	r3, #2
 8000ca6:	4461      	add	r1, ip
 8000ca8:	e732      	b.n	8000b10 <__udivmoddi4+0x12c>
 8000caa:	4630      	mov	r0, r6
 8000cac:	e709      	b.n	8000ac2 <__udivmoddi4+0xde>
 8000cae:	4464      	add	r4, ip
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	e742      	b.n	8000b3a <__udivmoddi4+0x156>

08000cb4 <__aeabi_idiv0>:
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	; 0x28
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t procFlag = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  uint8_t pcmOutOffset = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cca:	f000 ff15 	bl	8001af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cce:	f000 f8fd 	bl	8000ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd2:	f000 f9fd 	bl	80010d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cd6:	f000 f9db 	bl	8001090 <MX_DMA_Init>
  MX_I2C1_Init();
 8000cda:	f000 f97d 	bl	8000fd8 <MX_I2C1_Init>
  MX_CRC_Init();
 8000cde:	f000 f95f 	bl	8000fa0 <MX_CRC_Init>
  MX_I2S2_Init();
 8000ce2:	f000 f9a7 	bl	8001034 <MX_I2S2_Init>
  MX_PDM2PCM_Init();
 8000ce6:	f003 fdb7 	bl	8004858 <MX_PDM2PCM_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2S_Receive_DMA (&hi2s2, gI2SData, BUFFER_SIZE);
 8000cea:	2240      	movs	r2, #64	; 0x40
 8000cec:	496c      	ldr	r1, [pc, #432]	; (8000ea0 <main+0x1e8>)
 8000cee:	486d      	ldr	r0, [pc, #436]	; (8000ea4 <main+0x1ec>)
 8000cf0:	f002 fb88 	bl	8003404 <HAL_I2S_Receive_DMA>

  if (ssd1306_Init (&hi2c1) != 0) { //Setup Screen
 8000cf4:	486c      	ldr	r0, [pc, #432]	; (8000ea8 <main+0x1f0>)
 8000cf6:	f000 fab3 	bl	8001260 <ssd1306_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <main+0x4c>
	Error_Handler ();
 8000d00:	f000 fa92 	bl	8001228 <Error_Handler>
  }

  HAL_Delay (500);
 8000d04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d08:	f000 ff68 	bl	8001bdc <HAL_Delay>
  ssd1306_Fill (Black);
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f000 fbc7 	bl	80014a0 <ssd1306_Fill>
  ssd1306_SetCursor (SCREEN_WIDTH/2 - (11 * 2.5), SCREEN_HEIGHT/2 - 18);
 8000d12:	210e      	movs	r1, #14
 8000d14:	2024      	movs	r0, #36	; 0x24
 8000d16:	f000 fd1f 	bl	8001758 <ssd1306_SetCursor>
  ssd1306_WriteString ("Hello", Font_11x18, White);
 8000d1a:	4a64      	ldr	r2, [pc, #400]	; (8000eac <main+0x1f4>)
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	ca06      	ldmia	r2, {r1, r2}
 8000d20:	4863      	ldr	r0, [pc, #396]	; (8000eb0 <main+0x1f8>)
 8000d22:	f000 fcf3 	bl	800170c <ssd1306_WriteString>
  ssd1306_UpdateScreen (&hi2c1);
 8000d26:	4860      	ldr	r0, [pc, #384]	; (8000ea8 <main+0x1f0>)
 8000d28:	f000 fbde 	bl	80014e8 <ssd1306_UpdateScreen>
  HAL_Delay (500);
 8000d2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d30:	f000 ff54 	bl	8001bdc <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (gDataFlag)
 8000d34:	4b5f      	ldr	r3, [pc, #380]	; (8000eb4 <main+0x1fc>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d01e      	beq.n	8000d7a <main+0xc2>
	{
	  uint8_t offset = (gDataFlag - 1) * DATA_SIZE;
 8000d3c:	4b5d      	ldr	r3, [pc, #372]	; (8000eb4 <main+0x1fc>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	3b01      	subs	r3, #1
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	015b      	lsls	r3, r3, #5
 8000d46:	74fb      	strb	r3, [r7, #19]
	  for (int i = 0; i < DATA_SIZE; i++)
 8000d48:	2300      	movs	r3, #0
 8000d4a:	623b      	str	r3, [r7, #32]
 8000d4c:	e00c      	b.n	8000d68 <main+0xb0>
	  {
	  	gPdmBuffer[i] = gI2SData [i + offset];
 8000d4e:	7cfa      	ldrb	r2, [r7, #19]
 8000d50:	6a3b      	ldr	r3, [r7, #32]
 8000d52:	4413      	add	r3, r2
 8000d54:	4a52      	ldr	r2, [pc, #328]	; (8000ea0 <main+0x1e8>)
 8000d56:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000d5a:	4a57      	ldr	r2, [pc, #348]	; (8000eb8 <main+0x200>)
 8000d5c:	6a3b      	ldr	r3, [r7, #32]
 8000d5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for (int i = 0; i < DATA_SIZE; i++)
 8000d62:	6a3b      	ldr	r3, [r7, #32]
 8000d64:	3301      	adds	r3, #1
 8000d66:	623b      	str	r3, [r7, #32]
 8000d68:	6a3b      	ldr	r3, [r7, #32]
 8000d6a:	2b1f      	cmp	r3, #31
 8000d6c:	ddef      	ble.n	8000d4e <main+0x96>
	  }
	  gDataFlag = 0;
 8000d6e:	4b51      	ldr	r3, [pc, #324]	; (8000eb4 <main+0x1fc>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
	  procFlag = 1;
 8000d74:	2301      	movs	r3, #1
 8000d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	if (procFlag)
 8000d7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d0d8      	beq.n	8000d34 <main+0x7c>
	{
      PDM_Filter(gPdmBuffer, gPcmBuffer, &PDM1_filter_handler);
 8000d82:	4a4e      	ldr	r2, [pc, #312]	; (8000ebc <main+0x204>)
 8000d84:	494e      	ldr	r1, [pc, #312]	; (8000ec0 <main+0x208>)
 8000d86:	484c      	ldr	r0, [pc, #304]	; (8000eb8 <main+0x200>)
 8000d88:	f005 fc5c 	bl	8006644 <PDM_Filter>

      for (int i = 0; i < SCREEN_WIDTH - DATA_SIZE; i++)
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61fb      	str	r3, [r7, #28]
 8000d90:	e00b      	b.n	8000daa <main+0xf2>
      {
        gDispBuffer[i] = gDispBuffer[i + DATA_SIZE];
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3320      	adds	r3, #32
 8000d96:	4a4b      	ldr	r2, [pc, #300]	; (8000ec4 <main+0x20c>)
 8000d98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d9c:	4949      	ldr	r1, [pc, #292]	; (8000ec4 <main+0x20c>)
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      for (int i = 0; i < SCREEN_WIDTH - DATA_SIZE; i++)
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	3301      	adds	r3, #1
 8000da8:	61fb      	str	r3, [r7, #28]
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	2b5f      	cmp	r3, #95	; 0x5f
 8000dae:	ddf0      	ble.n	8000d92 <main+0xda>
      }

      for (int i = 0; i < DATA_SIZE ; i++)
 8000db0:	2300      	movs	r3, #0
 8000db2:	61bb      	str	r3, [r7, #24]
 8000db4:	e00b      	b.n	8000dce <main+0x116>
      {
        gDispBuffer[i + SCREEN_WIDTH - DATA_SIZE] = gPcmBuffer [i];
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	3360      	adds	r3, #96	; 0x60
 8000dba:	4941      	ldr	r1, [pc, #260]	; (8000ec0 <main+0x208>)
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000dc2:	4940      	ldr	r1, [pc, #256]	; (8000ec4 <main+0x20c>)
 8000dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      for (int i = 0; i < DATA_SIZE ; i++)
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	61bb      	str	r3, [r7, #24]
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	2b1f      	cmp	r3, #31
 8000dd2:	ddf0      	ble.n	8000db6 <main+0xfe>
      }

      ssd1306_Fill(Black);
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f000 fb63 	bl	80014a0 <ssd1306_Fill>
      for (int i = 0; i < SCREEN_WIDTH; i++)
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	e042      	b.n	8000e66 <main+0x1ae>
      {
        double scaled = (1.0 * gDispBuffer [i] ) / (1.0 * INT32_MAX); // / INT32_MAX * SCREEN_HEIGHT;
 8000de0:	4a38      	ldr	r2, [pc, #224]	; (8000ec4 <main+0x20c>)
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fb3f 	bl	800046c <__aeabi_i2d>
 8000dee:	a32a      	add	r3, pc, #168	; (adr r3, 8000e98 <main+0x1e0>)
 8000df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df4:	f7ff fcce 	bl	8000794 <__aeabi_ddiv>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	e9c7 2302 	strd	r2, r3, [r7, #8]
        int y = scaled * (SCREEN_HEIGHT / 2.0);
 8000e00:	f04f 0200 	mov.w	r2, #0
 8000e04:	4b30      	ldr	r3, [pc, #192]	; (8000ec8 <main+0x210>)
 8000e06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e0a:	f7ff fb99 	bl	8000540 <__aeabi_dmul>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	460b      	mov	r3, r1
 8000e12:	4610      	mov	r0, r2
 8000e14:	4619      	mov	r1, r3
 8000e16:	f7ff fda5 	bl	8000964 <__aeabi_d2iz>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	607b      	str	r3, [r7, #4]
        y += (SCREEN_HEIGHT / 2.0);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff fb24 	bl	800046c <__aeabi_i2d>
 8000e24:	f04f 0200 	mov.w	r2, #0
 8000e28:	4b27      	ldr	r3, [pc, #156]	; (8000ec8 <main+0x210>)
 8000e2a:	f7ff f9d3 	bl	80001d4 <__adddf3>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	460b      	mov	r3, r1
 8000e32:	4610      	mov	r0, r2
 8000e34:	4619      	mov	r1, r3
 8000e36:	f7ff fd95 	bl	8000964 <__aeabi_d2iz>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	607b      	str	r3, [r7, #4]

        //Bound y to screen
        y = y > SCREEN_HEIGHT ? SCREEN_HEIGHT : y;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b40      	cmp	r3, #64	; 0x40
 8000e42:	bfa8      	it	ge
 8000e44:	2340      	movge	r3, #64	; 0x40
 8000e46:	607b      	str	r3, [r7, #4]
        y = y < 0 ? 0 : y;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8000e4e:	607b      	str	r3, [r7, #4]

        ssd1306_DrawPixel(i, y, White);
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	b2d1      	uxtb	r1, r2
 8000e58:	2201      	movs	r2, #1
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 fb76 	bl	800154c <ssd1306_DrawPixel>
      for (int i = 0; i < SCREEN_WIDTH; i++)
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	3301      	adds	r3, #1
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	2b7f      	cmp	r3, #127	; 0x7f
 8000e6a:	ddb9      	ble.n	8000de0 <main+0x128>
      }
      ssd1306_UpdateScreen(&hi2c1);
 8000e6c:	480e      	ldr	r0, [pc, #56]	; (8000ea8 <main+0x1f0>)
 8000e6e:	f000 fb3b 	bl	80014e8 <ssd1306_UpdateScreen>

      pcmOutOffset += DATA_SIZE;
 8000e72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e76:	3320      	adds	r3, #32
 8000e78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      pcmOutOffset = pcmOutOffset == 2 * DATA_SIZE ? 0 : pcmOutOffset;
 8000e7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e80:	2b40      	cmp	r3, #64	; 0x40
 8000e82:	d002      	beq.n	8000e8a <main+0x1d2>
 8000e84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e88:	e000      	b.n	8000e8c <main+0x1d4>
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  procFlag = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (gDataFlag)
 8000e96:	e74d      	b.n	8000d34 <main+0x7c>
 8000e98:	ffc00000 	.word	0xffc00000
 8000e9c:	41dfffff 	.word	0x41dfffff
 8000ea0:	2000059c 	.word	0x2000059c
 8000ea4:	200004f4 	.word	0x200004f4
 8000ea8:	200004a0 	.word	0x200004a0
 8000eac:	20000400 	.word	0x20000400
 8000eb0:	08006f60 	.word	0x08006f60
 8000eb4:	200008dc 	.word	0x200008dc
 8000eb8:	2000061c 	.word	0x2000061c
 8000ebc:	20000cec 	.word	0x20000cec
 8000ec0:	2000065c 	.word	0x2000065c
 8000ec4:	200006dc 	.word	0x200006dc
 8000ec8:	40400000 	.word	0x40400000

08000ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b094      	sub	sp, #80	; 0x50
 8000ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed2:	f107 0320 	add.w	r3, r7, #32
 8000ed6:	2230      	movs	r2, #48	; 0x30
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f005 fc36 	bl	800674c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	4b28      	ldr	r3, [pc, #160]	; (8000f98 <SystemClock_Config+0xcc>)
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef8:	4a27      	ldr	r2, [pc, #156]	; (8000f98 <SystemClock_Config+0xcc>)
 8000efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000efe:	6413      	str	r3, [r2, #64]	; 0x40
 8000f00:	4b25      	ldr	r3, [pc, #148]	; (8000f98 <SystemClock_Config+0xcc>)
 8000f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	4b22      	ldr	r3, [pc, #136]	; (8000f9c <SystemClock_Config+0xd0>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a21      	ldr	r2, [pc, #132]	; (8000f9c <SystemClock_Config+0xd0>)
 8000f16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	4b1f      	ldr	r3, [pc, #124]	; (8000f9c <SystemClock_Config+0xd0>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f32:	2302      	movs	r3, #2
 8000f34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f3c:	2308      	movs	r3, #8
 8000f3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f40:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f44:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f46:	2302      	movs	r3, #2
 8000f48:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f4a:	2307      	movs	r3, #7
 8000f4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4e:	f107 0320 	add.w	r3, r7, #32
 8000f52:	4618      	mov	r0, r3
 8000f54:	f002 febc 	bl	8003cd0 <HAL_RCC_OscConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f5e:	f000 f963 	bl	8001228 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f62:	230f      	movs	r3, #15
 8000f64:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f66:	2302      	movs	r3, #2
 8000f68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f6e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f78:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f7a:	f107 030c 	add.w	r3, r7, #12
 8000f7e:	2105      	movs	r1, #5
 8000f80:	4618      	mov	r0, r3
 8000f82:	f003 f91d 	bl	80041c0 <HAL_RCC_ClockConfig>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f8c:	f000 f94c 	bl	8001228 <Error_Handler>
  }
}
 8000f90:	bf00      	nop
 8000f92:	3750      	adds	r7, #80	; 0x50
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40007000 	.word	0x40007000

08000fa0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000fa4:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <MX_CRC_Init+0x30>)
 8000fa6:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <MX_CRC_Init+0x34>)
 8000fa8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000faa:	4809      	ldr	r0, [pc, #36]	; (8000fd0 <MX_CRC_Init+0x30>)
 8000fac:	f000 ff4b 	bl	8001e46 <HAL_CRC_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000fb6:	f000 f937 	bl	8001228 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 8000fba:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <MX_CRC_Init+0x30>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <MX_CRC_Init+0x30>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f042 0201 	orr.w	r2, r2, #1
 8000fc8:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000498 	.word	0x20000498
 8000fd4:	40023000 	.word	0x40023000

08000fd8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <MX_I2C1_Init+0x50>)
 8000fde:	4a13      	ldr	r2, [pc, #76]	; (800102c <MX_I2C1_Init+0x54>)
 8000fe0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <MX_I2C1_Init+0x50>)
 8000fe4:	4a12      	ldr	r2, [pc, #72]	; (8001030 <MX_I2C1_Init+0x58>)
 8000fe6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <MX_I2C1_Init+0x50>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <MX_I2C1_Init+0x50>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <MX_I2C1_Init+0x50>)
 8000ff6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ffa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <MX_I2C1_Init+0x50>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <MX_I2C1_Init+0x50>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <MX_I2C1_Init+0x50>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <MX_I2C1_Init+0x50>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001014:	4804      	ldr	r0, [pc, #16]	; (8001028 <MX_I2C1_Init+0x50>)
 8001016:	f001 fc59 	bl	80028cc <HAL_I2C_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001020:	f000 f902 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	200004a0 	.word	0x200004a0
 800102c:	40005400 	.word	0x40005400
 8001030:	00061a80 	.word	0x00061a80

08001034 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001038:	4b13      	ldr	r3, [pc, #76]	; (8001088 <MX_I2S2_Init+0x54>)
 800103a:	4a14      	ldr	r2, [pc, #80]	; (800108c <MX_I2S2_Init+0x58>)
 800103c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <MX_I2S2_Init+0x54>)
 8001040:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001044:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 8001046:	4b10      	ldr	r3, [pc, #64]	; (8001088 <MX_I2S2_Init+0x54>)
 8001048:	2210      	movs	r2, #16
 800104a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 800104c:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <MX_I2S2_Init+0x54>)
 800104e:	2201      	movs	r2, #1
 8001050:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001052:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <MX_I2S2_Init+0x54>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <MX_I2S2_Init+0x54>)
 800105a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800105e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <MX_I2S2_Init+0x54>)
 8001062:	2200      	movs	r2, #0
 8001064:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <MX_I2S2_Init+0x54>)
 8001068:	2200      	movs	r2, #0
 800106a:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <MX_I2S2_Init+0x54>)
 800106e:	2200      	movs	r2, #0
 8001070:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_I2S2_Init+0x54>)
 8001074:	f002 f886 	bl	8003184 <HAL_I2S_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800107e:	f000 f8d3 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200004f4 	.word	0x200004f4
 800108c:	40003800 	.word	0x40003800

08001090 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <MX_DMA_Init+0x3c>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a0b      	ldr	r2, [pc, #44]	; (80010cc <MX_DMA_Init+0x3c>)
 80010a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <MX_DMA_Init+0x3c>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	200e      	movs	r0, #14
 80010b8:	f000 fe8f 	bl	8001dda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80010bc:	200e      	movs	r0, #14
 80010be:	f000 fea8 	bl	8001e12 <HAL_NVIC_EnableIRQ>

}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800

080010d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
 80010e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	4b3b      	ldr	r3, [pc, #236]	; (80011d8 <MX_GPIO_Init+0x108>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a3a      	ldr	r2, [pc, #232]	; (80011d8 <MX_GPIO_Init+0x108>)
 80010f0:	f043 0304 	orr.w	r3, r3, #4
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b38      	ldr	r3, [pc, #224]	; (80011d8 <MX_GPIO_Init+0x108>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0304 	and.w	r3, r3, #4
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	4b34      	ldr	r3, [pc, #208]	; (80011d8 <MX_GPIO_Init+0x108>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a33      	ldr	r2, [pc, #204]	; (80011d8 <MX_GPIO_Init+0x108>)
 800110c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b31      	ldr	r3, [pc, #196]	; (80011d8 <MX_GPIO_Init+0x108>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <MX_GPIO_Init+0x108>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a2c      	ldr	r2, [pc, #176]	; (80011d8 <MX_GPIO_Init+0x108>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <MX_GPIO_Init+0x108>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	4b26      	ldr	r3, [pc, #152]	; (80011d8 <MX_GPIO_Init+0x108>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a25      	ldr	r2, [pc, #148]	; (80011d8 <MX_GPIO_Init+0x108>)
 8001144:	f043 0302 	orr.w	r3, r3, #2
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <MX_GPIO_Init+0x108>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	603b      	str	r3, [r7, #0]
 800115a:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <MX_GPIO_Init+0x108>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a1e      	ldr	r2, [pc, #120]	; (80011d8 <MX_GPIO_Init+0x108>)
 8001160:	f043 0308 	orr.w	r3, r3, #8
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <MX_GPIO_Init+0x108>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0308 	and.w	r3, r3, #8
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001178:	4818      	ldr	r0, [pc, #96]	; (80011dc <MX_GPIO_Init+0x10c>)
 800117a:	f001 fb8d 	bl	8002898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_0_Pin */
  GPIO_InitStruct.Pin = Button_0_Pin;
 800117e:	2301      	movs	r3, #1
 8001180:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001182:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001186:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_0_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	4619      	mov	r1, r3
 8001192:	4813      	ldr	r0, [pc, #76]	; (80011e0 <MX_GPIO_Init+0x110>)
 8001194:	f001 f9e4 	bl	8002560 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001198:	2304      	movs	r3, #4
 800119a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800119c:	2300      	movs	r3, #0
 800119e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	4619      	mov	r1, r3
 80011aa:	480e      	ldr	r0, [pc, #56]	; (80011e4 <MX_GPIO_Init+0x114>)
 80011ac:	f001 f9d8 	bl	8002560 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 80011b0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80011b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b6:	2301      	movs	r3, #1
 80011b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2300      	movs	r3, #0
 80011c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	4619      	mov	r1, r3
 80011c8:	4804      	ldr	r0, [pc, #16]	; (80011dc <MX_GPIO_Init+0x10c>)
 80011ca:	f001 f9c9 	bl	8002560 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011ce:	bf00      	nop
 80011d0:	3728      	adds	r7, #40	; 0x28
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020c00 	.word	0x40020c00
 80011e0:	40020000 	.word	0x40020000
 80011e4:	40020400 	.word	0x40020400

080011e8 <HAL_I2S_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2S_RxHalfCpltCallback (I2S_HandleTypeDef *hi2s) { //
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	gDataFlag = 1;
 80011f0:	4b04      	ldr	r3, [pc, #16]	; (8001204 <HAL_I2S_RxHalfCpltCallback+0x1c>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	701a      	strb	r2, [r3, #0]
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	200008dc 	.word	0x200008dc

08001208 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback (I2S_HandleTypeDef *hi2s) {
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	gDataFlag = 2;
 8001210:	4b04      	ldr	r3, [pc, #16]	; (8001224 <HAL_I2S_RxCpltCallback+0x1c>)
 8001212:	2202      	movs	r2, #2
 8001214:	701a      	strb	r2, [r3, #0]
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	200008dc 	.word	0x200008dc

08001228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800122c:	b672      	cpsid	i
}
 800122e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001230:	e7fe      	b.n	8001230 <Error_Handler+0x8>

08001232 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b086      	sub	sp, #24
 8001236:	af04      	add	r7, sp, #16
 8001238:	6078      	str	r0, [r7, #4]
 800123a:	460b      	mov	r3, r1
 800123c:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 800123e:	230a      	movs	r3, #10
 8001240:	9302      	str	r3, [sp, #8]
 8001242:	2301      	movs	r3, #1
 8001244:	9301      	str	r3, [sp, #4]
 8001246:	1cfb      	adds	r3, r7, #3
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	2301      	movs	r3, #1
 800124c:	2200      	movs	r2, #0
 800124e:	2178      	movs	r1, #120	; 0x78
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f001 fc7f 	bl	8002b54 <HAL_I2C_Mem_Write>
 8001256:	4603      	mov	r3, r0
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8001268:	2064      	movs	r0, #100	; 0x64
 800126a:	f000 fcb7 	bl	8001bdc <HAL_Delay>
    int status = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8001272:	21ae      	movs	r1, #174	; 0xae
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ffdc 	bl	8001232 <ssd1306_WriteCommand>
 800127a:	4603      	mov	r3, r0
 800127c:	461a      	mov	r2, r3
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4413      	add	r3, r2
 8001282:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8001284:	2120      	movs	r1, #32
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff ffd3 	bl	8001232 <ssd1306_WriteCommand>
 800128c:	4603      	mov	r3, r0
 800128e:	461a      	mov	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4413      	add	r3, r2
 8001294:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001296:	2110      	movs	r1, #16
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff ffca 	bl	8001232 <ssd1306_WriteCommand>
 800129e:	4603      	mov	r3, r0
 80012a0:	461a      	mov	r2, r3
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4413      	add	r3, r2
 80012a6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 80012a8:	21b0      	movs	r1, #176	; 0xb0
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ffc1 	bl	8001232 <ssd1306_WriteCommand>
 80012b0:	4603      	mov	r3, r0
 80012b2:	461a      	mov	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4413      	add	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 80012ba:	21c8      	movs	r1, #200	; 0xc8
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff ffb8 	bl	8001232 <ssd1306_WriteCommand>
 80012c2:	4603      	mov	r3, r0
 80012c4:	461a      	mov	r2, r3
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4413      	add	r3, r2
 80012ca:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 80012cc:	2100      	movs	r1, #0
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ffaf 	bl	8001232 <ssd1306_WriteCommand>
 80012d4:	4603      	mov	r3, r0
 80012d6:	461a      	mov	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4413      	add	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 80012de:	2110      	movs	r1, #16
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ffa6 	bl	8001232 <ssd1306_WriteCommand>
 80012e6:	4603      	mov	r3, r0
 80012e8:	461a      	mov	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4413      	add	r3, r2
 80012ee:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 80012f0:	2140      	movs	r1, #64	; 0x40
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff ff9d 	bl	8001232 <ssd1306_WriteCommand>
 80012f8:	4603      	mov	r3, r0
 80012fa:	461a      	mov	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4413      	add	r3, r2
 8001300:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8001302:	2181      	movs	r1, #129	; 0x81
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ff94 	bl	8001232 <ssd1306_WriteCommand>
 800130a:	4603      	mov	r3, r0
 800130c:	461a      	mov	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4413      	add	r3, r2
 8001312:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8001314:	21ff      	movs	r1, #255	; 0xff
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff ff8b 	bl	8001232 <ssd1306_WriteCommand>
 800131c:	4603      	mov	r3, r0
 800131e:	461a      	mov	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4413      	add	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8001326:	21a1      	movs	r1, #161	; 0xa1
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ff82 	bl	8001232 <ssd1306_WriteCommand>
 800132e:	4603      	mov	r3, r0
 8001330:	461a      	mov	r2, r3
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	4413      	add	r3, r2
 8001336:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8001338:	21a6      	movs	r1, #166	; 0xa6
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff ff79 	bl	8001232 <ssd1306_WriteCommand>
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4413      	add	r3, r2
 8001348:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 800134a:	21a8      	movs	r1, #168	; 0xa8
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ff70 	bl	8001232 <ssd1306_WriteCommand>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4413      	add	r3, r2
 800135a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 800135c:	213f      	movs	r1, #63	; 0x3f
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff ff67 	bl	8001232 <ssd1306_WriteCommand>
 8001364:	4603      	mov	r3, r0
 8001366:	461a      	mov	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4413      	add	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800136e:	21a4      	movs	r1, #164	; 0xa4
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ff5e 	bl	8001232 <ssd1306_WriteCommand>
 8001376:	4603      	mov	r3, r0
 8001378:	461a      	mov	r2, r3
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4413      	add	r3, r2
 800137e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8001380:	21d3      	movs	r1, #211	; 0xd3
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ff55 	bl	8001232 <ssd1306_WriteCommand>
 8001388:	4603      	mov	r3, r0
 800138a:	461a      	mov	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4413      	add	r3, r2
 8001390:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8001392:	2100      	movs	r1, #0
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7ff ff4c 	bl	8001232 <ssd1306_WriteCommand>
 800139a:	4603      	mov	r3, r0
 800139c:	461a      	mov	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4413      	add	r3, r2
 80013a2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 80013a4:	21d5      	movs	r1, #213	; 0xd5
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ff43 	bl	8001232 <ssd1306_WriteCommand>
 80013ac:	4603      	mov	r3, r0
 80013ae:	461a      	mov	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4413      	add	r3, r2
 80013b4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 80013b6:	21f0      	movs	r1, #240	; 0xf0
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ff3a 	bl	8001232 <ssd1306_WriteCommand>
 80013be:	4603      	mov	r3, r0
 80013c0:	461a      	mov	r2, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4413      	add	r3, r2
 80013c6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 80013c8:	21d9      	movs	r1, #217	; 0xd9
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff ff31 	bl	8001232 <ssd1306_WriteCommand>
 80013d0:	4603      	mov	r3, r0
 80013d2:	461a      	mov	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4413      	add	r3, r2
 80013d8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 80013da:	2122      	movs	r1, #34	; 0x22
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff ff28 	bl	8001232 <ssd1306_WriteCommand>
 80013e2:	4603      	mov	r3, r0
 80013e4:	461a      	mov	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	4413      	add	r3, r2
 80013ea:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 80013ec:	21da      	movs	r1, #218	; 0xda
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff ff1f 	bl	8001232 <ssd1306_WriteCommand>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4413      	add	r3, r2
 80013fc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);   
 80013fe:	2112      	movs	r1, #18
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff ff16 	bl	8001232 <ssd1306_WriteCommand>
 8001406:	4603      	mov	r3, r0
 8001408:	461a      	mov	r2, r3
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	4413      	add	r3, r2
 800140e:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8001410:	21db      	movs	r1, #219	; 0xdb
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff ff0d 	bl	8001232 <ssd1306_WriteCommand>
 8001418:	4603      	mov	r3, r0
 800141a:	461a      	mov	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4413      	add	r3, r2
 8001420:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8001422:	2120      	movs	r1, #32
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff ff04 	bl	8001232 <ssd1306_WriteCommand>
 800142a:	4603      	mov	r3, r0
 800142c:	461a      	mov	r2, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	4413      	add	r3, r2
 8001432:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8001434:	218d      	movs	r1, #141	; 0x8d
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff fefb 	bl	8001232 <ssd1306_WriteCommand>
 800143c:	4603      	mov	r3, r0
 800143e:	461a      	mov	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4413      	add	r3, r2
 8001444:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8001446:	2114      	movs	r1, #20
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff fef2 	bl	8001232 <ssd1306_WriteCommand>
 800144e:	4603      	mov	r3, r0
 8001450:	461a      	mov	r2, r3
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	4413      	add	r3, r2
 8001456:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8001458:	21af      	movs	r1, #175	; 0xaf
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff fee9 	bl	8001232 <ssd1306_WriteCommand>
 8001460:	4603      	mov	r3, r0
 8001462:	461a      	mov	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4413      	add	r3, r2
 8001468:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <ssd1306_Init+0x214>
        return 1;
 8001470:	2301      	movs	r3, #1
 8001472:	e00f      	b.n	8001494 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8001474:	2000      	movs	r0, #0
 8001476:	f000 f813 	bl	80014a0 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 f834 	bl	80014e8 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <ssd1306_Init+0x23c>)
 8001482:	2200      	movs	r2, #0
 8001484:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001486:	4b05      	ldr	r3, [pc, #20]	; (800149c <ssd1306_Init+0x23c>)
 8001488:	2200      	movs	r2, #0
 800148a:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 800148c:	4b03      	ldr	r3, [pc, #12]	; (800149c <ssd1306_Init+0x23c>)
 800148e:	2201      	movs	r2, #1
 8001490:	715a      	strb	r2, [r3, #5]

    return 0;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000ce0 	.word	0x20000ce0

080014a0 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	e00d      	b.n	80014cc <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <ssd1306_Fill+0x1a>
 80014b6:	2100      	movs	r1, #0
 80014b8:	e000      	b.n	80014bc <ssd1306_Fill+0x1c>
 80014ba:	21ff      	movs	r1, #255	; 0xff
 80014bc:	4a09      	ldr	r2, [pc, #36]	; (80014e4 <ssd1306_Fill+0x44>)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4413      	add	r3, r2
 80014c2:	460a      	mov	r2, r1
 80014c4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	3301      	adds	r3, #1
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014d2:	d3ed      	bcc.n	80014b0 <ssd1306_Fill+0x10>
    }
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	200008e0 	.word	0x200008e0

080014e8 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af04      	add	r7, sp, #16
 80014ee:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 80014f0:	2300      	movs	r3, #0
 80014f2:	73fb      	strb	r3, [r7, #15]
 80014f4:	e020      	b.n	8001538 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
 80014f8:	3b50      	subs	r3, #80	; 0x50
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	4619      	mov	r1, r3
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff fe97 	bl	8001232 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8001504:	2100      	movs	r1, #0
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff fe93 	bl	8001232 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 800150c:	2110      	movs	r1, #16
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff fe8f 	bl	8001232 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001514:	7bfb      	ldrb	r3, [r7, #15]
 8001516:	01db      	lsls	r3, r3, #7
 8001518:	4a0b      	ldr	r2, [pc, #44]	; (8001548 <ssd1306_UpdateScreen+0x60>)
 800151a:	4413      	add	r3, r2
 800151c:	2264      	movs	r2, #100	; 0x64
 800151e:	9202      	str	r2, [sp, #8]
 8001520:	2280      	movs	r2, #128	; 0x80
 8001522:	9201      	str	r2, [sp, #4]
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	2301      	movs	r3, #1
 8001528:	2240      	movs	r2, #64	; 0x40
 800152a:	2178      	movs	r1, #120	; 0x78
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f001 fb11 	bl	8002b54 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8001532:	7bfb      	ldrb	r3, [r7, #15]
 8001534:	3301      	adds	r3, #1
 8001536:	73fb      	strb	r3, [r7, #15]
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	2b07      	cmp	r3, #7
 800153c:	d9db      	bls.n	80014f6 <ssd1306_UpdateScreen+0xe>
    }
}
 800153e:	bf00      	nop
 8001540:	bf00      	nop
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	200008e0 	.word	0x200008e0

0800154c <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
 8001556:	460b      	mov	r3, r1
 8001558:	71bb      	strb	r3, [r7, #6]
 800155a:	4613      	mov	r3, r2
 800155c:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	2b00      	cmp	r3, #0
 8001564:	db48      	blt.n	80015f8 <ssd1306_DrawPixel+0xac>
 8001566:	79bb      	ldrb	r3, [r7, #6]
 8001568:	2b3f      	cmp	r3, #63	; 0x3f
 800156a:	d845      	bhi.n	80015f8 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 800156c:	4b25      	ldr	r3, [pc, #148]	; (8001604 <ssd1306_DrawPixel+0xb8>)
 800156e:	791b      	ldrb	r3, [r3, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d006      	beq.n	8001582 <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8001574:	797b      	ldrb	r3, [r7, #5]
 8001576:	2b00      	cmp	r3, #0
 8001578:	bf0c      	ite	eq
 800157a:	2301      	moveq	r3, #1
 800157c:	2300      	movne	r3, #0
 800157e:	b2db      	uxtb	r3, r3
 8001580:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8001582:	797b      	ldrb	r3, [r7, #5]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d11a      	bne.n	80015be <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001588:	79fa      	ldrb	r2, [r7, #7]
 800158a:	79bb      	ldrb	r3, [r7, #6]
 800158c:	08db      	lsrs	r3, r3, #3
 800158e:	b2d8      	uxtb	r0, r3
 8001590:	4603      	mov	r3, r0
 8001592:	01db      	lsls	r3, r3, #7
 8001594:	4413      	add	r3, r2
 8001596:	4a1c      	ldr	r2, [pc, #112]	; (8001608 <ssd1306_DrawPixel+0xbc>)
 8001598:	5cd3      	ldrb	r3, [r2, r3]
 800159a:	b25a      	sxtb	r2, r3
 800159c:	79bb      	ldrb	r3, [r7, #6]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	2101      	movs	r1, #1
 80015a4:	fa01 f303 	lsl.w	r3, r1, r3
 80015a8:	b25b      	sxtb	r3, r3
 80015aa:	4313      	orrs	r3, r2
 80015ac:	b259      	sxtb	r1, r3
 80015ae:	79fa      	ldrb	r2, [r7, #7]
 80015b0:	4603      	mov	r3, r0
 80015b2:	01db      	lsls	r3, r3, #7
 80015b4:	4413      	add	r3, r2
 80015b6:	b2c9      	uxtb	r1, r1
 80015b8:	4a13      	ldr	r2, [pc, #76]	; (8001608 <ssd1306_DrawPixel+0xbc>)
 80015ba:	54d1      	strb	r1, [r2, r3]
 80015bc:	e01d      	b.n	80015fa <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80015be:	79fa      	ldrb	r2, [r7, #7]
 80015c0:	79bb      	ldrb	r3, [r7, #6]
 80015c2:	08db      	lsrs	r3, r3, #3
 80015c4:	b2d8      	uxtb	r0, r3
 80015c6:	4603      	mov	r3, r0
 80015c8:	01db      	lsls	r3, r3, #7
 80015ca:	4413      	add	r3, r2
 80015cc:	4a0e      	ldr	r2, [pc, #56]	; (8001608 <ssd1306_DrawPixel+0xbc>)
 80015ce:	5cd3      	ldrb	r3, [r2, r3]
 80015d0:	b25a      	sxtb	r2, r3
 80015d2:	79bb      	ldrb	r3, [r7, #6]
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	2101      	movs	r1, #1
 80015da:	fa01 f303 	lsl.w	r3, r1, r3
 80015de:	b25b      	sxtb	r3, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	b25b      	sxtb	r3, r3
 80015e4:	4013      	ands	r3, r2
 80015e6:	b259      	sxtb	r1, r3
 80015e8:	79fa      	ldrb	r2, [r7, #7]
 80015ea:	4603      	mov	r3, r0
 80015ec:	01db      	lsls	r3, r3, #7
 80015ee:	4413      	add	r3, r2
 80015f0:	b2c9      	uxtb	r1, r1
 80015f2:	4a05      	ldr	r2, [pc, #20]	; (8001608 <ssd1306_DrawPixel+0xbc>)
 80015f4:	54d1      	strb	r1, [r2, r3]
 80015f6:	e000      	b.n	80015fa <ssd1306_DrawPixel+0xae>
        return;
 80015f8:	bf00      	nop
    }
}
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	20000ce0 	.word	0x20000ce0
 8001608:	200008e0 	.word	0x200008e0

0800160c <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 800160c:	b590      	push	{r4, r7, lr}
 800160e:	b089      	sub	sp, #36	; 0x24
 8001610:	af00      	add	r7, sp, #0
 8001612:	4604      	mov	r4, r0
 8001614:	1d38      	adds	r0, r7, #4
 8001616:	e880 0006 	stmia.w	r0, {r1, r2}
 800161a:	461a      	mov	r2, r3
 800161c:	4623      	mov	r3, r4
 800161e:	73fb      	strb	r3, [r7, #15]
 8001620:	4613      	mov	r3, r2
 8001622:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001624:	4b38      	ldr	r3, [pc, #224]	; (8001708 <ssd1306_WriteChar+0xfc>)
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	793b      	ldrb	r3, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	2b7f      	cmp	r3, #127	; 0x7f
 8001630:	dc06      	bgt.n	8001640 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001632:	4b35      	ldr	r3, [pc, #212]	; (8001708 <ssd1306_WriteChar+0xfc>)
 8001634:	885b      	ldrh	r3, [r3, #2]
 8001636:	461a      	mov	r2, r3
 8001638:	797b      	ldrb	r3, [r7, #5]
 800163a:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800163c:	2b3f      	cmp	r3, #63	; 0x3f
 800163e:	dd01      	ble.n	8001644 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8001640:	2300      	movs	r3, #0
 8001642:	e05d      	b.n	8001700 <ssd1306_WriteChar+0xf4>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8001644:	2300      	movs	r3, #0
 8001646:	61fb      	str	r3, [r7, #28]
 8001648:	e04c      	b.n	80016e4 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	3b20      	subs	r3, #32
 8001650:	7979      	ldrb	r1, [r7, #5]
 8001652:	fb01 f303 	mul.w	r3, r1, r3
 8001656:	4619      	mov	r1, r3
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	440b      	add	r3, r1
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	4413      	add	r3, r2
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8001664:	2300      	movs	r3, #0
 8001666:	61bb      	str	r3, [r7, #24]
 8001668:	e034      	b.n	80016d4 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d012      	beq.n	80016a0 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800167a:	4b23      	ldr	r3, [pc, #140]	; (8001708 <ssd1306_WriteChar+0xfc>)
 800167c:	881b      	ldrh	r3, [r3, #0]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	b2db      	uxtb	r3, r3
 8001684:	4413      	add	r3, r2
 8001686:	b2d8      	uxtb	r0, r3
 8001688:	4b1f      	ldr	r3, [pc, #124]	; (8001708 <ssd1306_WriteChar+0xfc>)
 800168a:	885b      	ldrh	r3, [r3, #2]
 800168c:	b2da      	uxtb	r2, r3
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	4413      	add	r3, r2
 8001694:	b2db      	uxtb	r3, r3
 8001696:	7bba      	ldrb	r2, [r7, #14]
 8001698:	4619      	mov	r1, r3
 800169a:	f7ff ff57 	bl	800154c <ssd1306_DrawPixel>
 800169e:	e016      	b.n	80016ce <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80016a0:	4b19      	ldr	r3, [pc, #100]	; (8001708 <ssd1306_WriteChar+0xfc>)
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	4413      	add	r3, r2
 80016ac:	b2d8      	uxtb	r0, r3
 80016ae:	4b16      	ldr	r3, [pc, #88]	; (8001708 <ssd1306_WriteChar+0xfc>)
 80016b0:	885b      	ldrh	r3, [r3, #2]
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	4413      	add	r3, r2
 80016ba:	b2d9      	uxtb	r1, r3
 80016bc:	7bbb      	ldrb	r3, [r7, #14]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	bf0c      	ite	eq
 80016c2:	2301      	moveq	r3, #1
 80016c4:	2300      	movne	r3, #0
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	461a      	mov	r2, r3
 80016ca:	f7ff ff3f 	bl	800154c <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	3301      	adds	r3, #1
 80016d2:	61bb      	str	r3, [r7, #24]
 80016d4:	793b      	ldrb	r3, [r7, #4]
 80016d6:	461a      	mov	r2, r3
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	4293      	cmp	r3, r2
 80016dc:	d3c5      	bcc.n	800166a <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3301      	adds	r3, #1
 80016e2:	61fb      	str	r3, [r7, #28]
 80016e4:	797b      	ldrb	r3, [r7, #5]
 80016e6:	461a      	mov	r2, r3
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d3ad      	bcc.n	800164a <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <ssd1306_WriteChar+0xfc>)
 80016f0:	881a      	ldrh	r2, [r3, #0]
 80016f2:	793b      	ldrb	r3, [r7, #4]
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	4413      	add	r3, r2
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	4b03      	ldr	r3, [pc, #12]	; (8001708 <ssd1306_WriteChar+0xfc>)
 80016fc:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3724      	adds	r7, #36	; 0x24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd90      	pop	{r4, r7, pc}
 8001708:	20000ce0 	.word	0x20000ce0

0800170c <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	1d38      	adds	r0, r7, #4
 8001716:	e880 0006 	stmia.w	r0, {r1, r2}
 800171a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 800171c:	e012      	b.n	8001744 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	7818      	ldrb	r0, [r3, #0]
 8001722:	78fb      	ldrb	r3, [r7, #3]
 8001724:	1d3a      	adds	r2, r7, #4
 8001726:	ca06      	ldmia	r2, {r1, r2}
 8001728:	f7ff ff70 	bl	800160c <ssd1306_WriteChar>
 800172c:	4603      	mov	r3, r0
 800172e:	461a      	mov	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	429a      	cmp	r2, r3
 8001736:	d002      	beq.n	800173e <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	e008      	b.n	8001750 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	3301      	adds	r3, #1
 8001742:	60fb      	str	r3, [r7, #12]
    while (*str)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1e8      	bne.n	800171e <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	781b      	ldrb	r3, [r3, #0]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	460a      	mov	r2, r1
 8001762:	71fb      	strb	r3, [r7, #7]
 8001764:	4613      	mov	r3, r2
 8001766:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	b29a      	uxth	r2, r3
 800176c:	4b05      	ldr	r3, [pc, #20]	; (8001784 <ssd1306_SetCursor+0x2c>)
 800176e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001770:	79bb      	ldrb	r3, [r7, #6]
 8001772:	b29a      	uxth	r2, r3
 8001774:	4b03      	ldr	r3, [pc, #12]	; (8001784 <ssd1306_SetCursor+0x2c>)
 8001776:	805a      	strh	r2, [r3, #2]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	20000ce0 	.word	0x20000ce0

08001788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <HAL_MspInit+0x4c>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001796:	4a0f      	ldr	r2, [pc, #60]	; (80017d4 <HAL_MspInit+0x4c>)
 8001798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800179c:	6453      	str	r3, [r2, #68]	; 0x44
 800179e:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <HAL_MspInit+0x4c>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	603b      	str	r3, [r7, #0]
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <HAL_MspInit+0x4c>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	4a08      	ldr	r2, [pc, #32]	; (80017d4 <HAL_MspInit+0x4c>)
 80017b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_MspInit+0x4c>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017c6:	2007      	movs	r0, #7
 80017c8:	f000 fafc 	bl	8001dc4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40023800 	.word	0x40023800

080017d8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a0b      	ldr	r2, [pc, #44]	; (8001814 <HAL_CRC_MspInit+0x3c>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d10d      	bne.n	8001806 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <HAL_CRC_MspInit+0x40>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a09      	ldr	r2, [pc, #36]	; (8001818 <HAL_CRC_MspInit+0x40>)
 80017f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b07      	ldr	r3, [pc, #28]	; (8001818 <HAL_CRC_MspInit+0x40>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001806:	bf00      	nop
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40023000 	.word	0x40023000
 8001818:	40023800 	.word	0x40023800

0800181c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08a      	sub	sp, #40	; 0x28
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a19      	ldr	r2, [pc, #100]	; (80018a0 <HAL_I2C_MspInit+0x84>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d12b      	bne.n	8001896 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <HAL_I2C_MspInit+0x88>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a17      	ldr	r2, [pc, #92]	; (80018a4 <HAL_I2C_MspInit+0x88>)
 8001848:	f043 0302 	orr.w	r3, r3, #2
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <HAL_I2C_MspInit+0x88>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800185a:	23c0      	movs	r3, #192	; 0xc0
 800185c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800185e:	2312      	movs	r3, #18
 8001860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001866:	2303      	movs	r3, #3
 8001868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800186a:	2304      	movs	r3, #4
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	4619      	mov	r1, r3
 8001874:	480c      	ldr	r0, [pc, #48]	; (80018a8 <HAL_I2C_MspInit+0x8c>)
 8001876:	f000 fe73 	bl	8002560 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <HAL_I2C_MspInit+0x88>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	4a08      	ldr	r2, [pc, #32]	; (80018a4 <HAL_I2C_MspInit+0x88>)
 8001884:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001888:	6413      	str	r3, [r2, #64]	; 0x40
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_I2C_MspInit+0x88>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001896:	bf00      	nop
 8001898:	3728      	adds	r7, #40	; 0x28
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40005400 	.word	0x40005400
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40020400 	.word	0x40020400

080018ac <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08e      	sub	sp, #56	; 0x38
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a4a      	ldr	r2, [pc, #296]	; (8001a00 <HAL_I2S_MspInit+0x154>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	f040 808c 	bne.w	80019f6 <HAL_I2S_MspInit+0x14a>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80018de:	2301      	movs	r3, #1
 80018e0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 384;
 80018e2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80018e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80018e8:	2302      	movs	r3, #2
 80018ea:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	4618      	mov	r0, r3
 80018f2:	f002 fe71 	bl	80045d8 <HAL_RCCEx_PeriphCLKConfig>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <HAL_I2S_MspInit+0x54>
    {
      Error_Handler();
 80018fc:	f7ff fc94 	bl	8001228 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001900:	2300      	movs	r3, #0
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	4b3f      	ldr	r3, [pc, #252]	; (8001a04 <HAL_I2S_MspInit+0x158>)
 8001906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001908:	4a3e      	ldr	r2, [pc, #248]	; (8001a04 <HAL_I2S_MspInit+0x158>)
 800190a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800190e:	6413      	str	r3, [r2, #64]	; 0x40
 8001910:	4b3c      	ldr	r3, [pc, #240]	; (8001a04 <HAL_I2S_MspInit+0x158>)
 8001912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001914:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	4b38      	ldr	r3, [pc, #224]	; (8001a04 <HAL_I2S_MspInit+0x158>)
 8001922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001924:	4a37      	ldr	r2, [pc, #220]	; (8001a04 <HAL_I2S_MspInit+0x158>)
 8001926:	f043 0304 	orr.w	r3, r3, #4
 800192a:	6313      	str	r3, [r2, #48]	; 0x30
 800192c:	4b35      	ldr	r3, [pc, #212]	; (8001a04 <HAL_I2S_MspInit+0x158>)
 800192e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001938:	2300      	movs	r3, #0
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	4b31      	ldr	r3, [pc, #196]	; (8001a04 <HAL_I2S_MspInit+0x158>)
 800193e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001940:	4a30      	ldr	r2, [pc, #192]	; (8001a04 <HAL_I2S_MspInit+0x158>)
 8001942:	f043 0302 	orr.w	r3, r3, #2
 8001946:	6313      	str	r3, [r2, #48]	; 0x30
 8001948:	4b2e      	ldr	r3, [pc, #184]	; (8001a04 <HAL_I2S_MspInit+0x158>)
 800194a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001954:	2308      	movs	r3, #8
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001960:	2300      	movs	r3, #0
 8001962:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001964:	2305      	movs	r3, #5
 8001966:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800196c:	4619      	mov	r1, r3
 800196e:	4826      	ldr	r0, [pc, #152]	; (8001a08 <HAL_I2S_MspInit+0x15c>)
 8001970:	f000 fdf6 	bl	8002560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001974:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001986:	2305      	movs	r3, #5
 8001988:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198e:	4619      	mov	r1, r3
 8001990:	481e      	ldr	r0, [pc, #120]	; (8001a0c <HAL_I2S_MspInit+0x160>)
 8001992:	f000 fde5 	bl	8002560 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001996:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <HAL_I2S_MspInit+0x164>)
 8001998:	4a1e      	ldr	r2, [pc, #120]	; (8001a14 <HAL_I2S_MspInit+0x168>)
 800199a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800199c:	4b1c      	ldr	r3, [pc, #112]	; (8001a10 <HAL_I2S_MspInit+0x164>)
 800199e:	2200      	movs	r2, #0
 80019a0:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019a2:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <HAL_I2S_MspInit+0x164>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019a8:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <HAL_I2S_MspInit+0x164>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019ae:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <HAL_I2S_MspInit+0x164>)
 80019b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019b4:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019b6:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <HAL_I2S_MspInit+0x164>)
 80019b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019bc:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019be:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <HAL_I2S_MspInit+0x164>)
 80019c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019c4:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80019c6:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_I2S_MspInit+0x164>)
 80019c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019cc:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019ce:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <HAL_I2S_MspInit+0x164>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019d4:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <HAL_I2S_MspInit+0x164>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80019da:	480d      	ldr	r0, [pc, #52]	; (8001a10 <HAL_I2S_MspInit+0x164>)
 80019dc:	f000 fa50 	bl	8001e80 <HAL_DMA_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <HAL_I2S_MspInit+0x13e>
    {
      Error_Handler();
 80019e6:	f7ff fc1f 	bl	8001228 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a08      	ldr	r2, [pc, #32]	; (8001a10 <HAL_I2S_MspInit+0x164>)
 80019ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80019f0:	4a07      	ldr	r2, [pc, #28]	; (8001a10 <HAL_I2S_MspInit+0x164>)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80019f6:	bf00      	nop
 80019f8:	3738      	adds	r7, #56	; 0x38
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40003800 	.word	0x40003800
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40020800 	.word	0x40020800
 8001a0c:	40020400 	.word	0x40020400
 8001a10:	2000053c 	.word	0x2000053c
 8001a14:	40026058 	.word	0x40026058

08001a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <NMI_Handler+0x4>

08001a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a22:	e7fe      	b.n	8001a22 <HardFault_Handler+0x4>

08001a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <MemManage_Handler+0x4>

08001a2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a2e:	e7fe      	b.n	8001a2e <BusFault_Handler+0x4>

08001a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <UsageFault_Handler+0x4>

08001a36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a64:	f000 f89a 	bl	8001b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001a70:	4802      	ldr	r0, [pc, #8]	; (8001a7c <DMA1_Stream3_IRQHandler+0x10>)
 8001a72:	f000 fb0b 	bl	800208c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	2000053c 	.word	0x2000053c

08001a80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <SystemInit+0x20>)
 8001a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a8a:	4a05      	ldr	r2, [pc, #20]	; (8001aa0 <SystemInit+0x20>)
 8001a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001aa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001adc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001aa8:	480d      	ldr	r0, [pc, #52]	; (8001ae0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001aaa:	490e      	ldr	r1, [pc, #56]	; (8001ae4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001aac:	4a0e      	ldr	r2, [pc, #56]	; (8001ae8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab0:	e002      	b.n	8001ab8 <LoopCopyDataInit>

08001ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ab6:	3304      	adds	r3, #4

08001ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001abc:	d3f9      	bcc.n	8001ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001abe:	4a0b      	ldr	r2, [pc, #44]	; (8001aec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ac0:	4c0b      	ldr	r4, [pc, #44]	; (8001af0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac4:	e001      	b.n	8001aca <LoopFillZerobss>

08001ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac8:	3204      	adds	r2, #4

08001aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001acc:	d3fb      	bcc.n	8001ac6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ace:	f7ff ffd7 	bl	8001a80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ad2:	f004 fe17 	bl	8006704 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ad6:	f7ff f8ef 	bl	8000cb8 <main>
  bx  lr    
 8001ada:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001adc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae4:	20000478 	.word	0x20000478
  ldr r2, =_sidata
 8001ae8:	08007d44 	.word	0x08007d44
  ldr r2, =_sbss
 8001aec:	20000478 	.word	0x20000478
  ldr r4, =_ebss
 8001af0:	20000d40 	.word	0x20000d40

08001af4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001af4:	e7fe      	b.n	8001af4 <ADC_IRQHandler>
	...

08001af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001afc:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <HAL_Init+0x40>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a0d      	ldr	r2, [pc, #52]	; (8001b38 <HAL_Init+0x40>)
 8001b02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_Init+0x40>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a0a      	ldr	r2, [pc, #40]	; (8001b38 <HAL_Init+0x40>)
 8001b0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <HAL_Init+0x40>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a07      	ldr	r2, [pc, #28]	; (8001b38 <HAL_Init+0x40>)
 8001b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b20:	2003      	movs	r0, #3
 8001b22:	f000 f94f 	bl	8001dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b26:	2000      	movs	r0, #0
 8001b28:	f000 f808 	bl	8001b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b2c:	f7ff fe2c 	bl	8001788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40023c00 	.word	0x40023c00

08001b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_InitTick+0x54>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_InitTick+0x58>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f000 f967 	bl	8001e2e <HAL_SYSTICK_Config>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e00e      	b.n	8001b88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b0f      	cmp	r3, #15
 8001b6e:	d80a      	bhi.n	8001b86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b70:	2200      	movs	r2, #0
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295
 8001b78:	f000 f92f 	bl	8001dda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b7c:	4a06      	ldr	r2, [pc, #24]	; (8001b98 <HAL_InitTick+0x5c>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	e000      	b.n	8001b88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000408 	.word	0x20000408
 8001b94:	20000410 	.word	0x20000410
 8001b98:	2000040c 	.word	0x2000040c

08001b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_IncTick+0x20>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_IncTick+0x24>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <HAL_IncTick+0x24>)
 8001bae:	6013      	str	r3, [r2, #0]
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	20000410 	.word	0x20000410
 8001bc0:	20000ce8 	.word	0x20000ce8

08001bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <HAL_GetTick+0x14>)
 8001bca:	681b      	ldr	r3, [r3, #0]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	20000ce8 	.word	0x20000ce8

08001bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be4:	f7ff ffee 	bl	8001bc4 <HAL_GetTick>
 8001be8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf4:	d005      	beq.n	8001c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <HAL_Delay+0x44>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4413      	add	r3, r2
 8001c00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c02:	bf00      	nop
 8001c04:	f7ff ffde 	bl	8001bc4 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d8f7      	bhi.n	8001c04 <HAL_Delay+0x28>
  {
  }
}
 8001c14:	bf00      	nop
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000410 	.word	0x20000410

08001c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <__NVIC_SetPriorityGrouping+0x44>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c40:	4013      	ands	r3, r2
 8001c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c56:	4a04      	ldr	r2, [pc, #16]	; (8001c68 <__NVIC_SetPriorityGrouping+0x44>)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	60d3      	str	r3, [r2, #12]
}
 8001c5c:	bf00      	nop
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c70:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <__NVIC_GetPriorityGrouping+0x18>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	0a1b      	lsrs	r3, r3, #8
 8001c76:	f003 0307 	and.w	r3, r3, #7
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	db0b      	blt.n	8001cb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	f003 021f 	and.w	r2, r3, #31
 8001ca0:	4907      	ldr	r1, [pc, #28]	; (8001cc0 <__NVIC_EnableIRQ+0x38>)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	095b      	lsrs	r3, r3, #5
 8001ca8:	2001      	movs	r0, #1
 8001caa:	fa00 f202 	lsl.w	r2, r0, r2
 8001cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	e000e100 	.word	0xe000e100

08001cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	6039      	str	r1, [r7, #0]
 8001cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	db0a      	blt.n	8001cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	490c      	ldr	r1, [pc, #48]	; (8001d10 <__NVIC_SetPriority+0x4c>)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	0112      	lsls	r2, r2, #4
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	440b      	add	r3, r1
 8001ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cec:	e00a      	b.n	8001d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	4908      	ldr	r1, [pc, #32]	; (8001d14 <__NVIC_SetPriority+0x50>)
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	3b04      	subs	r3, #4
 8001cfc:	0112      	lsls	r2, r2, #4
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	440b      	add	r3, r1
 8001d02:	761a      	strb	r2, [r3, #24]
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000e100 	.word	0xe000e100
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	; 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f1c3 0307 	rsb	r3, r3, #7
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	bf28      	it	cs
 8001d36:	2304      	movcs	r3, #4
 8001d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	2b06      	cmp	r3, #6
 8001d40:	d902      	bls.n	8001d48 <NVIC_EncodePriority+0x30>
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3b03      	subs	r3, #3
 8001d46:	e000      	b.n	8001d4a <NVIC_EncodePriority+0x32>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43da      	mvns	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d60:	f04f 31ff 	mov.w	r1, #4294967295
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6a:	43d9      	mvns	r1, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d70:	4313      	orrs	r3, r2
         );
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3724      	adds	r7, #36	; 0x24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
	...

08001d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d90:	d301      	bcc.n	8001d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d92:	2301      	movs	r3, #1
 8001d94:	e00f      	b.n	8001db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d96:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <SysTick_Config+0x40>)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d9e:	210f      	movs	r1, #15
 8001da0:	f04f 30ff 	mov.w	r0, #4294967295
 8001da4:	f7ff ff8e 	bl	8001cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <SysTick_Config+0x40>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dae:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <SysTick_Config+0x40>)
 8001db0:	2207      	movs	r2, #7
 8001db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	e000e010 	.word	0xe000e010

08001dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff ff29 	bl	8001c24 <__NVIC_SetPriorityGrouping>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b086      	sub	sp, #24
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	4603      	mov	r3, r0
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
 8001de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dec:	f7ff ff3e 	bl	8001c6c <__NVIC_GetPriorityGrouping>
 8001df0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	68b9      	ldr	r1, [r7, #8]
 8001df6:	6978      	ldr	r0, [r7, #20]
 8001df8:	f7ff ff8e 	bl	8001d18 <NVIC_EncodePriority>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e02:	4611      	mov	r1, r2
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff ff5d 	bl	8001cc4 <__NVIC_SetPriority>
}
 8001e0a:	bf00      	nop
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4603      	mov	r3, r0
 8001e1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff31 	bl	8001c88 <__NVIC_EnableIRQ>
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff ffa2 	bl	8001d80 <SysTick_Config>
 8001e3c:	4603      	mov	r3, r0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e00e      	b.n	8001e76 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	795b      	ldrb	r3, [r3, #5]
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d105      	bne.n	8001e6e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff fcb5 	bl	80017d8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e8c:	f7ff fe9a 	bl	8001bc4 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e099      	b.n	8001fd0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0201 	bic.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ebc:	e00f      	b.n	8001ede <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ebe:	f7ff fe81 	bl	8001bc4 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b05      	cmp	r3, #5
 8001eca:	d908      	bls.n	8001ede <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2220      	movs	r2, #32
 8001ed0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e078      	b.n	8001fd0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1e8      	bne.n	8001ebe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	4b38      	ldr	r3, [pc, #224]	; (8001fd8 <HAL_DMA_Init+0x158>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	2b04      	cmp	r3, #4
 8001f36:	d107      	bne.n	8001f48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f40:	4313      	orrs	r3, r2
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f023 0307 	bic.w	r3, r3, #7
 8001f5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d117      	bne.n	8001fa2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00e      	beq.n	8001fa2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 fa6f 	bl	8002468 <DMA_CheckFifoParam>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d008      	beq.n	8001fa2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2240      	movs	r2, #64	; 0x40
 8001f94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e016      	b.n	8001fd0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 fa26 	bl	80023fc <DMA_CalcBaseAndBitshift>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb8:	223f      	movs	r2, #63	; 0x3f
 8001fba:	409a      	lsls	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	f010803f 	.word	0xf010803f

08001fdc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d101      	bne.n	8002002 <HAL_DMA_Start_IT+0x26>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e040      	b.n	8002084 <HAL_DMA_Start_IT+0xa8>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b01      	cmp	r3, #1
 8002014:	d12f      	bne.n	8002076 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2202      	movs	r2, #2
 800201a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	68b9      	ldr	r1, [r7, #8]
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f000 f9b8 	bl	80023a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002034:	223f      	movs	r2, #63	; 0x3f
 8002036:	409a      	lsls	r2, r3
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 0216 	orr.w	r2, r2, #22
 800204a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002050:	2b00      	cmp	r3, #0
 8002052:	d007      	beq.n	8002064 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 0208 	orr.w	r2, r2, #8
 8002062:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 0201 	orr.w	r2, r2, #1
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	e005      	b.n	8002082 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800207e:	2302      	movs	r3, #2
 8002080:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002082:	7dfb      	ldrb	r3, [r7, #23]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002094:	2300      	movs	r3, #0
 8002096:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002098:	4b8e      	ldr	r3, [pc, #568]	; (80022d4 <HAL_DMA_IRQHandler+0x248>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a8e      	ldr	r2, [pc, #568]	; (80022d8 <HAL_DMA_IRQHandler+0x24c>)
 800209e:	fba2 2303 	umull	r2, r3, r2, r3
 80020a2:	0a9b      	lsrs	r3, r3, #10
 80020a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b6:	2208      	movs	r2, #8
 80020b8:	409a      	lsls	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	4013      	ands	r3, r2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d01a      	beq.n	80020f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d013      	beq.n	80020f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0204 	bic.w	r2, r2, #4
 80020de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e4:	2208      	movs	r2, #8
 80020e6:	409a      	lsls	r2, r3
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f0:	f043 0201 	orr.w	r2, r3, #1
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fc:	2201      	movs	r2, #1
 80020fe:	409a      	lsls	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4013      	ands	r3, r2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d012      	beq.n	800212e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00b      	beq.n	800212e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211a:	2201      	movs	r2, #1
 800211c:	409a      	lsls	r2, r3
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002126:	f043 0202 	orr.w	r2, r3, #2
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002132:	2204      	movs	r2, #4
 8002134:	409a      	lsls	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4013      	ands	r3, r2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d012      	beq.n	8002164 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00b      	beq.n	8002164 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002150:	2204      	movs	r2, #4
 8002152:	409a      	lsls	r2, r3
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800215c:	f043 0204 	orr.w	r2, r3, #4
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002168:	2210      	movs	r2, #16
 800216a:	409a      	lsls	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4013      	ands	r3, r2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d043      	beq.n	80021fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	2b00      	cmp	r3, #0
 8002180:	d03c      	beq.n	80021fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002186:	2210      	movs	r2, #16
 8002188:	409a      	lsls	r2, r3
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d018      	beq.n	80021ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d108      	bne.n	80021bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d024      	beq.n	80021fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	4798      	blx	r3
 80021ba:	e01f      	b.n	80021fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d01b      	beq.n	80021fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	4798      	blx	r3
 80021cc:	e016      	b.n	80021fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d107      	bne.n	80021ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0208 	bic.w	r2, r2, #8
 80021ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002200:	2220      	movs	r2, #32
 8002202:	409a      	lsls	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4013      	ands	r3, r2
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 808f 	beq.w	800232c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0310 	and.w	r3, r3, #16
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 8087 	beq.w	800232c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002222:	2220      	movs	r2, #32
 8002224:	409a      	lsls	r2, r3
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b05      	cmp	r3, #5
 8002234:	d136      	bne.n	80022a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 0216 	bic.w	r2, r2, #22
 8002244:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	695a      	ldr	r2, [r3, #20]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002254:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	2b00      	cmp	r3, #0
 800225c:	d103      	bne.n	8002266 <HAL_DMA_IRQHandler+0x1da>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002262:	2b00      	cmp	r3, #0
 8002264:	d007      	beq.n	8002276 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0208 	bic.w	r2, r2, #8
 8002274:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227a:	223f      	movs	r2, #63	; 0x3f
 800227c:	409a      	lsls	r2, r3
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002296:	2b00      	cmp	r3, #0
 8002298:	d07e      	beq.n	8002398 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	4798      	blx	r3
        }
        return;
 80022a2:	e079      	b.n	8002398 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d01d      	beq.n	80022ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d10d      	bne.n	80022dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d031      	beq.n	800232c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	4798      	blx	r3
 80022d0:	e02c      	b.n	800232c <HAL_DMA_IRQHandler+0x2a0>
 80022d2:	bf00      	nop
 80022d4:	20000408 	.word	0x20000408
 80022d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d023      	beq.n	800232c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	4798      	blx	r3
 80022ec:	e01e      	b.n	800232c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10f      	bne.n	800231c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 0210 	bic.w	r2, r2, #16
 800230a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002330:	2b00      	cmp	r3, #0
 8002332:	d032      	beq.n	800239a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	d022      	beq.n	8002386 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2205      	movs	r2, #5
 8002344:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 0201 	bic.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	3301      	adds	r3, #1
 800235c:	60bb      	str	r3, [r7, #8]
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	429a      	cmp	r2, r3
 8002362:	d307      	bcc.n	8002374 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f2      	bne.n	8002358 <HAL_DMA_IRQHandler+0x2cc>
 8002372:	e000      	b.n	8002376 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002374:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238a:	2b00      	cmp	r3, #0
 800238c:	d005      	beq.n	800239a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	4798      	blx	r3
 8002396:	e000      	b.n	800239a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002398:	bf00      	nop
    }
  }
}
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
 80023ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b40      	cmp	r3, #64	; 0x40
 80023cc:	d108      	bne.n	80023e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023de:	e007      	b.n	80023f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	60da      	str	r2, [r3, #12]
}
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	b2db      	uxtb	r3, r3
 800240a:	3b10      	subs	r3, #16
 800240c:	4a14      	ldr	r2, [pc, #80]	; (8002460 <DMA_CalcBaseAndBitshift+0x64>)
 800240e:	fba2 2303 	umull	r2, r3, r2, r3
 8002412:	091b      	lsrs	r3, r3, #4
 8002414:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002416:	4a13      	ldr	r2, [pc, #76]	; (8002464 <DMA_CalcBaseAndBitshift+0x68>)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4413      	add	r3, r2
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	461a      	mov	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2b03      	cmp	r3, #3
 8002428:	d909      	bls.n	800243e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002432:	f023 0303 	bic.w	r3, r3, #3
 8002436:	1d1a      	adds	r2, r3, #4
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	659a      	str	r2, [r3, #88]	; 0x58
 800243c:	e007      	b.n	800244e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002446:	f023 0303 	bic.w	r3, r3, #3
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002452:	4618      	mov	r0, r3
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	aaaaaaab 	.word	0xaaaaaaab
 8002464:	08007d14 	.word	0x08007d14

08002468 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002470:	2300      	movs	r3, #0
 8002472:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d11f      	bne.n	80024c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	2b03      	cmp	r3, #3
 8002486:	d856      	bhi.n	8002536 <DMA_CheckFifoParam+0xce>
 8002488:	a201      	add	r2, pc, #4	; (adr r2, 8002490 <DMA_CheckFifoParam+0x28>)
 800248a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800248e:	bf00      	nop
 8002490:	080024a1 	.word	0x080024a1
 8002494:	080024b3 	.word	0x080024b3
 8002498:	080024a1 	.word	0x080024a1
 800249c:	08002537 	.word	0x08002537
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d046      	beq.n	800253a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024b0:	e043      	b.n	800253a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024ba:	d140      	bne.n	800253e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024c0:	e03d      	b.n	800253e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ca:	d121      	bne.n	8002510 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	d837      	bhi.n	8002542 <DMA_CheckFifoParam+0xda>
 80024d2:	a201      	add	r2, pc, #4	; (adr r2, 80024d8 <DMA_CheckFifoParam+0x70>)
 80024d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d8:	080024e9 	.word	0x080024e9
 80024dc:	080024ef 	.word	0x080024ef
 80024e0:	080024e9 	.word	0x080024e9
 80024e4:	08002501 	.word	0x08002501
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
      break;
 80024ec:	e030      	b.n	8002550 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d025      	beq.n	8002546 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024fe:	e022      	b.n	8002546 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002504:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002508:	d11f      	bne.n	800254a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800250e:	e01c      	b.n	800254a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d903      	bls.n	800251e <DMA_CheckFifoParam+0xb6>
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b03      	cmp	r3, #3
 800251a:	d003      	beq.n	8002524 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800251c:	e018      	b.n	8002550 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	73fb      	strb	r3, [r7, #15]
      break;
 8002522:	e015      	b.n	8002550 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002528:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00e      	beq.n	800254e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	73fb      	strb	r3, [r7, #15]
      break;
 8002534:	e00b      	b.n	800254e <DMA_CheckFifoParam+0xe6>
      break;
 8002536:	bf00      	nop
 8002538:	e00a      	b.n	8002550 <DMA_CheckFifoParam+0xe8>
      break;
 800253a:	bf00      	nop
 800253c:	e008      	b.n	8002550 <DMA_CheckFifoParam+0xe8>
      break;
 800253e:	bf00      	nop
 8002540:	e006      	b.n	8002550 <DMA_CheckFifoParam+0xe8>
      break;
 8002542:	bf00      	nop
 8002544:	e004      	b.n	8002550 <DMA_CheckFifoParam+0xe8>
      break;
 8002546:	bf00      	nop
 8002548:	e002      	b.n	8002550 <DMA_CheckFifoParam+0xe8>
      break;   
 800254a:	bf00      	nop
 800254c:	e000      	b.n	8002550 <DMA_CheckFifoParam+0xe8>
      break;
 800254e:	bf00      	nop
    }
  } 
  
  return status; 
 8002550:	7bfb      	ldrb	r3, [r7, #15]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3714      	adds	r7, #20
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop

08002560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002560:	b480      	push	{r7}
 8002562:	b089      	sub	sp, #36	; 0x24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800256a:	2300      	movs	r3, #0
 800256c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800256e:	2300      	movs	r3, #0
 8002570:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002572:	2300      	movs	r3, #0
 8002574:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
 800257a:	e16b      	b.n	8002854 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800257c:	2201      	movs	r2, #1
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	4013      	ands	r3, r2
 800258e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	429a      	cmp	r2, r3
 8002596:	f040 815a 	bne.w	800284e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d005      	beq.n	80025b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d130      	bne.n	8002614 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	2203      	movs	r2, #3
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4013      	ands	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025e8:	2201      	movs	r2, #1
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	091b      	lsrs	r3, r3, #4
 80025fe:	f003 0201 	and.w	r2, r3, #1
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 0303 	and.w	r3, r3, #3
 800261c:	2b03      	cmp	r3, #3
 800261e:	d017      	beq.n	8002650 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	2203      	movs	r2, #3
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4313      	orrs	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d123      	bne.n	80026a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	08da      	lsrs	r2, r3, #3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3208      	adds	r2, #8
 8002664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002668:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	220f      	movs	r2, #15
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43db      	mvns	r3, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4013      	ands	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	691a      	ldr	r2, [r3, #16]
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4313      	orrs	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	08da      	lsrs	r2, r3, #3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3208      	adds	r2, #8
 800269e:	69b9      	ldr	r1, [r7, #24]
 80026a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	2203      	movs	r2, #3
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 0203 	and.w	r2, r3, #3
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 80b4 	beq.w	800284e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	4b60      	ldr	r3, [pc, #384]	; (800286c <HAL_GPIO_Init+0x30c>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	4a5f      	ldr	r2, [pc, #380]	; (800286c <HAL_GPIO_Init+0x30c>)
 80026f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026f4:	6453      	str	r3, [r2, #68]	; 0x44
 80026f6:	4b5d      	ldr	r3, [pc, #372]	; (800286c <HAL_GPIO_Init+0x30c>)
 80026f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002702:	4a5b      	ldr	r2, [pc, #364]	; (8002870 <HAL_GPIO_Init+0x310>)
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	089b      	lsrs	r3, r3, #2
 8002708:	3302      	adds	r3, #2
 800270a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800270e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	220f      	movs	r2, #15
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43db      	mvns	r3, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4013      	ands	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a52      	ldr	r2, [pc, #328]	; (8002874 <HAL_GPIO_Init+0x314>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d02b      	beq.n	8002786 <HAL_GPIO_Init+0x226>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a51      	ldr	r2, [pc, #324]	; (8002878 <HAL_GPIO_Init+0x318>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d025      	beq.n	8002782 <HAL_GPIO_Init+0x222>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a50      	ldr	r2, [pc, #320]	; (800287c <HAL_GPIO_Init+0x31c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d01f      	beq.n	800277e <HAL_GPIO_Init+0x21e>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a4f      	ldr	r2, [pc, #316]	; (8002880 <HAL_GPIO_Init+0x320>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d019      	beq.n	800277a <HAL_GPIO_Init+0x21a>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a4e      	ldr	r2, [pc, #312]	; (8002884 <HAL_GPIO_Init+0x324>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d013      	beq.n	8002776 <HAL_GPIO_Init+0x216>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a4d      	ldr	r2, [pc, #308]	; (8002888 <HAL_GPIO_Init+0x328>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d00d      	beq.n	8002772 <HAL_GPIO_Init+0x212>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a4c      	ldr	r2, [pc, #304]	; (800288c <HAL_GPIO_Init+0x32c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d007      	beq.n	800276e <HAL_GPIO_Init+0x20e>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a4b      	ldr	r2, [pc, #300]	; (8002890 <HAL_GPIO_Init+0x330>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d101      	bne.n	800276a <HAL_GPIO_Init+0x20a>
 8002766:	2307      	movs	r3, #7
 8002768:	e00e      	b.n	8002788 <HAL_GPIO_Init+0x228>
 800276a:	2308      	movs	r3, #8
 800276c:	e00c      	b.n	8002788 <HAL_GPIO_Init+0x228>
 800276e:	2306      	movs	r3, #6
 8002770:	e00a      	b.n	8002788 <HAL_GPIO_Init+0x228>
 8002772:	2305      	movs	r3, #5
 8002774:	e008      	b.n	8002788 <HAL_GPIO_Init+0x228>
 8002776:	2304      	movs	r3, #4
 8002778:	e006      	b.n	8002788 <HAL_GPIO_Init+0x228>
 800277a:	2303      	movs	r3, #3
 800277c:	e004      	b.n	8002788 <HAL_GPIO_Init+0x228>
 800277e:	2302      	movs	r3, #2
 8002780:	e002      	b.n	8002788 <HAL_GPIO_Init+0x228>
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <HAL_GPIO_Init+0x228>
 8002786:	2300      	movs	r3, #0
 8002788:	69fa      	ldr	r2, [r7, #28]
 800278a:	f002 0203 	and.w	r2, r2, #3
 800278e:	0092      	lsls	r2, r2, #2
 8002790:	4093      	lsls	r3, r2
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002798:	4935      	ldr	r1, [pc, #212]	; (8002870 <HAL_GPIO_Init+0x310>)
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	089b      	lsrs	r3, r3, #2
 800279e:	3302      	adds	r3, #2
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027a6:	4b3b      	ldr	r3, [pc, #236]	; (8002894 <HAL_GPIO_Init+0x334>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	43db      	mvns	r3, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4013      	ands	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027ca:	4a32      	ldr	r2, [pc, #200]	; (8002894 <HAL_GPIO_Init+0x334>)
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027d0:	4b30      	ldr	r3, [pc, #192]	; (8002894 <HAL_GPIO_Init+0x334>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027f4:	4a27      	ldr	r2, [pc, #156]	; (8002894 <HAL_GPIO_Init+0x334>)
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027fa:	4b26      	ldr	r3, [pc, #152]	; (8002894 <HAL_GPIO_Init+0x334>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	43db      	mvns	r3, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4013      	ands	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800281e:	4a1d      	ldr	r2, [pc, #116]	; (8002894 <HAL_GPIO_Init+0x334>)
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002824:	4b1b      	ldr	r3, [pc, #108]	; (8002894 <HAL_GPIO_Init+0x334>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	43db      	mvns	r3, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4013      	ands	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4313      	orrs	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002848:	4a12      	ldr	r2, [pc, #72]	; (8002894 <HAL_GPIO_Init+0x334>)
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	3301      	adds	r3, #1
 8002852:	61fb      	str	r3, [r7, #28]
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	2b0f      	cmp	r3, #15
 8002858:	f67f ae90 	bls.w	800257c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800285c:	bf00      	nop
 800285e:	bf00      	nop
 8002860:	3724      	adds	r7, #36	; 0x24
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	40023800 	.word	0x40023800
 8002870:	40013800 	.word	0x40013800
 8002874:	40020000 	.word	0x40020000
 8002878:	40020400 	.word	0x40020400
 800287c:	40020800 	.word	0x40020800
 8002880:	40020c00 	.word	0x40020c00
 8002884:	40021000 	.word	0x40021000
 8002888:	40021400 	.word	0x40021400
 800288c:	40021800 	.word	0x40021800
 8002890:	40021c00 	.word	0x40021c00
 8002894:	40013c00 	.word	0x40013c00

08002898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	460b      	mov	r3, r1
 80028a2:	807b      	strh	r3, [r7, #2]
 80028a4:	4613      	mov	r3, r2
 80028a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028a8:	787b      	ldrb	r3, [r7, #1]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ae:	887a      	ldrh	r2, [r7, #2]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028b4:	e003      	b.n	80028be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028b6:	887b      	ldrh	r3, [r7, #2]
 80028b8:	041a      	lsls	r2, r3, #16
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	619a      	str	r2, [r3, #24]
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
	...

080028cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e12b      	b.n	8002b36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d106      	bne.n	80028f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7fe ff92 	bl	800181c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2224      	movs	r2, #36	; 0x24
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 0201 	bic.w	r2, r2, #1
 800290e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800291e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800292e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002930:	f001 fe3e 	bl	80045b0 <HAL_RCC_GetPCLK1Freq>
 8002934:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	4a81      	ldr	r2, [pc, #516]	; (8002b40 <HAL_I2C_Init+0x274>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d807      	bhi.n	8002950 <HAL_I2C_Init+0x84>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4a80      	ldr	r2, [pc, #512]	; (8002b44 <HAL_I2C_Init+0x278>)
 8002944:	4293      	cmp	r3, r2
 8002946:	bf94      	ite	ls
 8002948:	2301      	movls	r3, #1
 800294a:	2300      	movhi	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	e006      	b.n	800295e <HAL_I2C_Init+0x92>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4a7d      	ldr	r2, [pc, #500]	; (8002b48 <HAL_I2C_Init+0x27c>)
 8002954:	4293      	cmp	r3, r2
 8002956:	bf94      	ite	ls
 8002958:	2301      	movls	r3, #1
 800295a:	2300      	movhi	r3, #0
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e0e7      	b.n	8002b36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	4a78      	ldr	r2, [pc, #480]	; (8002b4c <HAL_I2C_Init+0x280>)
 800296a:	fba2 2303 	umull	r2, r3, r2, r3
 800296e:	0c9b      	lsrs	r3, r3, #18
 8002970:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	430a      	orrs	r2, r1
 8002984:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	4a6a      	ldr	r2, [pc, #424]	; (8002b40 <HAL_I2C_Init+0x274>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d802      	bhi.n	80029a0 <HAL_I2C_Init+0xd4>
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	3301      	adds	r3, #1
 800299e:	e009      	b.n	80029b4 <HAL_I2C_Init+0xe8>
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029a6:	fb02 f303 	mul.w	r3, r2, r3
 80029aa:	4a69      	ldr	r2, [pc, #420]	; (8002b50 <HAL_I2C_Init+0x284>)
 80029ac:	fba2 2303 	umull	r2, r3, r2, r3
 80029b0:	099b      	lsrs	r3, r3, #6
 80029b2:	3301      	adds	r3, #1
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6812      	ldr	r2, [r2, #0]
 80029b8:	430b      	orrs	r3, r1
 80029ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	495c      	ldr	r1, [pc, #368]	; (8002b40 <HAL_I2C_Init+0x274>)
 80029d0:	428b      	cmp	r3, r1
 80029d2:	d819      	bhi.n	8002a08 <HAL_I2C_Init+0x13c>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	1e59      	subs	r1, r3, #1
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	fbb1 f3f3 	udiv	r3, r1, r3
 80029e2:	1c59      	adds	r1, r3, #1
 80029e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029e8:	400b      	ands	r3, r1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00a      	beq.n	8002a04 <HAL_I2C_Init+0x138>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	1e59      	subs	r1, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80029fc:	3301      	adds	r3, #1
 80029fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a02:	e051      	b.n	8002aa8 <HAL_I2C_Init+0x1dc>
 8002a04:	2304      	movs	r3, #4
 8002a06:	e04f      	b.n	8002aa8 <HAL_I2C_Init+0x1dc>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d111      	bne.n	8002a34 <HAL_I2C_Init+0x168>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	1e58      	subs	r0, r3, #1
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6859      	ldr	r1, [r3, #4]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	440b      	add	r3, r1
 8002a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a22:	3301      	adds	r3, #1
 8002a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	bf0c      	ite	eq
 8002a2c:	2301      	moveq	r3, #1
 8002a2e:	2300      	movne	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	e012      	b.n	8002a5a <HAL_I2C_Init+0x18e>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	1e58      	subs	r0, r3, #1
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6859      	ldr	r1, [r3, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	0099      	lsls	r1, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	bf0c      	ite	eq
 8002a54:	2301      	moveq	r3, #1
 8002a56:	2300      	movne	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_I2C_Init+0x196>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e022      	b.n	8002aa8 <HAL_I2C_Init+0x1dc>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10e      	bne.n	8002a88 <HAL_I2C_Init+0x1bc>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	1e58      	subs	r0, r3, #1
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6859      	ldr	r1, [r3, #4]
 8002a72:	460b      	mov	r3, r1
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	440b      	add	r3, r1
 8002a78:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a86:	e00f      	b.n	8002aa8 <HAL_I2C_Init+0x1dc>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	1e58      	subs	r0, r3, #1
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6859      	ldr	r1, [r3, #4]
 8002a90:	460b      	mov	r3, r1
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	0099      	lsls	r1, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	6809      	ldr	r1, [r1, #0]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69da      	ldr	r2, [r3, #28]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ad6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6911      	ldr	r1, [r2, #16]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	68d2      	ldr	r2, [r2, #12]
 8002ae2:	4311      	orrs	r1, r2
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	430b      	orrs	r3, r1
 8002aea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	695a      	ldr	r2, [r3, #20]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0201 	orr.w	r2, r2, #1
 8002b16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2220      	movs	r2, #32
 8002b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	000186a0 	.word	0x000186a0
 8002b44:	001e847f 	.word	0x001e847f
 8002b48:	003d08ff 	.word	0x003d08ff
 8002b4c:	431bde83 	.word	0x431bde83
 8002b50:	10624dd3 	.word	0x10624dd3

08002b54 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af02      	add	r7, sp, #8
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	4608      	mov	r0, r1
 8002b5e:	4611      	mov	r1, r2
 8002b60:	461a      	mov	r2, r3
 8002b62:	4603      	mov	r3, r0
 8002b64:	817b      	strh	r3, [r7, #10]
 8002b66:	460b      	mov	r3, r1
 8002b68:	813b      	strh	r3, [r7, #8]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b6e:	f7ff f829 	bl	8001bc4 <HAL_GetTick>
 8002b72:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b20      	cmp	r3, #32
 8002b7e:	f040 80d9 	bne.w	8002d34 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	2319      	movs	r3, #25
 8002b88:	2201      	movs	r2, #1
 8002b8a:	496d      	ldr	r1, [pc, #436]	; (8002d40 <HAL_I2C_Mem_Write+0x1ec>)
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 f971 	bl	8002e74 <I2C_WaitOnFlagUntilTimeout>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	e0cc      	b.n	8002d36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d101      	bne.n	8002baa <HAL_I2C_Mem_Write+0x56>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e0c5      	b.n	8002d36 <HAL_I2C_Mem_Write+0x1e2>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d007      	beq.n	8002bd0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0201 	orr.w	r2, r2, #1
 8002bce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2221      	movs	r2, #33	; 0x21
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2240      	movs	r2, #64	; 0x40
 8002bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6a3a      	ldr	r2, [r7, #32]
 8002bfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4a4d      	ldr	r2, [pc, #308]	; (8002d44 <HAL_I2C_Mem_Write+0x1f0>)
 8002c10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c12:	88f8      	ldrh	r0, [r7, #6]
 8002c14:	893a      	ldrh	r2, [r7, #8]
 8002c16:	8979      	ldrh	r1, [r7, #10]
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	9301      	str	r3, [sp, #4]
 8002c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	4603      	mov	r3, r0
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f890 	bl	8002d48 <I2C_RequestMemoryWrite>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d052      	beq.n	8002cd4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e081      	b.n	8002d36 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 f9f2 	bl	8003020 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00d      	beq.n	8002c5e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d107      	bne.n	8002c5a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e06b      	b.n	8002d36 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	781a      	ldrb	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	1c5a      	adds	r2, r3, #1
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	3b01      	subs	r3, #1
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b04      	cmp	r3, #4
 8002c9a:	d11b      	bne.n	8002cd4 <HAL_I2C_Mem_Write+0x180>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d017      	beq.n	8002cd4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	781a      	ldrb	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	1c5a      	adds	r2, r3, #1
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1aa      	bne.n	8002c32 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 f9de 	bl	80030a2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00d      	beq.n	8002d08 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d107      	bne.n	8002d04 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d02:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e016      	b.n	8002d36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	e000      	b.n	8002d36 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d34:	2302      	movs	r3, #2
  }
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	00100002 	.word	0x00100002
 8002d44:	ffff0000 	.word	0xffff0000

08002d48 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b088      	sub	sp, #32
 8002d4c:	af02      	add	r7, sp, #8
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	4608      	mov	r0, r1
 8002d52:	4611      	mov	r1, r2
 8002d54:	461a      	mov	r2, r3
 8002d56:	4603      	mov	r3, r0
 8002d58:	817b      	strh	r3, [r7, #10]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	813b      	strh	r3, [r7, #8]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d70:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 f878 	bl	8002e74 <I2C_WaitOnFlagUntilTimeout>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00d      	beq.n	8002da6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d98:	d103      	bne.n	8002da2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002da0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e05f      	b.n	8002e66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002da6:	897b      	ldrh	r3, [r7, #10]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	461a      	mov	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002db4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	6a3a      	ldr	r2, [r7, #32]
 8002dba:	492d      	ldr	r1, [pc, #180]	; (8002e70 <I2C_RequestMemoryWrite+0x128>)
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 f8b0 	bl	8002f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e04c      	b.n	8002e66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de4:	6a39      	ldr	r1, [r7, #32]
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 f91a 	bl	8003020 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00d      	beq.n	8002e0e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d107      	bne.n	8002e0a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e08:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e02b      	b.n	8002e66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e0e:	88fb      	ldrh	r3, [r7, #6]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d105      	bne.n	8002e20 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e14:	893b      	ldrh	r3, [r7, #8]
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	611a      	str	r2, [r3, #16]
 8002e1e:	e021      	b.n	8002e64 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e20:	893b      	ldrh	r3, [r7, #8]
 8002e22:	0a1b      	lsrs	r3, r3, #8
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e30:	6a39      	ldr	r1, [r7, #32]
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 f8f4 	bl	8003020 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00d      	beq.n	8002e5a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d107      	bne.n	8002e56 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e54:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e005      	b.n	8002e66 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e5a:	893b      	ldrh	r3, [r7, #8]
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3718      	adds	r7, #24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	00010002 	.word	0x00010002

08002e74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	603b      	str	r3, [r7, #0]
 8002e80:	4613      	mov	r3, r2
 8002e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e84:	e025      	b.n	8002ed2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8c:	d021      	beq.n	8002ed2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e8e:	f7fe fe99 	bl	8001bc4 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d302      	bcc.n	8002ea4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d116      	bne.n	8002ed2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2220      	movs	r2, #32
 8002eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	f043 0220 	orr.w	r2, r3, #32
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e023      	b.n	8002f1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	0c1b      	lsrs	r3, r3, #16
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d10d      	bne.n	8002ef8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	43da      	mvns	r2, r3
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	bf0c      	ite	eq
 8002eee:	2301      	moveq	r3, #1
 8002ef0:	2300      	movne	r3, #0
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	e00c      	b.n	8002f12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	43da      	mvns	r2, r3
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	4013      	ands	r3, r2
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	bf0c      	ite	eq
 8002f0a:	2301      	moveq	r3, #1
 8002f0c:	2300      	movne	r3, #0
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	461a      	mov	r2, r3
 8002f12:	79fb      	ldrb	r3, [r7, #7]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d0b6      	beq.n	8002e86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b084      	sub	sp, #16
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	60f8      	str	r0, [r7, #12]
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	607a      	str	r2, [r7, #4]
 8002f2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f30:	e051      	b.n	8002fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f40:	d123      	bne.n	8002f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2220      	movs	r2, #32
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	f043 0204 	orr.w	r2, r3, #4
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e046      	b.n	8003018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f90:	d021      	beq.n	8002fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f92:	f7fe fe17 	bl	8001bc4 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d302      	bcc.n	8002fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d116      	bne.n	8002fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	f043 0220 	orr.w	r2, r3, #32
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e020      	b.n	8003018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	0c1b      	lsrs	r3, r3, #16
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d10c      	bne.n	8002ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	43da      	mvns	r2, r3
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	4013      	ands	r3, r2
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	bf14      	ite	ne
 8002ff2:	2301      	movne	r3, #1
 8002ff4:	2300      	moveq	r3, #0
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	e00b      	b.n	8003012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	43da      	mvns	r2, r3
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	4013      	ands	r3, r2
 8003006:	b29b      	uxth	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	bf14      	ite	ne
 800300c:	2301      	movne	r3, #1
 800300e:	2300      	moveq	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d18d      	bne.n	8002f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800302c:	e02d      	b.n	800308a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 f878 	bl	8003124 <I2C_IsAcknowledgeFailed>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e02d      	b.n	800309a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003044:	d021      	beq.n	800308a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003046:	f7fe fdbd 	bl	8001bc4 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	429a      	cmp	r2, r3
 8003054:	d302      	bcc.n	800305c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d116      	bne.n	800308a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2220      	movs	r2, #32
 8003066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f043 0220 	orr.w	r2, r3, #32
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e007      	b.n	800309a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003094:	2b80      	cmp	r3, #128	; 0x80
 8003096:	d1ca      	bne.n	800302e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b084      	sub	sp, #16
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	60f8      	str	r0, [r7, #12]
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030ae:	e02d      	b.n	800310c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 f837 	bl	8003124 <I2C_IsAcknowledgeFailed>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e02d      	b.n	800311c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c6:	d021      	beq.n	800310c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c8:	f7fe fd7c 	bl	8001bc4 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d302      	bcc.n	80030de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d116      	bne.n	800310c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	f043 0220 	orr.w	r2, r3, #32
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e007      	b.n	800311c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	f003 0304 	and.w	r3, r3, #4
 8003116:	2b04      	cmp	r3, #4
 8003118:	d1ca      	bne.n	80030b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800313a:	d11b      	bne.n	8003174 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003144:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	f043 0204 	orr.w	r2, r3, #4
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e000      	b.n	8003176 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
	...

08003184 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b088      	sub	sp, #32
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e128      	b.n	80033e8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d109      	bne.n	80031b6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a90      	ldr	r2, [pc, #576]	; (80033f0 <HAL_I2S_Init+0x26c>)
 80031ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7fe fb7b 	bl	80018ac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2202      	movs	r2, #2
 80031ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69db      	ldr	r3, [r3, #28]
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6812      	ldr	r2, [r2, #0]
 80031c8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031cc:	f023 030f 	bic.w	r3, r3, #15
 80031d0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2202      	movs	r2, #2
 80031d8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d060      	beq.n	80032a4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d102      	bne.n	80031f0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80031ea:	2310      	movs	r3, #16
 80031ec:	617b      	str	r3, [r7, #20]
 80031ee:	e001      	b.n	80031f4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80031f0:	2320      	movs	r3, #32
 80031f2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	2b20      	cmp	r3, #32
 80031fa:	d802      	bhi.n	8003202 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003202:	2001      	movs	r0, #1
 8003204:	f001 faca 	bl	800479c <HAL_RCCEx_GetPeriphCLKFreq>
 8003208:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003212:	d125      	bne.n	8003260 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d010      	beq.n	800323e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	fbb2 f2f3 	udiv	r2, r2, r3
 8003226:	4613      	mov	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	461a      	mov	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	fbb2 f3f3 	udiv	r3, r2, r3
 8003238:	3305      	adds	r3, #5
 800323a:	613b      	str	r3, [r7, #16]
 800323c:	e01f      	b.n	800327e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	fbb2 f2f3 	udiv	r2, r2, r3
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	461a      	mov	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	fbb2 f3f3 	udiv	r3, r2, r3
 800325a:	3305      	adds	r3, #5
 800325c:	613b      	str	r3, [r7, #16]
 800325e:	e00e      	b.n	800327e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	fbb2 f2f3 	udiv	r2, r2, r3
 8003268:	4613      	mov	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	461a      	mov	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	fbb2 f3f3 	udiv	r3, r2, r3
 800327a:	3305      	adds	r3, #5
 800327c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	4a5c      	ldr	r2, [pc, #368]	; (80033f4 <HAL_I2S_Init+0x270>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	08db      	lsrs	r3, r3, #3
 8003288:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	085b      	lsrs	r3, r3, #1
 800329a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	021b      	lsls	r3, r3, #8
 80032a0:	61bb      	str	r3, [r7, #24]
 80032a2:	e003      	b.n	80032ac <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80032a4:	2302      	movs	r3, #2
 80032a6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d902      	bls.n	80032b8 <HAL_I2S_Init+0x134>
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	2bff      	cmp	r3, #255	; 0xff
 80032b6:	d907      	bls.n	80032c8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032bc:	f043 0210 	orr.w	r2, r3, #16
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e08f      	b.n	80033e8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	691a      	ldr	r2, [r3, #16]
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	ea42 0103 	orr.w	r1, r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	69fa      	ldr	r2, [r7, #28]
 80032d8:	430a      	orrs	r2, r1
 80032da:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032e6:	f023 030f 	bic.w	r3, r3, #15
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6851      	ldr	r1, [r2, #4]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6892      	ldr	r2, [r2, #8]
 80032f2:	4311      	orrs	r1, r2
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	68d2      	ldr	r2, [r2, #12]
 80032f8:	4311      	orrs	r1, r2
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6992      	ldr	r2, [r2, #24]
 80032fe:	430a      	orrs	r2, r1
 8003300:	431a      	orrs	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800330a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d161      	bne.n	80033d8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a38      	ldr	r2, [pc, #224]	; (80033f8 <HAL_I2S_Init+0x274>)
 8003318:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a37      	ldr	r2, [pc, #220]	; (80033fc <HAL_I2S_Init+0x278>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d101      	bne.n	8003328 <HAL_I2S_Init+0x1a4>
 8003324:	4b36      	ldr	r3, [pc, #216]	; (8003400 <HAL_I2S_Init+0x27c>)
 8003326:	e001      	b.n	800332c <HAL_I2S_Init+0x1a8>
 8003328:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6812      	ldr	r2, [r2, #0]
 8003332:	4932      	ldr	r1, [pc, #200]	; (80033fc <HAL_I2S_Init+0x278>)
 8003334:	428a      	cmp	r2, r1
 8003336:	d101      	bne.n	800333c <HAL_I2S_Init+0x1b8>
 8003338:	4a31      	ldr	r2, [pc, #196]	; (8003400 <HAL_I2S_Init+0x27c>)
 800333a:	e001      	b.n	8003340 <HAL_I2S_Init+0x1bc>
 800333c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003340:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003344:	f023 030f 	bic.w	r3, r3, #15
 8003348:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a2b      	ldr	r2, [pc, #172]	; (80033fc <HAL_I2S_Init+0x278>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d101      	bne.n	8003358 <HAL_I2S_Init+0x1d4>
 8003354:	4b2a      	ldr	r3, [pc, #168]	; (8003400 <HAL_I2S_Init+0x27c>)
 8003356:	e001      	b.n	800335c <HAL_I2S_Init+0x1d8>
 8003358:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800335c:	2202      	movs	r2, #2
 800335e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a25      	ldr	r2, [pc, #148]	; (80033fc <HAL_I2S_Init+0x278>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d101      	bne.n	800336e <HAL_I2S_Init+0x1ea>
 800336a:	4b25      	ldr	r3, [pc, #148]	; (8003400 <HAL_I2S_Init+0x27c>)
 800336c:	e001      	b.n	8003372 <HAL_I2S_Init+0x1ee>
 800336e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800337e:	d003      	beq.n	8003388 <HAL_I2S_Init+0x204>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d103      	bne.n	8003390 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003388:	f44f 7380 	mov.w	r3, #256	; 0x100
 800338c:	613b      	str	r3, [r7, #16]
 800338e:	e001      	b.n	8003394 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003390:	2300      	movs	r3, #0
 8003392:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800339e:	4313      	orrs	r3, r2
 80033a0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033a8:	4313      	orrs	r3, r2
 80033aa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033b2:	4313      	orrs	r3, r2
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	897b      	ldrh	r3, [r7, #10]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033c0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a0d      	ldr	r2, [pc, #52]	; (80033fc <HAL_I2S_Init+0x278>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d101      	bne.n	80033d0 <HAL_I2S_Init+0x24c>
 80033cc:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <HAL_I2S_Init+0x27c>)
 80033ce:	e001      	b.n	80033d4 <HAL_I2S_Init+0x250>
 80033d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033d4:	897a      	ldrh	r2, [r7, #10]
 80033d6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3720      	adds	r7, #32
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	08003709 	.word	0x08003709
 80033f4:	cccccccd 	.word	0xcccccccd
 80033f8:	0800381d 	.word	0x0800381d
 80033fc:	40003800 	.word	0x40003800
 8003400:	40003400 	.word	0x40003400

08003404 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	4613      	mov	r3, r2
 8003410:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d002      	beq.n	800341e <HAL_I2S_Receive_DMA+0x1a>
 8003418:	88fb      	ldrh	r3, [r7, #6]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e0a1      	b.n	8003566 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b01      	cmp	r3, #1
 800342c:	d101      	bne.n	8003432 <HAL_I2S_Receive_DMA+0x2e>
 800342e:	2302      	movs	r3, #2
 8003430:	e099      	b.n	8003566 <HAL_I2S_Receive_DMA+0x162>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b01      	cmp	r3, #1
 8003444:	d005      	beq.n	8003452 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800344e:	2302      	movs	r3, #2
 8003450:	e089      	b.n	8003566 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2204      	movs	r2, #4
 8003456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	2b03      	cmp	r3, #3
 8003476:	d002      	beq.n	800347e <HAL_I2S_Receive_DMA+0x7a>
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	2b05      	cmp	r3, #5
 800347c:	d10a      	bne.n	8003494 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 800347e:	88fb      	ldrh	r3, [r7, #6]
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	b29a      	uxth	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8003488:	88fb      	ldrh	r3, [r7, #6]
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	b29a      	uxth	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	865a      	strh	r2, [r3, #50]	; 0x32
 8003492:	e005      	b.n	80034a0 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	88fa      	ldrh	r2, [r7, #6]
 8003498:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	88fa      	ldrh	r2, [r7, #6]
 800349e:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a4:	4a32      	ldr	r2, [pc, #200]	; (8003570 <HAL_I2S_Receive_DMA+0x16c>)
 80034a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ac:	4a31      	ldr	r2, [pc, #196]	; (8003574 <HAL_I2S_Receive_DMA+0x170>)
 80034ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b4:	4a30      	ldr	r2, [pc, #192]	; (8003578 <HAL_I2S_Receive_DMA+0x174>)
 80034b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034c6:	d10a      	bne.n	80034de <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034c8:	2300      	movs	r3, #0
 80034ca:	613b      	str	r3, [r7, #16]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	613b      	str	r3, [r7, #16]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	613b      	str	r3, [r7, #16]
 80034dc:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	330c      	adds	r3, #12
 80034e8:	4619      	mov	r1, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ee:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80034f4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80034f6:	f7fe fd71 	bl	8001fdc <HAL_DMA_Start_IT>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00f      	beq.n	8003520 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003504:	f043 0208 	orr.w	r2, r3, #8
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e022      	b.n	8003566 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800352a:	2b00      	cmp	r3, #0
 800352c:	d107      	bne.n	800353e <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	69da      	ldr	r2, [r3, #28]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800353c:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b00      	cmp	r3, #0
 800354a:	d107      	bne.n	800355c <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f042 0201 	orr.w	r2, r2, #1
 800355a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	080035e7 	.word	0x080035e7
 8003574:	080035a5 	.word	0x080035a5
 8003578:	08003603 	.word	0x08003603

0800357c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10e      	bne.n	80035d8 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0201 	bic.w	r2, r2, #1
 80035c8:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f7fd fe15 	bl	8001208 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80035de:	bf00      	nop
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b084      	sub	sp, #16
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f7fd fdf7 	bl	80011e8 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80035fa:	bf00      	nop
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b084      	sub	sp, #16
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0203 	bic.w	r2, r2, #3
 800361e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003638:	f043 0208 	orr.w	r2, r3, #8
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f7ff ffa5 	bl	8003590 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003646:	bf00      	nop
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b082      	sub	sp, #8
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	881a      	ldrh	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	1c9a      	adds	r2, r3, #2
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003670:	b29b      	uxth	r3, r3
 8003672:	3b01      	subs	r3, #1
 8003674:	b29a      	uxth	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367e:	b29b      	uxth	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10e      	bne.n	80036a2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003692:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff ff6d 	bl	800357c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80036a2:	bf00      	nop
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b082      	sub	sp, #8
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036bc:	b292      	uxth	r2, r2
 80036be:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c4:	1c9a      	adds	r2, r3, #2
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036dc:	b29b      	uxth	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10e      	bne.n	8003700 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036f0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7fd fd84 	bl	8001208 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003700:	bf00      	nop
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b04      	cmp	r3, #4
 8003722:	d13a      	bne.n	800379a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b01      	cmp	r3, #1
 800372c:	d109      	bne.n	8003742 <I2S_IRQHandler+0x3a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003738:	2b40      	cmp	r3, #64	; 0x40
 800373a:	d102      	bne.n	8003742 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7ff ffb4 	bl	80036aa <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003748:	2b40      	cmp	r3, #64	; 0x40
 800374a:	d126      	bne.n	800379a <I2S_IRQHandler+0x92>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f003 0320 	and.w	r3, r3, #32
 8003756:	2b20      	cmp	r3, #32
 8003758:	d11f      	bne.n	800379a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003768:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800376a:	2300      	movs	r3, #0
 800376c:	613b      	str	r3, [r7, #16]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	613b      	str	r3, [r7, #16]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	613b      	str	r3, [r7, #16]
 800377e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378c:	f043 0202 	orr.w	r2, r3, #2
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7ff fefb 	bl	8003590 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b03      	cmp	r3, #3
 80037a4:	d136      	bne.n	8003814 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d109      	bne.n	80037c4 <I2S_IRQHandler+0xbc>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ba:	2b80      	cmp	r3, #128	; 0x80
 80037bc:	d102      	bne.n	80037c4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7ff ff45 	bl	800364e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d122      	bne.n	8003814 <I2S_IRQHandler+0x10c>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 0320 	and.w	r3, r3, #32
 80037d8:	2b20      	cmp	r3, #32
 80037da:	d11b      	bne.n	8003814 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037ea:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80037ec:	2300      	movs	r3, #0
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003806:	f043 0204 	orr.w	r2, r3, #4
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7ff febe 	bl	8003590 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003814:	bf00      	nop
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b088      	sub	sp, #32
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a92      	ldr	r2, [pc, #584]	; (8003a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d101      	bne.n	800383a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003836:	4b92      	ldr	r3, [pc, #584]	; (8003a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003838:	e001      	b.n	800383e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800383a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a8b      	ldr	r2, [pc, #556]	; (8003a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d101      	bne.n	8003858 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003854:	4b8a      	ldr	r3, [pc, #552]	; (8003a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003856:	e001      	b.n	800385c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003858:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003868:	d004      	beq.n	8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	f040 8099 	bne.w	80039a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b02      	cmp	r3, #2
 800387c:	d107      	bne.n	800388e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003884:	2b00      	cmp	r3, #0
 8003886:	d002      	beq.n	800388e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f925 	bl	8003ad8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b01      	cmp	r3, #1
 8003896:	d107      	bne.n	80038a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d002      	beq.n	80038a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f9c8 	bl	8003c38 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ae:	2b40      	cmp	r3, #64	; 0x40
 80038b0:	d13a      	bne.n	8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	f003 0320 	and.w	r3, r3, #32
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d035      	beq.n	8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a6e      	ldr	r2, [pc, #440]	; (8003a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d101      	bne.n	80038ca <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80038c6:	4b6e      	ldr	r3, [pc, #440]	; (8003a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038c8:	e001      	b.n	80038ce <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80038ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4969      	ldr	r1, [pc, #420]	; (8003a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038d6:	428b      	cmp	r3, r1
 80038d8:	d101      	bne.n	80038de <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80038da:	4b69      	ldr	r3, [pc, #420]	; (8003a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038dc:	e001      	b.n	80038e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80038de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038e6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038f6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80038f8:	2300      	movs	r3, #0
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391a:	f043 0202 	orr.w	r2, r3, #2
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7ff fe34 	bl	8003590 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	f003 0308 	and.w	r3, r3, #8
 800392e:	2b08      	cmp	r3, #8
 8003930:	f040 80c3 	bne.w	8003aba <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f003 0320 	and.w	r3, r3, #32
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 80bd 	beq.w	8003aba <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800394e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a49      	ldr	r2, [pc, #292]	; (8003a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d101      	bne.n	800395e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800395a:	4b49      	ldr	r3, [pc, #292]	; (8003a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800395c:	e001      	b.n	8003962 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800395e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4944      	ldr	r1, [pc, #272]	; (8003a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800396a:	428b      	cmp	r3, r1
 800396c:	d101      	bne.n	8003972 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800396e:	4b44      	ldr	r3, [pc, #272]	; (8003a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003970:	e001      	b.n	8003976 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003972:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003976:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800397a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800397c:	2300      	movs	r3, #0
 800397e:	60bb      	str	r3, [r7, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	60bb      	str	r3, [r7, #8]
 8003988:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003996:	f043 0204 	orr.w	r2, r3, #4
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7ff fdf6 	bl	8003590 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039a4:	e089      	b.n	8003aba <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d107      	bne.n	80039c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d002      	beq.n	80039c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f8be 	bl	8003b3c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d107      	bne.n	80039da <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f8fd 	bl	8003bd4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e0:	2b40      	cmp	r3, #64	; 0x40
 80039e2:	d12f      	bne.n	8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f003 0320 	and.w	r3, r3, #32
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d02a      	beq.n	8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039fc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a1e      	ldr	r2, [pc, #120]	; (8003a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d101      	bne.n	8003a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003a08:	4b1d      	ldr	r3, [pc, #116]	; (8003a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a0a:	e001      	b.n	8003a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003a0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4919      	ldr	r1, [pc, #100]	; (8003a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a18:	428b      	cmp	r3, r1
 8003a1a:	d101      	bne.n	8003a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003a1c:	4b18      	ldr	r3, [pc, #96]	; (8003a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a1e:	e001      	b.n	8003a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003a20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a28:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a36:	f043 0202 	orr.w	r2, r3, #2
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7ff fda6 	bl	8003590 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b08      	cmp	r3, #8
 8003a4c:	d136      	bne.n	8003abc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f003 0320 	and.w	r3, r3, #32
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d031      	beq.n	8003abc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a07      	ldr	r2, [pc, #28]	; (8003a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d101      	bne.n	8003a66 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003a62:	4b07      	ldr	r3, [pc, #28]	; (8003a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a64:	e001      	b.n	8003a6a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003a66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4902      	ldr	r1, [pc, #8]	; (8003a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a72:	428b      	cmp	r3, r1
 8003a74:	d106      	bne.n	8003a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003a76:	4b02      	ldr	r3, [pc, #8]	; (8003a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a78:	e006      	b.n	8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003a7a:	bf00      	nop
 8003a7c:	40003800 	.word	0x40003800
 8003a80:	40003400 	.word	0x40003400
 8003a84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a8c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a9c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	f043 0204 	orr.w	r2, r3, #4
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7ff fd6c 	bl	8003590 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ab8:	e000      	b.n	8003abc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003aba:	bf00      	nop
}
 8003abc:	bf00      	nop
 8003abe:	3720      	adds	r7, #32
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	1c99      	adds	r1, r3, #2
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6251      	str	r1, [r2, #36]	; 0x24
 8003aea:	881a      	ldrh	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d113      	bne.n	8003b32 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b18:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d106      	bne.n	8003b32 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7ff ffc9 	bl	8003ac4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b32:	bf00      	nop
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
	...

08003b3c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	1c99      	adds	r1, r3, #2
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	6251      	str	r1, [r2, #36]	; 0x24
 8003b4e:	8819      	ldrh	r1, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a1d      	ldr	r2, [pc, #116]	; (8003bcc <I2SEx_TxISR_I2SExt+0x90>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d101      	bne.n	8003b5e <I2SEx_TxISR_I2SExt+0x22>
 8003b5a:	4b1d      	ldr	r3, [pc, #116]	; (8003bd0 <I2SEx_TxISR_I2SExt+0x94>)
 8003b5c:	e001      	b.n	8003b62 <I2SEx_TxISR_I2SExt+0x26>
 8003b5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b62:	460a      	mov	r2, r1
 8003b64:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d121      	bne.n	8003bc2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a12      	ldr	r2, [pc, #72]	; (8003bcc <I2SEx_TxISR_I2SExt+0x90>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d101      	bne.n	8003b8c <I2SEx_TxISR_I2SExt+0x50>
 8003b88:	4b11      	ldr	r3, [pc, #68]	; (8003bd0 <I2SEx_TxISR_I2SExt+0x94>)
 8003b8a:	e001      	b.n	8003b90 <I2SEx_TxISR_I2SExt+0x54>
 8003b8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	490d      	ldr	r1, [pc, #52]	; (8003bcc <I2SEx_TxISR_I2SExt+0x90>)
 8003b98:	428b      	cmp	r3, r1
 8003b9a:	d101      	bne.n	8003ba0 <I2SEx_TxISR_I2SExt+0x64>
 8003b9c:	4b0c      	ldr	r3, [pc, #48]	; (8003bd0 <I2SEx_TxISR_I2SExt+0x94>)
 8003b9e:	e001      	b.n	8003ba4 <I2SEx_TxISR_I2SExt+0x68>
 8003ba0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ba4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ba8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d106      	bne.n	8003bc2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7ff ff81 	bl	8003ac4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40003800 	.word	0x40003800
 8003bd0:	40003400 	.word	0x40003400

08003bd4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68d8      	ldr	r0, [r3, #12]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be6:	1c99      	adds	r1, r3, #2
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003bec:	b282      	uxth	r2, r0
 8003bee:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d113      	bne.n	8003c30 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c16:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d106      	bne.n	8003c30 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7ff ff4a 	bl	8003ac4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c30:	bf00      	nop
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a20      	ldr	r2, [pc, #128]	; (8003cc8 <I2SEx_RxISR_I2SExt+0x90>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d101      	bne.n	8003c4e <I2SEx_RxISR_I2SExt+0x16>
 8003c4a:	4b20      	ldr	r3, [pc, #128]	; (8003ccc <I2SEx_RxISR_I2SExt+0x94>)
 8003c4c:	e001      	b.n	8003c52 <I2SEx_RxISR_I2SExt+0x1a>
 8003c4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c52:	68d8      	ldr	r0, [r3, #12]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c58:	1c99      	adds	r1, r3, #2
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003c5e:	b282      	uxth	r2, r0
 8003c60:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d121      	bne.n	8003cbe <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a12      	ldr	r2, [pc, #72]	; (8003cc8 <I2SEx_RxISR_I2SExt+0x90>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d101      	bne.n	8003c88 <I2SEx_RxISR_I2SExt+0x50>
 8003c84:	4b11      	ldr	r3, [pc, #68]	; (8003ccc <I2SEx_RxISR_I2SExt+0x94>)
 8003c86:	e001      	b.n	8003c8c <I2SEx_RxISR_I2SExt+0x54>
 8003c88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	490d      	ldr	r1, [pc, #52]	; (8003cc8 <I2SEx_RxISR_I2SExt+0x90>)
 8003c94:	428b      	cmp	r3, r1
 8003c96:	d101      	bne.n	8003c9c <I2SEx_RxISR_I2SExt+0x64>
 8003c98:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <I2SEx_RxISR_I2SExt+0x94>)
 8003c9a:	e001      	b.n	8003ca0 <I2SEx_RxISR_I2SExt+0x68>
 8003c9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ca0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ca4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d106      	bne.n	8003cbe <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7ff ff03 	bl	8003ac4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cbe:	bf00      	nop
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40003800 	.word	0x40003800
 8003ccc:	40003400 	.word	0x40003400

08003cd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e267      	b.n	80041b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d075      	beq.n	8003dda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cee:	4b88      	ldr	r3, [pc, #544]	; (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 030c 	and.w	r3, r3, #12
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d00c      	beq.n	8003d14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cfa:	4b85      	ldr	r3, [pc, #532]	; (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d02:	2b08      	cmp	r3, #8
 8003d04:	d112      	bne.n	8003d2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d06:	4b82      	ldr	r3, [pc, #520]	; (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d12:	d10b      	bne.n	8003d2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d14:	4b7e      	ldr	r3, [pc, #504]	; (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d05b      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x108>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d157      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e242      	b.n	80041b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d34:	d106      	bne.n	8003d44 <HAL_RCC_OscConfig+0x74>
 8003d36:	4b76      	ldr	r3, [pc, #472]	; (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a75      	ldr	r2, [pc, #468]	; (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d40:	6013      	str	r3, [r2, #0]
 8003d42:	e01d      	b.n	8003d80 <HAL_RCC_OscConfig+0xb0>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d4c:	d10c      	bne.n	8003d68 <HAL_RCC_OscConfig+0x98>
 8003d4e:	4b70      	ldr	r3, [pc, #448]	; (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a6f      	ldr	r2, [pc, #444]	; (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003d54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	4b6d      	ldr	r3, [pc, #436]	; (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a6c      	ldr	r2, [pc, #432]	; (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	e00b      	b.n	8003d80 <HAL_RCC_OscConfig+0xb0>
 8003d68:	4b69      	ldr	r3, [pc, #420]	; (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a68      	ldr	r2, [pc, #416]	; (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d72:	6013      	str	r3, [r2, #0]
 8003d74:	4b66      	ldr	r3, [pc, #408]	; (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a65      	ldr	r2, [pc, #404]	; (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003d7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d013      	beq.n	8003db0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d88:	f7fd ff1c 	bl	8001bc4 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d90:	f7fd ff18 	bl	8001bc4 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b64      	cmp	r3, #100	; 0x64
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e207      	b.n	80041b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da2:	4b5b      	ldr	r3, [pc, #364]	; (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0f0      	beq.n	8003d90 <HAL_RCC_OscConfig+0xc0>
 8003dae:	e014      	b.n	8003dda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db0:	f7fd ff08 	bl	8001bc4 <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003db8:	f7fd ff04 	bl	8001bc4 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b64      	cmp	r3, #100	; 0x64
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e1f3      	b.n	80041b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dca:	4b51      	ldr	r3, [pc, #324]	; (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1f0      	bne.n	8003db8 <HAL_RCC_OscConfig+0xe8>
 8003dd6:	e000      	b.n	8003dda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d063      	beq.n	8003eae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003de6:	4b4a      	ldr	r3, [pc, #296]	; (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 030c 	and.w	r3, r3, #12
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00b      	beq.n	8003e0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003df2:	4b47      	ldr	r3, [pc, #284]	; (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d11c      	bne.n	8003e38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dfe:	4b44      	ldr	r3, [pc, #272]	; (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d116      	bne.n	8003e38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e0a:	4b41      	ldr	r3, [pc, #260]	; (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d005      	beq.n	8003e22 <HAL_RCC_OscConfig+0x152>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d001      	beq.n	8003e22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e1c7      	b.n	80041b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e22:	4b3b      	ldr	r3, [pc, #236]	; (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	4937      	ldr	r1, [pc, #220]	; (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e36:	e03a      	b.n	8003eae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d020      	beq.n	8003e82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e40:	4b34      	ldr	r3, [pc, #208]	; (8003f14 <HAL_RCC_OscConfig+0x244>)
 8003e42:	2201      	movs	r2, #1
 8003e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e46:	f7fd febd 	bl	8001bc4 <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e4c:	e008      	b.n	8003e60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e4e:	f7fd feb9 	bl	8001bc4 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e1a8      	b.n	80041b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e60:	4b2b      	ldr	r3, [pc, #172]	; (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0f0      	beq.n	8003e4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e6c:	4b28      	ldr	r3, [pc, #160]	; (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	00db      	lsls	r3, r3, #3
 8003e7a:	4925      	ldr	r1, [pc, #148]	; (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	600b      	str	r3, [r1, #0]
 8003e80:	e015      	b.n	8003eae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e82:	4b24      	ldr	r3, [pc, #144]	; (8003f14 <HAL_RCC_OscConfig+0x244>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e88:	f7fd fe9c 	bl	8001bc4 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e90:	f7fd fe98 	bl	8001bc4 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e187      	b.n	80041b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ea2:	4b1b      	ldr	r3, [pc, #108]	; (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1f0      	bne.n	8003e90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0308 	and.w	r3, r3, #8
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d036      	beq.n	8003f28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d016      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ec2:	4b15      	ldr	r3, [pc, #84]	; (8003f18 <HAL_RCC_OscConfig+0x248>)
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec8:	f7fd fe7c 	bl	8001bc4 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ed0:	f7fd fe78 	bl	8001bc4 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e167      	b.n	80041b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ee2:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0f0      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x200>
 8003eee:	e01b      	b.n	8003f28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ef0:	4b09      	ldr	r3, [pc, #36]	; (8003f18 <HAL_RCC_OscConfig+0x248>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef6:	f7fd fe65 	bl	8001bc4 <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003efc:	e00e      	b.n	8003f1c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003efe:	f7fd fe61 	bl	8001bc4 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d907      	bls.n	8003f1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e150      	b.n	80041b2 <HAL_RCC_OscConfig+0x4e2>
 8003f10:	40023800 	.word	0x40023800
 8003f14:	42470000 	.word	0x42470000
 8003f18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f1c:	4b88      	ldr	r3, [pc, #544]	; (8004140 <HAL_RCC_OscConfig+0x470>)
 8003f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1ea      	bne.n	8003efe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 8097 	beq.w	8004064 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f36:	2300      	movs	r3, #0
 8003f38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f3a:	4b81      	ldr	r3, [pc, #516]	; (8004140 <HAL_RCC_OscConfig+0x470>)
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10f      	bne.n	8003f66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f46:	2300      	movs	r3, #0
 8003f48:	60bb      	str	r3, [r7, #8]
 8003f4a:	4b7d      	ldr	r3, [pc, #500]	; (8004140 <HAL_RCC_OscConfig+0x470>)
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	4a7c      	ldr	r2, [pc, #496]	; (8004140 <HAL_RCC_OscConfig+0x470>)
 8003f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f54:	6413      	str	r3, [r2, #64]	; 0x40
 8003f56:	4b7a      	ldr	r3, [pc, #488]	; (8004140 <HAL_RCC_OscConfig+0x470>)
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f5e:	60bb      	str	r3, [r7, #8]
 8003f60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f62:	2301      	movs	r3, #1
 8003f64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f66:	4b77      	ldr	r3, [pc, #476]	; (8004144 <HAL_RCC_OscConfig+0x474>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d118      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f72:	4b74      	ldr	r3, [pc, #464]	; (8004144 <HAL_RCC_OscConfig+0x474>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a73      	ldr	r2, [pc, #460]	; (8004144 <HAL_RCC_OscConfig+0x474>)
 8003f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f7e:	f7fd fe21 	bl	8001bc4 <HAL_GetTick>
 8003f82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f84:	e008      	b.n	8003f98 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f86:	f7fd fe1d 	bl	8001bc4 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e10c      	b.n	80041b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f98:	4b6a      	ldr	r3, [pc, #424]	; (8004144 <HAL_RCC_OscConfig+0x474>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0f0      	beq.n	8003f86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d106      	bne.n	8003fba <HAL_RCC_OscConfig+0x2ea>
 8003fac:	4b64      	ldr	r3, [pc, #400]	; (8004140 <HAL_RCC_OscConfig+0x470>)
 8003fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb0:	4a63      	ldr	r2, [pc, #396]	; (8004140 <HAL_RCC_OscConfig+0x470>)
 8003fb2:	f043 0301 	orr.w	r3, r3, #1
 8003fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fb8:	e01c      	b.n	8003ff4 <HAL_RCC_OscConfig+0x324>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	2b05      	cmp	r3, #5
 8003fc0:	d10c      	bne.n	8003fdc <HAL_RCC_OscConfig+0x30c>
 8003fc2:	4b5f      	ldr	r3, [pc, #380]	; (8004140 <HAL_RCC_OscConfig+0x470>)
 8003fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc6:	4a5e      	ldr	r2, [pc, #376]	; (8004140 <HAL_RCC_OscConfig+0x470>)
 8003fc8:	f043 0304 	orr.w	r3, r3, #4
 8003fcc:	6713      	str	r3, [r2, #112]	; 0x70
 8003fce:	4b5c      	ldr	r3, [pc, #368]	; (8004140 <HAL_RCC_OscConfig+0x470>)
 8003fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd2:	4a5b      	ldr	r2, [pc, #364]	; (8004140 <HAL_RCC_OscConfig+0x470>)
 8003fd4:	f043 0301 	orr.w	r3, r3, #1
 8003fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8003fda:	e00b      	b.n	8003ff4 <HAL_RCC_OscConfig+0x324>
 8003fdc:	4b58      	ldr	r3, [pc, #352]	; (8004140 <HAL_RCC_OscConfig+0x470>)
 8003fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe0:	4a57      	ldr	r2, [pc, #348]	; (8004140 <HAL_RCC_OscConfig+0x470>)
 8003fe2:	f023 0301 	bic.w	r3, r3, #1
 8003fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fe8:	4b55      	ldr	r3, [pc, #340]	; (8004140 <HAL_RCC_OscConfig+0x470>)
 8003fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fec:	4a54      	ldr	r2, [pc, #336]	; (8004140 <HAL_RCC_OscConfig+0x470>)
 8003fee:	f023 0304 	bic.w	r3, r3, #4
 8003ff2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d015      	beq.n	8004028 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ffc:	f7fd fde2 	bl	8001bc4 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004002:	e00a      	b.n	800401a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004004:	f7fd fdde 	bl	8001bc4 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004012:	4293      	cmp	r3, r2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e0cb      	b.n	80041b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800401a:	4b49      	ldr	r3, [pc, #292]	; (8004140 <HAL_RCC_OscConfig+0x470>)
 800401c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0ee      	beq.n	8004004 <HAL_RCC_OscConfig+0x334>
 8004026:	e014      	b.n	8004052 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004028:	f7fd fdcc 	bl	8001bc4 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800402e:	e00a      	b.n	8004046 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004030:	f7fd fdc8 	bl	8001bc4 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	f241 3288 	movw	r2, #5000	; 0x1388
 800403e:	4293      	cmp	r3, r2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e0b5      	b.n	80041b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004046:	4b3e      	ldr	r3, [pc, #248]	; (8004140 <HAL_RCC_OscConfig+0x470>)
 8004048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1ee      	bne.n	8004030 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004052:	7dfb      	ldrb	r3, [r7, #23]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d105      	bne.n	8004064 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004058:	4b39      	ldr	r3, [pc, #228]	; (8004140 <HAL_RCC_OscConfig+0x470>)
 800405a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405c:	4a38      	ldr	r2, [pc, #224]	; (8004140 <HAL_RCC_OscConfig+0x470>)
 800405e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004062:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 80a1 	beq.w	80041b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800406e:	4b34      	ldr	r3, [pc, #208]	; (8004140 <HAL_RCC_OscConfig+0x470>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 030c 	and.w	r3, r3, #12
 8004076:	2b08      	cmp	r3, #8
 8004078:	d05c      	beq.n	8004134 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	2b02      	cmp	r3, #2
 8004080:	d141      	bne.n	8004106 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004082:	4b31      	ldr	r3, [pc, #196]	; (8004148 <HAL_RCC_OscConfig+0x478>)
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004088:	f7fd fd9c 	bl	8001bc4 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004090:	f7fd fd98 	bl	8001bc4 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e087      	b.n	80041b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040a2:	4b27      	ldr	r3, [pc, #156]	; (8004140 <HAL_RCC_OscConfig+0x470>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f0      	bne.n	8004090 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69da      	ldr	r2, [r3, #28]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	019b      	lsls	r3, r3, #6
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c4:	085b      	lsrs	r3, r3, #1
 80040c6:	3b01      	subs	r3, #1
 80040c8:	041b      	lsls	r3, r3, #16
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d0:	061b      	lsls	r3, r3, #24
 80040d2:	491b      	ldr	r1, [pc, #108]	; (8004140 <HAL_RCC_OscConfig+0x470>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040d8:	4b1b      	ldr	r3, [pc, #108]	; (8004148 <HAL_RCC_OscConfig+0x478>)
 80040da:	2201      	movs	r2, #1
 80040dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040de:	f7fd fd71 	bl	8001bc4 <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040e4:	e008      	b.n	80040f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040e6:	f7fd fd6d 	bl	8001bc4 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e05c      	b.n	80041b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040f8:	4b11      	ldr	r3, [pc, #68]	; (8004140 <HAL_RCC_OscConfig+0x470>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0f0      	beq.n	80040e6 <HAL_RCC_OscConfig+0x416>
 8004104:	e054      	b.n	80041b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004106:	4b10      	ldr	r3, [pc, #64]	; (8004148 <HAL_RCC_OscConfig+0x478>)
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800410c:	f7fd fd5a 	bl	8001bc4 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004114:	f7fd fd56 	bl	8001bc4 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e045      	b.n	80041b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004126:	4b06      	ldr	r3, [pc, #24]	; (8004140 <HAL_RCC_OscConfig+0x470>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f0      	bne.n	8004114 <HAL_RCC_OscConfig+0x444>
 8004132:	e03d      	b.n	80041b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d107      	bne.n	800414c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e038      	b.n	80041b2 <HAL_RCC_OscConfig+0x4e2>
 8004140:	40023800 	.word	0x40023800
 8004144:	40007000 	.word	0x40007000
 8004148:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800414c:	4b1b      	ldr	r3, [pc, #108]	; (80041bc <HAL_RCC_OscConfig+0x4ec>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d028      	beq.n	80041ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004164:	429a      	cmp	r2, r3
 8004166:	d121      	bne.n	80041ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004172:	429a      	cmp	r2, r3
 8004174:	d11a      	bne.n	80041ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800417c:	4013      	ands	r3, r2
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004182:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004184:	4293      	cmp	r3, r2
 8004186:	d111      	bne.n	80041ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004192:	085b      	lsrs	r3, r3, #1
 8004194:	3b01      	subs	r3, #1
 8004196:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004198:	429a      	cmp	r2, r3
 800419a:	d107      	bne.n	80041ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d001      	beq.n	80041b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e000      	b.n	80041b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	40023800 	.word	0x40023800

080041c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e0cc      	b.n	800436e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041d4:	4b68      	ldr	r3, [pc, #416]	; (8004378 <HAL_RCC_ClockConfig+0x1b8>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d90c      	bls.n	80041fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e2:	4b65      	ldr	r3, [pc, #404]	; (8004378 <HAL_RCC_ClockConfig+0x1b8>)
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ea:	4b63      	ldr	r3, [pc, #396]	; (8004378 <HAL_RCC_ClockConfig+0x1b8>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d001      	beq.n	80041fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e0b8      	b.n	800436e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d020      	beq.n	800424a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	d005      	beq.n	8004220 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004214:	4b59      	ldr	r3, [pc, #356]	; (800437c <HAL_RCC_ClockConfig+0x1bc>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	4a58      	ldr	r2, [pc, #352]	; (800437c <HAL_RCC_ClockConfig+0x1bc>)
 800421a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800421e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0308 	and.w	r3, r3, #8
 8004228:	2b00      	cmp	r3, #0
 800422a:	d005      	beq.n	8004238 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800422c:	4b53      	ldr	r3, [pc, #332]	; (800437c <HAL_RCC_ClockConfig+0x1bc>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	4a52      	ldr	r2, [pc, #328]	; (800437c <HAL_RCC_ClockConfig+0x1bc>)
 8004232:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004236:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004238:	4b50      	ldr	r3, [pc, #320]	; (800437c <HAL_RCC_ClockConfig+0x1bc>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	494d      	ldr	r1, [pc, #308]	; (800437c <HAL_RCC_ClockConfig+0x1bc>)
 8004246:	4313      	orrs	r3, r2
 8004248:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d044      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d107      	bne.n	800426e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800425e:	4b47      	ldr	r3, [pc, #284]	; (800437c <HAL_RCC_ClockConfig+0x1bc>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d119      	bne.n	800429e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e07f      	b.n	800436e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b02      	cmp	r3, #2
 8004274:	d003      	beq.n	800427e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800427a:	2b03      	cmp	r3, #3
 800427c:	d107      	bne.n	800428e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800427e:	4b3f      	ldr	r3, [pc, #252]	; (800437c <HAL_RCC_ClockConfig+0x1bc>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d109      	bne.n	800429e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e06f      	b.n	800436e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800428e:	4b3b      	ldr	r3, [pc, #236]	; (800437c <HAL_RCC_ClockConfig+0x1bc>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e067      	b.n	800436e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800429e:	4b37      	ldr	r3, [pc, #220]	; (800437c <HAL_RCC_ClockConfig+0x1bc>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f023 0203 	bic.w	r2, r3, #3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	4934      	ldr	r1, [pc, #208]	; (800437c <HAL_RCC_ClockConfig+0x1bc>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042b0:	f7fd fc88 	bl	8001bc4 <HAL_GetTick>
 80042b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b6:	e00a      	b.n	80042ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042b8:	f7fd fc84 	bl	8001bc4 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e04f      	b.n	800436e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ce:	4b2b      	ldr	r3, [pc, #172]	; (800437c <HAL_RCC_ClockConfig+0x1bc>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 020c 	and.w	r2, r3, #12
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	429a      	cmp	r2, r3
 80042de:	d1eb      	bne.n	80042b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042e0:	4b25      	ldr	r3, [pc, #148]	; (8004378 <HAL_RCC_ClockConfig+0x1b8>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d20c      	bcs.n	8004308 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ee:	4b22      	ldr	r3, [pc, #136]	; (8004378 <HAL_RCC_ClockConfig+0x1b8>)
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	b2d2      	uxtb	r2, r2
 80042f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042f6:	4b20      	ldr	r3, [pc, #128]	; (8004378 <HAL_RCC_ClockConfig+0x1b8>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0307 	and.w	r3, r3, #7
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	429a      	cmp	r2, r3
 8004302:	d001      	beq.n	8004308 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e032      	b.n	800436e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	d008      	beq.n	8004326 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004314:	4b19      	ldr	r3, [pc, #100]	; (800437c <HAL_RCC_ClockConfig+0x1bc>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	4916      	ldr	r1, [pc, #88]	; (800437c <HAL_RCC_ClockConfig+0x1bc>)
 8004322:	4313      	orrs	r3, r2
 8004324:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0308 	and.w	r3, r3, #8
 800432e:	2b00      	cmp	r3, #0
 8004330:	d009      	beq.n	8004346 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004332:	4b12      	ldr	r3, [pc, #72]	; (800437c <HAL_RCC_ClockConfig+0x1bc>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	490e      	ldr	r1, [pc, #56]	; (800437c <HAL_RCC_ClockConfig+0x1bc>)
 8004342:	4313      	orrs	r3, r2
 8004344:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004346:	f000 f821 	bl	800438c <HAL_RCC_GetSysClockFreq>
 800434a:	4602      	mov	r2, r0
 800434c:	4b0b      	ldr	r3, [pc, #44]	; (800437c <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	091b      	lsrs	r3, r3, #4
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	490a      	ldr	r1, [pc, #40]	; (8004380 <HAL_RCC_ClockConfig+0x1c0>)
 8004358:	5ccb      	ldrb	r3, [r1, r3]
 800435a:	fa22 f303 	lsr.w	r3, r2, r3
 800435e:	4a09      	ldr	r2, [pc, #36]	; (8004384 <HAL_RCC_ClockConfig+0x1c4>)
 8004360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004362:	4b09      	ldr	r3, [pc, #36]	; (8004388 <HAL_RCC_ClockConfig+0x1c8>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f7fd fbe8 	bl	8001b3c <HAL_InitTick>

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	40023c00 	.word	0x40023c00
 800437c:	40023800 	.word	0x40023800
 8004380:	08007cfc 	.word	0x08007cfc
 8004384:	20000408 	.word	0x20000408
 8004388:	2000040c 	.word	0x2000040c

0800438c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800438c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004390:	b094      	sub	sp, #80	; 0x50
 8004392:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	647b      	str	r3, [r7, #68]	; 0x44
 8004398:	2300      	movs	r3, #0
 800439a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800439c:	2300      	movs	r3, #0
 800439e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80043a0:	2300      	movs	r3, #0
 80043a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043a4:	4b79      	ldr	r3, [pc, #484]	; (800458c <HAL_RCC_GetSysClockFreq+0x200>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f003 030c 	and.w	r3, r3, #12
 80043ac:	2b08      	cmp	r3, #8
 80043ae:	d00d      	beq.n	80043cc <HAL_RCC_GetSysClockFreq+0x40>
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	f200 80e1 	bhi.w	8004578 <HAL_RCC_GetSysClockFreq+0x1ec>
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d002      	beq.n	80043c0 <HAL_RCC_GetSysClockFreq+0x34>
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	d003      	beq.n	80043c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80043be:	e0db      	b.n	8004578 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043c0:	4b73      	ldr	r3, [pc, #460]	; (8004590 <HAL_RCC_GetSysClockFreq+0x204>)
 80043c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80043c4:	e0db      	b.n	800457e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043c6:	4b73      	ldr	r3, [pc, #460]	; (8004594 <HAL_RCC_GetSysClockFreq+0x208>)
 80043c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043ca:	e0d8      	b.n	800457e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043cc:	4b6f      	ldr	r3, [pc, #444]	; (800458c <HAL_RCC_GetSysClockFreq+0x200>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043d6:	4b6d      	ldr	r3, [pc, #436]	; (800458c <HAL_RCC_GetSysClockFreq+0x200>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d063      	beq.n	80044aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043e2:	4b6a      	ldr	r3, [pc, #424]	; (800458c <HAL_RCC_GetSysClockFreq+0x200>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	099b      	lsrs	r3, r3, #6
 80043e8:	2200      	movs	r2, #0
 80043ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80043ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80043ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043f4:	633b      	str	r3, [r7, #48]	; 0x30
 80043f6:	2300      	movs	r3, #0
 80043f8:	637b      	str	r3, [r7, #52]	; 0x34
 80043fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80043fe:	4622      	mov	r2, r4
 8004400:	462b      	mov	r3, r5
 8004402:	f04f 0000 	mov.w	r0, #0
 8004406:	f04f 0100 	mov.w	r1, #0
 800440a:	0159      	lsls	r1, r3, #5
 800440c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004410:	0150      	lsls	r0, r2, #5
 8004412:	4602      	mov	r2, r0
 8004414:	460b      	mov	r3, r1
 8004416:	4621      	mov	r1, r4
 8004418:	1a51      	subs	r1, r2, r1
 800441a:	6139      	str	r1, [r7, #16]
 800441c:	4629      	mov	r1, r5
 800441e:	eb63 0301 	sbc.w	r3, r3, r1
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	f04f 0200 	mov.w	r2, #0
 8004428:	f04f 0300 	mov.w	r3, #0
 800442c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004430:	4659      	mov	r1, fp
 8004432:	018b      	lsls	r3, r1, #6
 8004434:	4651      	mov	r1, sl
 8004436:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800443a:	4651      	mov	r1, sl
 800443c:	018a      	lsls	r2, r1, #6
 800443e:	4651      	mov	r1, sl
 8004440:	ebb2 0801 	subs.w	r8, r2, r1
 8004444:	4659      	mov	r1, fp
 8004446:	eb63 0901 	sbc.w	r9, r3, r1
 800444a:	f04f 0200 	mov.w	r2, #0
 800444e:	f04f 0300 	mov.w	r3, #0
 8004452:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004456:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800445a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800445e:	4690      	mov	r8, r2
 8004460:	4699      	mov	r9, r3
 8004462:	4623      	mov	r3, r4
 8004464:	eb18 0303 	adds.w	r3, r8, r3
 8004468:	60bb      	str	r3, [r7, #8]
 800446a:	462b      	mov	r3, r5
 800446c:	eb49 0303 	adc.w	r3, r9, r3
 8004470:	60fb      	str	r3, [r7, #12]
 8004472:	f04f 0200 	mov.w	r2, #0
 8004476:	f04f 0300 	mov.w	r3, #0
 800447a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800447e:	4629      	mov	r1, r5
 8004480:	024b      	lsls	r3, r1, #9
 8004482:	4621      	mov	r1, r4
 8004484:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004488:	4621      	mov	r1, r4
 800448a:	024a      	lsls	r2, r1, #9
 800448c:	4610      	mov	r0, r2
 800448e:	4619      	mov	r1, r3
 8004490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004492:	2200      	movs	r2, #0
 8004494:	62bb      	str	r3, [r7, #40]	; 0x28
 8004496:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004498:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800449c:	f7fc fa8a 	bl	80009b4 <__aeabi_uldivmod>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4613      	mov	r3, r2
 80044a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044a8:	e058      	b.n	800455c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044aa:	4b38      	ldr	r3, [pc, #224]	; (800458c <HAL_RCC_GetSysClockFreq+0x200>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	099b      	lsrs	r3, r3, #6
 80044b0:	2200      	movs	r2, #0
 80044b2:	4618      	mov	r0, r3
 80044b4:	4611      	mov	r1, r2
 80044b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044ba:	623b      	str	r3, [r7, #32]
 80044bc:	2300      	movs	r3, #0
 80044be:	627b      	str	r3, [r7, #36]	; 0x24
 80044c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044c4:	4642      	mov	r2, r8
 80044c6:	464b      	mov	r3, r9
 80044c8:	f04f 0000 	mov.w	r0, #0
 80044cc:	f04f 0100 	mov.w	r1, #0
 80044d0:	0159      	lsls	r1, r3, #5
 80044d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044d6:	0150      	lsls	r0, r2, #5
 80044d8:	4602      	mov	r2, r0
 80044da:	460b      	mov	r3, r1
 80044dc:	4641      	mov	r1, r8
 80044de:	ebb2 0a01 	subs.w	sl, r2, r1
 80044e2:	4649      	mov	r1, r9
 80044e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80044e8:	f04f 0200 	mov.w	r2, #0
 80044ec:	f04f 0300 	mov.w	r3, #0
 80044f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044fc:	ebb2 040a 	subs.w	r4, r2, sl
 8004500:	eb63 050b 	sbc.w	r5, r3, fp
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	f04f 0300 	mov.w	r3, #0
 800450c:	00eb      	lsls	r3, r5, #3
 800450e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004512:	00e2      	lsls	r2, r4, #3
 8004514:	4614      	mov	r4, r2
 8004516:	461d      	mov	r5, r3
 8004518:	4643      	mov	r3, r8
 800451a:	18e3      	adds	r3, r4, r3
 800451c:	603b      	str	r3, [r7, #0]
 800451e:	464b      	mov	r3, r9
 8004520:	eb45 0303 	adc.w	r3, r5, r3
 8004524:	607b      	str	r3, [r7, #4]
 8004526:	f04f 0200 	mov.w	r2, #0
 800452a:	f04f 0300 	mov.w	r3, #0
 800452e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004532:	4629      	mov	r1, r5
 8004534:	028b      	lsls	r3, r1, #10
 8004536:	4621      	mov	r1, r4
 8004538:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800453c:	4621      	mov	r1, r4
 800453e:	028a      	lsls	r2, r1, #10
 8004540:	4610      	mov	r0, r2
 8004542:	4619      	mov	r1, r3
 8004544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004546:	2200      	movs	r2, #0
 8004548:	61bb      	str	r3, [r7, #24]
 800454a:	61fa      	str	r2, [r7, #28]
 800454c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004550:	f7fc fa30 	bl	80009b4 <__aeabi_uldivmod>
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	4613      	mov	r3, r2
 800455a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800455c:	4b0b      	ldr	r3, [pc, #44]	; (800458c <HAL_RCC_GetSysClockFreq+0x200>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	0c1b      	lsrs	r3, r3, #16
 8004562:	f003 0303 	and.w	r3, r3, #3
 8004566:	3301      	adds	r3, #1
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800456c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800456e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004570:	fbb2 f3f3 	udiv	r3, r2, r3
 8004574:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004576:	e002      	b.n	800457e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004578:	4b05      	ldr	r3, [pc, #20]	; (8004590 <HAL_RCC_GetSysClockFreq+0x204>)
 800457a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800457c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800457e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004580:	4618      	mov	r0, r3
 8004582:	3750      	adds	r7, #80	; 0x50
 8004584:	46bd      	mov	sp, r7
 8004586:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800458a:	bf00      	nop
 800458c:	40023800 	.word	0x40023800
 8004590:	00f42400 	.word	0x00f42400
 8004594:	007a1200 	.word	0x007a1200

08004598 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004598:	b480      	push	{r7}
 800459a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800459c:	4b03      	ldr	r3, [pc, #12]	; (80045ac <HAL_RCC_GetHCLKFreq+0x14>)
 800459e:	681b      	ldr	r3, [r3, #0]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	20000408 	.word	0x20000408

080045b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045b4:	f7ff fff0 	bl	8004598 <HAL_RCC_GetHCLKFreq>
 80045b8:	4602      	mov	r2, r0
 80045ba:	4b05      	ldr	r3, [pc, #20]	; (80045d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	0a9b      	lsrs	r3, r3, #10
 80045c0:	f003 0307 	and.w	r3, r3, #7
 80045c4:	4903      	ldr	r1, [pc, #12]	; (80045d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045c6:	5ccb      	ldrb	r3, [r1, r3]
 80045c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40023800 	.word	0x40023800
 80045d4:	08007d0c 	.word	0x08007d0c

080045d8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d105      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d035      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004600:	4b62      	ldr	r3, [pc, #392]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004602:	2200      	movs	r2, #0
 8004604:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004606:	f7fd fadd 	bl	8001bc4 <HAL_GetTick>
 800460a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800460c:	e008      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800460e:	f7fd fad9 	bl	8001bc4 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d901      	bls.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e0b0      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004620:	4b5b      	ldr	r3, [pc, #364]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1f0      	bne.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	019a      	lsls	r2, r3, #6
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	071b      	lsls	r3, r3, #28
 8004638:	4955      	ldr	r1, [pc, #340]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800463a:	4313      	orrs	r3, r2
 800463c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004640:	4b52      	ldr	r3, [pc, #328]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004642:	2201      	movs	r2, #1
 8004644:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004646:	f7fd fabd 	bl	8001bc4 <HAL_GetTick>
 800464a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800464c:	e008      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800464e:	f7fd fab9 	bl	8001bc4 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e090      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004660:	4b4b      	ldr	r3, [pc, #300]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0f0      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 8083 	beq.w	8004780 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800467a:	2300      	movs	r3, #0
 800467c:	60fb      	str	r3, [r7, #12]
 800467e:	4b44      	ldr	r3, [pc, #272]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	4a43      	ldr	r2, [pc, #268]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004688:	6413      	str	r3, [r2, #64]	; 0x40
 800468a:	4b41      	ldr	r3, [pc, #260]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004696:	4b3f      	ldr	r3, [pc, #252]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a3e      	ldr	r2, [pc, #248]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800469c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80046a2:	f7fd fa8f 	bl	8001bc4 <HAL_GetTick>
 80046a6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046a8:	e008      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80046aa:	f7fd fa8b 	bl	8001bc4 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d901      	bls.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e062      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046bc:	4b35      	ldr	r3, [pc, #212]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0f0      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046c8:	4b31      	ldr	r3, [pc, #196]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046d0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d02f      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d028      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046e6:	4b2a      	ldr	r3, [pc, #168]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ee:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046f0:	4b29      	ldr	r3, [pc, #164]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046f2:	2201      	movs	r2, #1
 80046f4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046f6:	4b28      	ldr	r3, [pc, #160]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80046fc:	4a24      	ldr	r2, [pc, #144]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004702:	4b23      	ldr	r3, [pc, #140]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b01      	cmp	r3, #1
 800470c:	d114      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800470e:	f7fd fa59 	bl	8001bc4 <HAL_GetTick>
 8004712:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004714:	e00a      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004716:	f7fd fa55 	bl	8001bc4 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	f241 3288 	movw	r2, #5000	; 0x1388
 8004724:	4293      	cmp	r3, r2
 8004726:	d901      	bls.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e02a      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800472c:	4b18      	ldr	r3, [pc, #96]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800472e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d0ee      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004740:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004744:	d10d      	bne.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004746:	4b12      	ldr	r3, [pc, #72]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800475a:	490d      	ldr	r1, [pc, #52]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800475c:	4313      	orrs	r3, r2
 800475e:	608b      	str	r3, [r1, #8]
 8004760:	e005      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004762:	4b0b      	ldr	r3, [pc, #44]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	4a0a      	ldr	r2, [pc, #40]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004768:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800476c:	6093      	str	r3, [r2, #8]
 800476e:	4b08      	ldr	r3, [pc, #32]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004770:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800477a:	4905      	ldr	r1, [pc, #20]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800477c:	4313      	orrs	r3, r2
 800477e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3718      	adds	r7, #24
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	42470068 	.word	0x42470068
 8004790:	40023800 	.word	0x40023800
 8004794:	40007000 	.word	0x40007000
 8004798:	42470e40 	.word	0x42470e40

0800479c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800479c:	b480      	push	{r7}
 800479e:	b087      	sub	sp, #28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d13e      	bne.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80047ba:	4b23      	ldr	r3, [pc, #140]	; (8004848 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d005      	beq.n	80047d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d12f      	bne.n	8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80047d0:	4b1e      	ldr	r3, [pc, #120]	; (800484c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047d2:	617b      	str	r3, [r7, #20]
          break;
 80047d4:	e02f      	b.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80047d6:	4b1c      	ldr	r3, [pc, #112]	; (8004848 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047e2:	d108      	bne.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047e4:	4b18      	ldr	r3, [pc, #96]	; (8004848 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047ec:	4a18      	ldr	r2, [pc, #96]	; (8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80047ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f2:	613b      	str	r3, [r7, #16]
 80047f4:	e007      	b.n	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047f6:	4b14      	ldr	r3, [pc, #80]	; (8004848 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047fe:	4a15      	ldr	r2, [pc, #84]	; (8004854 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004800:	fbb2 f3f3 	udiv	r3, r2, r3
 8004804:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004806:	4b10      	ldr	r3, [pc, #64]	; (8004848 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800480c:	099b      	lsrs	r3, r3, #6
 800480e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	fb02 f303 	mul.w	r3, r2, r3
 8004818:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800481a:	4b0b      	ldr	r3, [pc, #44]	; (8004848 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800481c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004820:	0f1b      	lsrs	r3, r3, #28
 8004822:	f003 0307 	and.w	r3, r3, #7
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	fbb2 f3f3 	udiv	r3, r2, r3
 800482c:	617b      	str	r3, [r7, #20]
          break;
 800482e:	e002      	b.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004830:	2300      	movs	r3, #0
 8004832:	617b      	str	r3, [r7, #20]
          break;
 8004834:	bf00      	nop
        }
      }
      break;
 8004836:	bf00      	nop
    }
  }
  return frequency;
 8004838:	697b      	ldr	r3, [r7, #20]
}
 800483a:	4618      	mov	r0, r3
 800483c:	371c      	adds	r7, #28
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	40023800 	.word	0x40023800
 800484c:	00bb8000 	.word	0x00bb8000
 8004850:	007a1200 	.word	0x007a1200
 8004854:	00f42400 	.word	0x00f42400

08004858 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_MSB;
 800485c:	4b10      	ldr	r3, [pc, #64]	; (80048a0 <MX_PDM2PCM_Init+0x48>)
 800485e:	2201      	movs	r2, #1
 8004860:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 8004862:	4b0f      	ldr	r3, [pc, #60]	; (80048a0 <MX_PDM2PCM_Init+0x48>)
 8004864:	2201      	movs	r2, #1
 8004866:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8004868:	4b0d      	ldr	r3, [pc, #52]	; (80048a0 <MX_PDM2PCM_Init+0x48>)
 800486a:	4a0e      	ldr	r2, [pc, #56]	; (80048a4 <MX_PDM2PCM_Init+0x4c>)
 800486c:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 800486e:	4b0c      	ldr	r3, [pc, #48]	; (80048a0 <MX_PDM2PCM_Init+0x48>)
 8004870:	2201      	movs	r2, #1
 8004872:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 8004874:	4b0a      	ldr	r3, [pc, #40]	; (80048a0 <MX_PDM2PCM_Init+0x48>)
 8004876:	2201      	movs	r2, #1
 8004878:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 800487a:	4809      	ldr	r0, [pc, #36]	; (80048a0 <MX_PDM2PCM_Init+0x48>)
 800487c:	f001 fd66 	bl	800634c <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_16;
 8004880:	4b09      	ldr	r3, [pc, #36]	; (80048a8 <MX_PDM2PCM_Init+0x50>)
 8004882:	2205      	movs	r2, #5
 8004884:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 64;
 8004886:	4b08      	ldr	r3, [pc, #32]	; (80048a8 <MX_PDM2PCM_Init+0x50>)
 8004888:	2240      	movs	r2, #64	; 0x40
 800488a:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 800488c:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <MX_PDM2PCM_Init+0x50>)
 800488e:	2200      	movs	r2, #0
 8004890:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 8004892:	4905      	ldr	r1, [pc, #20]	; (80048a8 <MX_PDM2PCM_Init+0x50>)
 8004894:	4802      	ldr	r0, [pc, #8]	; (80048a0 <MX_PDM2PCM_Init+0x48>)
 8004896:	f001 fde3 	bl	8006460 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800489a:	bf00      	nop
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	20000cec 	.word	0x20000cec
 80048a4:	7d70a3d6 	.word	0x7d70a3d6
 80048a8:	20000d38 	.word	0x20000d38

080048ac <D16_GENERIC>:
 80048ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048b0:	b089      	sub	sp, #36	; 0x24
 80048b2:	68d4      	ldr	r4, [r2, #12]
 80048b4:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80048b6:	6993      	ldr	r3, [r2, #24]
 80048b8:	9407      	str	r4, [sp, #28]
 80048ba:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80048bc:	9306      	str	r3, [sp, #24]
 80048be:	9402      	str	r4, [sp, #8]
 80048c0:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80048c4:	f8d2 b014 	ldr.w	fp, [r2, #20]
 80048c8:	69d3      	ldr	r3, [r2, #28]
 80048ca:	6896      	ldr	r6, [r2, #8]
 80048cc:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80048ce:	9103      	str	r1, [sp, #12]
 80048d0:	2d00      	cmp	r5, #0
 80048d2:	d066      	beq.n	80049a2 <D16_GENERIC+0xf6>
 80048d4:	f004 0510 	and.w	r5, r4, #16
 80048d8:	f004 0420 	and.w	r4, r4, #32
 80048dc:	9504      	str	r5, [sp, #16]
 80048de:	4938      	ldr	r1, [pc, #224]	; (80049c0 <D16_GENERIC+0x114>)
 80048e0:	9405      	str	r4, [sp, #20]
 80048e2:	f04f 0e00 	mov.w	lr, #0
 80048e6:	4635      	mov	r5, r6
 80048e8:	e04f      	b.n	800498a <D16_GENERIC+0xde>
 80048ea:	5d87      	ldrb	r7, [r0, r6]
 80048ec:	7804      	ldrb	r4, [r0, #0]
 80048ee:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80048f2:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 80048f6:	b2e6      	uxtb	r6, r4
 80048f8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80048fc:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8004900:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8004904:	4433      	add	r3, r6
 8004906:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 800490a:	f3c4 0609 	ubfx	r6, r4, #0, #10
 800490e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004912:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8004916:	0aa3      	lsrs	r3, r4, #10
 8004918:	4c2a      	ldr	r4, [pc, #168]	; (80049c4 <D16_GENERIC+0x118>)
 800491a:	fb26 5404 	smlad	r4, r6, r4, r5
 800491e:	4d2a      	ldr	r5, [pc, #168]	; (80049c8 <D16_GENERIC+0x11c>)
 8004920:	fb26 f505 	smuad	r5, r6, r5
 8004924:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8004928:	eb04 080a 	add.w	r8, r4, sl
 800492c:	eba8 080b 	sub.w	r8, r8, fp
 8004930:	4646      	mov	r6, r8
 8004932:	17f7      	asrs	r7, r6, #31
 8004934:	e9cd 6700 	strd	r6, r7, [sp]
 8004938:	9e04      	ldr	r6, [sp, #16]
 800493a:	f10e 0c01 	add.w	ip, lr, #1
 800493e:	b16e      	cbz	r6, 800495c <D16_GENERIC+0xb0>
 8004940:	6a16      	ldr	r6, [r2, #32]
 8004942:	9f01      	ldr	r7, [sp, #4]
 8004944:	fba8 8906 	umull	r8, r9, r8, r6
 8004948:	fb06 9907 	mla	r9, r6, r7, r9
 800494c:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8004950:	f149 0900 	adc.w	r9, r9, #0
 8004954:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8004958:	46a3      	mov	fp, r4
 800495a:	4654      	mov	r4, sl
 800495c:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800495e:	9f02      	ldr	r7, [sp, #8]
 8004960:	0424      	lsls	r4, r4, #16
 8004962:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004966:	f04f 0900 	mov.w	r9, #0
 800496a:	fb0e fe06 	mul.w	lr, lr, r6
 800496e:	fbc7 8904 	smlal	r8, r9, r7, r4
 8004972:	9e03      	ldr	r6, [sp, #12]
 8004974:	464f      	mov	r7, r9
 8004976:	10bc      	asrs	r4, r7, #2
 8004978:	f304 040f 	ssat	r4, #16, r4
 800497c:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 8004980:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8004982:	fa1f fe8c 	uxth.w	lr, ip
 8004986:	4574      	cmp	r4, lr
 8004988:	d90a      	bls.n	80049a0 <D16_GENERIC+0xf4>
 800498a:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800498c:	2c01      	cmp	r4, #1
 800498e:	b2e6      	uxtb	r6, r4
 8004990:	d1ab      	bne.n	80048ea <D16_GENERIC+0x3e>
 8004992:	9e05      	ldr	r6, [sp, #20]
 8004994:	f850 4b02 	ldr.w	r4, [r0], #2
 8004998:	2e00      	cmp	r6, #0
 800499a:	d0ac      	beq.n	80048f6 <D16_GENERIC+0x4a>
 800499c:	ba64      	rev16	r4, r4
 800499e:	e7aa      	b.n	80048f6 <D16_GENERIC+0x4a>
 80049a0:	462e      	mov	r6, r5
 80049a2:	9907      	ldr	r1, [sp, #28]
 80049a4:	61d3      	str	r3, [r2, #28]
 80049a6:	9b06      	ldr	r3, [sp, #24]
 80049a8:	6096      	str	r6, [r2, #8]
 80049aa:	2000      	movs	r0, #0
 80049ac:	60d1      	str	r1, [r2, #12]
 80049ae:	f8c2 a010 	str.w	sl, [r2, #16]
 80049b2:	f8c2 b014 	str.w	fp, [r2, #20]
 80049b6:	6193      	str	r3, [r2, #24]
 80049b8:	b009      	add	sp, #36	; 0x24
 80049ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049be:	bf00      	nop
 80049c0:	20000000 	.word	0x20000000
 80049c4:	00030001 	.word	0x00030001
 80049c8:	00010003 	.word	0x00010003

080049cc <D24_GENERIC>:
 80049cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049d0:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 80049d2:	6993      	ldr	r3, [r2, #24]
 80049d4:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80049d6:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80049da:	f8d2 9014 	ldr.w	r9, [r2, #20]
 80049de:	6894      	ldr	r4, [r2, #8]
 80049e0:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 80049e4:	b089      	sub	sp, #36	; 0x24
 80049e6:	9307      	str	r3, [sp, #28]
 80049e8:	9503      	str	r5, [sp, #12]
 80049ea:	69d3      	ldr	r3, [r2, #28]
 80049ec:	6b55      	ldr	r5, [r2, #52]	; 0x34
 80049ee:	9104      	str	r1, [sp, #16]
 80049f0:	2e00      	cmp	r6, #0
 80049f2:	f000 8096 	beq.w	8004b22 <D24_GENERIC+0x156>
 80049f6:	f005 0610 	and.w	r6, r5, #16
 80049fa:	f005 0520 	and.w	r5, r5, #32
 80049fe:	4954      	ldr	r1, [pc, #336]	; (8004b50 <D24_GENERIC+0x184>)
 8004a00:	9605      	str	r6, [sp, #20]
 8004a02:	9506      	str	r5, [sp, #24]
 8004a04:	f04f 0e00 	mov.w	lr, #0
 8004a08:	f8cd 9008 	str.w	r9, [sp, #8]
 8004a0c:	e06a      	b.n	8004ae4 <D24_GENERIC+0x118>
 8004a0e:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8004a12:	f810 8007 	ldrb.w	r8, [r0, r7]
 8004a16:	f890 c000 	ldrb.w	ip, [r0]
 8004a1a:	042d      	lsls	r5, r5, #16
 8004a1c:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8004a20:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8004a24:	44ac      	add	ip, r5
 8004a26:	4438      	add	r0, r7
 8004a28:	fa5f f68c 	uxtb.w	r6, ip
 8004a2c:	f3cc 2507 	ubfx	r5, ip, #8, #8
 8004a30:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8004a34:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8004a38:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004a3c:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8004a40:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8004a44:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 8004a48:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8004a4c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004a50:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8004a54:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8004a58:	4d3e      	ldr	r5, [pc, #248]	; (8004b54 <D24_GENERIC+0x188>)
 8004a5a:	fb26 b705 	smlad	r7, r6, r5, fp
 8004a5e:	4d3e      	ldr	r5, [pc, #248]	; (8004b58 <D24_GENERIC+0x18c>)
 8004a60:	fb26 4b05 	smlad	fp, r6, r5, r4
 8004a64:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8004a68:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8004a6c:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 8004a70:	2401      	movs	r4, #1
 8004a72:	fb26 f604 	smuad	r6, r6, r4
 8004a76:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8004a7a:	9f02      	ldr	r7, [sp, #8]
 8004a7c:	eb0e 0c04 	add.w	ip, lr, r4
 8004a80:	eb08 0406 	add.w	r4, r8, r6
 8004a84:	eb05 060a 	add.w	r6, r5, sl
 8004a88:	1bf6      	subs	r6, r6, r7
 8004a8a:	4637      	mov	r7, r6
 8004a8c:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8004a90:	e9cd 7800 	strd	r7, r8, [sp]
 8004a94:	9f05      	ldr	r7, [sp, #20]
 8004a96:	b177      	cbz	r7, 8004ab6 <D24_GENERIC+0xea>
 8004a98:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8004a9c:	9502      	str	r5, [sp, #8]
 8004a9e:	fba6 9a08 	umull	r9, sl, r6, r8
 8004aa2:	9e01      	ldr	r6, [sp, #4]
 8004aa4:	fb08 aa06 	mla	sl, r8, r6, sl
 8004aa8:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 8004aac:	f14a 0700 	adc.w	r7, sl, #0
 8004ab0:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8004ab4:	4655      	mov	r5, sl
 8004ab6:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8004ab8:	9f03      	ldr	r7, [sp, #12]
 8004aba:	03ad      	lsls	r5, r5, #14
 8004abc:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004ac0:	f04f 0900 	mov.w	r9, #0
 8004ac4:	fb0e fe06 	mul.w	lr, lr, r6
 8004ac8:	fbc7 8905 	smlal	r8, r9, r7, r5
 8004acc:	9e04      	ldr	r6, [sp, #16]
 8004ace:	464f      	mov	r7, r9
 8004ad0:	10bd      	asrs	r5, r7, #2
 8004ad2:	f305 050f 	ssat	r5, #16, r5
 8004ad6:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 8004ada:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8004adc:	fa1f fe8c 	uxth.w	lr, ip
 8004ae0:	4575      	cmp	r5, lr
 8004ae2:	d91c      	bls.n	8004b1e <D24_GENERIC+0x152>
 8004ae4:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8004ae6:	b2ef      	uxtb	r7, r5
 8004ae8:	2d01      	cmp	r5, #1
 8004aea:	b23e      	sxth	r6, r7
 8004aec:	d18f      	bne.n	8004a0e <D24_GENERIC+0x42>
 8004aee:	9d06      	ldr	r5, [sp, #24]
 8004af0:	b15d      	cbz	r5, 8004b0a <D24_GENERIC+0x13e>
 8004af2:	f01e 0f01 	tst.w	lr, #1
 8004af6:	d122      	bne.n	8004b3e <D24_GENERIC+0x172>
 8004af8:	7805      	ldrb	r5, [r0, #0]
 8004afa:	78c7      	ldrb	r7, [r0, #3]
 8004afc:	7846      	ldrb	r6, [r0, #1]
 8004afe:	022d      	lsls	r5, r5, #8
 8004b00:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8004b04:	44b4      	add	ip, r6
 8004b06:	3002      	adds	r0, #2
 8004b08:	e78e      	b.n	8004a28 <D24_GENERIC+0x5c>
 8004b0a:	7846      	ldrb	r6, [r0, #1]
 8004b0c:	f890 c002 	ldrb.w	ip, [r0, #2]
 8004b10:	f810 5b03 	ldrb.w	r5, [r0], #3
 8004b14:	0236      	lsls	r6, r6, #8
 8004b16:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 8004b1a:	44ac      	add	ip, r5
 8004b1c:	e784      	b.n	8004a28 <D24_GENERIC+0x5c>
 8004b1e:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8004b22:	61d3      	str	r3, [r2, #28]
 8004b24:	9b07      	ldr	r3, [sp, #28]
 8004b26:	6094      	str	r4, [r2, #8]
 8004b28:	2000      	movs	r0, #0
 8004b2a:	f8c2 b00c 	str.w	fp, [r2, #12]
 8004b2e:	f8c2 a010 	str.w	sl, [r2, #16]
 8004b32:	f8c2 9014 	str.w	r9, [r2, #20]
 8004b36:	6193      	str	r3, [r2, #24]
 8004b38:	b009      	add	sp, #36	; 0x24
 8004b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b3e:	78c5      	ldrb	r5, [r0, #3]
 8004b40:	7887      	ldrb	r7, [r0, #2]
 8004b42:	f810 6b04 	ldrb.w	r6, [r0], #4
 8004b46:	022d      	lsls	r5, r5, #8
 8004b48:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8004b4c:	44b4      	add	ip, r6
 8004b4e:	e76b      	b.n	8004a28 <D24_GENERIC+0x5c>
 8004b50:	20000000 	.word	0x20000000
 8004b54:	00030001 	.word	0x00030001
 8004b58:	00060007 	.word	0x00060007

08004b5c <D32_GENERIC>:
 8004b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b60:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8004b62:	6993      	ldr	r3, [r2, #24]
 8004b64:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8004b66:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8004b6a:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8004b6e:	69d6      	ldr	r6, [r2, #28]
 8004b70:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8004b74:	b089      	sub	sp, #36	; 0x24
 8004b76:	9307      	str	r3, [sp, #28]
 8004b78:	9403      	str	r4, [sp, #12]
 8004b7a:	6893      	ldr	r3, [r2, #8]
 8004b7c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8004b7e:	9104      	str	r1, [sp, #16]
 8004b80:	2d00      	cmp	r5, #0
 8004b82:	f000 809f 	beq.w	8004cc4 <D32_GENERIC+0x168>
 8004b86:	f004 0510 	and.w	r5, r4, #16
 8004b8a:	f004 0420 	and.w	r4, r4, #32
 8004b8e:	9505      	str	r5, [sp, #20]
 8004b90:	4953      	ldr	r1, [pc, #332]	; (8004ce0 <D32_GENERIC+0x184>)
 8004b92:	9406      	str	r4, [sp, #24]
 8004b94:	f04f 0c00 	mov.w	ip, #0
 8004b98:	f8cd 9008 	str.w	r9, [sp, #8]
 8004b9c:	461d      	mov	r5, r3
 8004b9e:	4617      	mov	r7, r2
 8004ba0:	e077      	b.n	8004c92 <D32_GENERIC+0x136>
 8004ba2:	f818 3003 	ldrb.w	r3, [r8, r3]
 8004ba6:	f810 800e 	ldrb.w	r8, [r0, lr]
 8004baa:	f810 e002 	ldrb.w	lr, [r0, r2]
 8004bae:	7800      	ldrb	r0, [r0, #0]
 8004bb0:	041b      	lsls	r3, r3, #16
 8004bb2:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8004bb6:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8004bba:	4403      	add	r3, r0
 8004bbc:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8004bc0:	b2dc      	uxtb	r4, r3
 8004bc2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004bc6:	f3c3 4807 	ubfx	r8, r3, #16, #8
 8004bca:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8004bce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004bd2:	0e1b      	lsrs	r3, r3, #24
 8004bd4:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 8004bd8:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 8004bdc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004be0:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8004be4:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 8004be8:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 8004bec:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8004bf0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004bf4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004bf8:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8004bfc:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 8004c00:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8004c04:	4b37      	ldr	r3, [pc, #220]	; (8004ce4 <D32_GENERIC+0x188>)
 8004c06:	fb22 b403 	smlad	r4, r2, r3, fp
 8004c0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c0e:	fb2e 4803 	smlad	r8, lr, r3, r4
 8004c12:	4b35      	ldr	r3, [pc, #212]	; (8004ce8 <D32_GENERIC+0x18c>)
 8004c14:	fb22 5503 	smlad	r5, r2, r3, r5
 8004c18:	4b34      	ldr	r3, [pc, #208]	; (8004cec <D32_GENERIC+0x190>)
 8004c1a:	fb2e 5b03 	smlad	fp, lr, r3, r5
 8004c1e:	2301      	movs	r3, #1
 8004c20:	fb22 f203 	smuad	r2, r2, r3
 8004c24:	4b32      	ldr	r3, [pc, #200]	; (8004cf0 <D32_GENERIC+0x194>)
 8004c26:	fb2e 2503 	smlad	r5, lr, r3, r2
 8004c2a:	9b02      	ldr	r3, [sp, #8]
 8004c2c:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 8004c30:	eb04 080a 	add.w	r8, r4, sl
 8004c34:	eba8 0803 	sub.w	r8, r8, r3
 8004c38:	4642      	mov	r2, r8
 8004c3a:	17d3      	asrs	r3, r2, #31
 8004c3c:	e9cd 2300 	strd	r2, r3, [sp]
 8004c40:	9b05      	ldr	r3, [sp, #20]
 8004c42:	f10c 0e01 	add.w	lr, ip, #1
 8004c46:	b16b      	cbz	r3, 8004c64 <D32_GENERIC+0x108>
 8004c48:	6a3a      	ldr	r2, [r7, #32]
 8004c4a:	9b01      	ldr	r3, [sp, #4]
 8004c4c:	9402      	str	r4, [sp, #8]
 8004c4e:	fba8 8902 	umull	r8, r9, r8, r2
 8004c52:	fb02 9903 	mla	r9, r2, r3, r9
 8004c56:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8004c5a:	f149 0900 	adc.w	r9, r9, #0
 8004c5e:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8004c62:	4654      	mov	r4, sl
 8004c64:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004c66:	9a04      	ldr	r2, [sp, #16]
 8004c68:	fb0c fc03 	mul.w	ip, ip, r3
 8004c6c:	9b03      	ldr	r3, [sp, #12]
 8004c6e:	0364      	lsls	r4, r4, #13
 8004c70:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004c74:	f04f 0900 	mov.w	r9, #0
 8004c78:	fbc3 8904 	smlal	r8, r9, r3, r4
 8004c7c:	464b      	mov	r3, r9
 8004c7e:	109b      	asrs	r3, r3, #2
 8004c80:	f303 030f 	ssat	r3, #16, r3
 8004c84:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 8004c88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c8a:	fa1f fc8e 	uxth.w	ip, lr
 8004c8e:	4563      	cmp	r3, ip
 8004c90:	d914      	bls.n	8004cbc <D32_GENERIC+0x160>
 8004c92:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8004c94:	b2e2      	uxtb	r2, r4
 8004c96:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 8004c9a:	eb00 080e 	add.w	r8, r0, lr
 8004c9e:	4253      	negs	r3, r2
 8004ca0:	2c01      	cmp	r4, #1
 8004ca2:	eb08 0403 	add.w	r4, r8, r3
 8004ca6:	f47f af7c 	bne.w	8004ba2 <D32_GENERIC+0x46>
 8004caa:	1d02      	adds	r2, r0, #4
 8004cac:	6803      	ldr	r3, [r0, #0]
 8004cae:	9806      	ldr	r0, [sp, #24]
 8004cb0:	b110      	cbz	r0, 8004cb8 <D32_GENERIC+0x15c>
 8004cb2:	ba5b      	rev16	r3, r3
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	e783      	b.n	8004bc0 <D32_GENERIC+0x64>
 8004cb8:	4610      	mov	r0, r2
 8004cba:	e781      	b.n	8004bc0 <D32_GENERIC+0x64>
 8004cbc:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8004cc0:	462b      	mov	r3, r5
 8004cc2:	463a      	mov	r2, r7
 8004cc4:	6093      	str	r3, [r2, #8]
 8004cc6:	9b07      	ldr	r3, [sp, #28]
 8004cc8:	f8c2 b00c 	str.w	fp, [r2, #12]
 8004ccc:	2000      	movs	r0, #0
 8004cce:	61d6      	str	r6, [r2, #28]
 8004cd0:	f8c2 a010 	str.w	sl, [r2, #16]
 8004cd4:	f8c2 9014 	str.w	r9, [r2, #20]
 8004cd8:	6193      	str	r3, [r2, #24]
 8004cda:	b009      	add	sp, #36	; 0x24
 8004cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ce0:	20000000 	.word	0x20000000
 8004ce4:	00060003 	.word	0x00060003
 8004ce8:	000a000c 	.word	0x000a000c
 8004cec:	000c000a 	.word	0x000c000a
 8004cf0:	00030006 	.word	0x00030006

08004cf4 <D48_GENERIC>:
 8004cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cf8:	b089      	sub	sp, #36	; 0x24
 8004cfa:	6953      	ldr	r3, [r2, #20]
 8004cfc:	68d4      	ldr	r4, [r2, #12]
 8004cfe:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8004d00:	9302      	str	r3, [sp, #8]
 8004d02:	9400      	str	r4, [sp, #0]
 8004d04:	6993      	ldr	r3, [r2, #24]
 8004d06:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8004d08:	9307      	str	r3, [sp, #28]
 8004d0a:	9403      	str	r4, [sp, #12]
 8004d0c:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8004d10:	69d6      	ldr	r6, [r2, #28]
 8004d12:	6893      	ldr	r3, [r2, #8]
 8004d14:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8004d16:	9104      	str	r1, [sp, #16]
 8004d18:	2d00      	cmp	r5, #0
 8004d1a:	f000 80c5 	beq.w	8004ea8 <D48_GENERIC+0x1b4>
 8004d1e:	f004 0510 	and.w	r5, r4, #16
 8004d22:	f004 0420 	and.w	r4, r4, #32
 8004d26:	4967      	ldr	r1, [pc, #412]	; (8004ec4 <D48_GENERIC+0x1d0>)
 8004d28:	9505      	str	r5, [sp, #20]
 8004d2a:	9406      	str	r4, [sp, #24]
 8004d2c:	f04f 0c00 	mov.w	ip, #0
 8004d30:	4657      	mov	r7, sl
 8004d32:	9301      	str	r3, [sp, #4]
 8004d34:	e09c      	b.n	8004e70 <D48_GENERIC+0x17c>
 8004d36:	f81b 4005 	ldrb.w	r4, [fp, r5]
 8004d3a:	f810 b009 	ldrb.w	fp, [r0, r9]
 8004d3e:	f81a 9009 	ldrb.w	r9, [sl, r9]
 8004d42:	f810 a00e 	ldrb.w	sl, [r0, lr]
 8004d46:	7800      	ldrb	r0, [r0, #0]
 8004d48:	0424      	lsls	r4, r4, #16
 8004d4a:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 8004d4e:	f818 4005 	ldrb.w	r4, [r8, r5]
 8004d52:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 8004d56:	44a8      	add	r8, r5
 8004d58:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 8004d5c:	eb0b 0500 	add.w	r5, fp, r0
 8004d60:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 8004d64:	fa5f f885 	uxtb.w	r8, r5
 8004d68:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8004d6c:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 8004d70:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 8004d74:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 8004d78:	0e2d      	lsrs	r5, r5, #24
 8004d7a:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 8004d7e:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 8004d82:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 8004d86:	b2e6      	uxtb	r6, r4
 8004d88:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 8004d8c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8004d90:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8004d94:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8004d98:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 8004d9c:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 8004da0:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8004da4:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 8004da8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004dac:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004db0:	f3c6 0909 	ubfx	r9, r6, #0, #10
 8004db4:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8004db8:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8004dbc:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8004dc0:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 8004dc4:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 8004dc8:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 8004dcc:	4c3e      	ldr	r4, [pc, #248]	; (8004ec8 <D48_GENERIC+0x1d4>)
 8004dce:	9d00      	ldr	r5, [sp, #0]
 8004dd0:	fb2a 5404 	smlad	r4, sl, r4, r5
 8004dd4:	4d3d      	ldr	r5, [pc, #244]	; (8004ecc <D48_GENERIC+0x1d8>)
 8004dd6:	fb28 4405 	smlad	r4, r8, r5, r4
 8004dda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004dde:	fb2e 4b03 	smlad	fp, lr, r3, r4
 8004de2:	4c3b      	ldr	r4, [pc, #236]	; (8004ed0 <D48_GENERIC+0x1dc>)
 8004de4:	9b01      	ldr	r3, [sp, #4]
 8004de6:	fb2a 3304 	smlad	r3, sl, r4, r3
 8004dea:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 8004dee:	fb28 3304 	smlad	r3, r8, r4, r3
 8004df2:	4c38      	ldr	r4, [pc, #224]	; (8004ed4 <D48_GENERIC+0x1e0>)
 8004df4:	fb2e 3304 	smlad	r3, lr, r4, r3
 8004df8:	2501      	movs	r5, #1
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	fb2a fa05 	smuad	sl, sl, r5
 8004e00:	4b35      	ldr	r3, [pc, #212]	; (8004ed8 <D48_GENERIC+0x1e4>)
 8004e02:	fb28 a803 	smlad	r8, r8, r3, sl
 8004e06:	4b35      	ldr	r3, [pc, #212]	; (8004edc <D48_GENERIC+0x1e8>)
 8004e08:	fb2e 8303 	smlad	r3, lr, r3, r8
 8004e0c:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 8004e10:	9301      	str	r3, [sp, #4]
 8004e12:	9b02      	ldr	r3, [sp, #8]
 8004e14:	eb04 0807 	add.w	r8, r4, r7
 8004e18:	eba8 0803 	sub.w	r8, r8, r3
 8004e1c:	9b05      	ldr	r3, [sp, #20]
 8004e1e:	4465      	add	r5, ip
 8004e20:	ea4f 7be8 	mov.w	fp, r8, asr #31
 8004e24:	b163      	cbz	r3, 8004e40 <D48_GENERIC+0x14c>
 8004e26:	6a17      	ldr	r7, [r2, #32]
 8004e28:	9402      	str	r4, [sp, #8]
 8004e2a:	fba8 8907 	umull	r8, r9, r8, r7
 8004e2e:	fb07 990b 	mla	r9, r7, fp, r9
 8004e32:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8004e36:	f149 0900 	adc.w	r9, r9, #0
 8004e3a:	ea4f 0749 	mov.w	r7, r9, lsl #1
 8004e3e:	463c      	mov	r4, r7
 8004e40:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 8004e44:	9b03      	ldr	r3, [sp, #12]
 8004e46:	02e4      	lsls	r4, r4, #11
 8004e48:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004e4c:	f04f 0900 	mov.w	r9, #0
 8004e50:	fb0c fc0e 	mul.w	ip, ip, lr
 8004e54:	fbc3 8904 	smlal	r8, r9, r3, r4
 8004e58:	9b04      	ldr	r3, [sp, #16]
 8004e5a:	ea4f 04a9 	mov.w	r4, r9, asr #2
 8004e5e:	f304 040f 	ssat	r4, #16, r4
 8004e62:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 8004e66:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8004e68:	fa1f fc85 	uxth.w	ip, r5
 8004e6c:	4564      	cmp	r4, ip
 8004e6e:	d919      	bls.n	8004ea4 <D48_GENERIC+0x1b0>
 8004e70:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8004e72:	fa5f fe84 	uxtb.w	lr, r4
 8004e76:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 8004e7a:	f1ce 0500 	rsb	r5, lr, #0
 8004e7e:	eb00 0b09 	add.w	fp, r0, r9
 8004e82:	eb0b 0a05 	add.w	sl, fp, r5
 8004e86:	2c01      	cmp	r4, #1
 8004e88:	eb0a 0809 	add.w	r8, sl, r9
 8004e8c:	f47f af53 	bne.w	8004d36 <D48_GENERIC+0x42>
 8004e90:	9b06      	ldr	r3, [sp, #24]
 8004e92:	6805      	ldr	r5, [r0, #0]
 8004e94:	6844      	ldr	r4, [r0, #4]
 8004e96:	3006      	adds	r0, #6
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f43f af63 	beq.w	8004d64 <D48_GENERIC+0x70>
 8004e9e:	ba6d      	rev16	r5, r5
 8004ea0:	ba64      	rev16	r4, r4
 8004ea2:	e75f      	b.n	8004d64 <D48_GENERIC+0x70>
 8004ea4:	9b01      	ldr	r3, [sp, #4]
 8004ea6:	46ba      	mov	sl, r7
 8004ea8:	6093      	str	r3, [r2, #8]
 8004eaa:	9b00      	ldr	r3, [sp, #0]
 8004eac:	60d3      	str	r3, [r2, #12]
 8004eae:	9b02      	ldr	r3, [sp, #8]
 8004eb0:	6153      	str	r3, [r2, #20]
 8004eb2:	9b07      	ldr	r3, [sp, #28]
 8004eb4:	61d6      	str	r6, [r2, #28]
 8004eb6:	2000      	movs	r0, #0
 8004eb8:	f8c2 a010 	str.w	sl, [r2, #16]
 8004ebc:	6193      	str	r3, [r2, #24]
 8004ebe:	b009      	add	sp, #36	; 0x24
 8004ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ec4:	20000000 	.word	0x20000000
 8004ec8:	000f000a 	.word	0x000f000a
 8004ecc:	00060003 	.word	0x00060003
 8004ed0:	00150019 	.word	0x00150019
 8004ed4:	00190015 	.word	0x00190015
 8004ed8:	00030006 	.word	0x00030006
 8004edc:	000a000f 	.word	0x000a000f

08004ee0 <D64_GENERIC>:
 8004ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee4:	b089      	sub	sp, #36	; 0x24
 8004ee6:	6913      	ldr	r3, [r2, #16]
 8004ee8:	6895      	ldr	r5, [r2, #8]
 8004eea:	9303      	str	r3, [sp, #12]
 8004eec:	9501      	str	r5, [sp, #4]
 8004eee:	6953      	ldr	r3, [r2, #20]
 8004ef0:	68d5      	ldr	r5, [r2, #12]
 8004ef2:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8004ef4:	9304      	str	r3, [sp, #16]
 8004ef6:	9500      	str	r5, [sp, #0]
 8004ef8:	6993      	ldr	r3, [r2, #24]
 8004efa:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8004efc:	9307      	str	r3, [sp, #28]
 8004efe:	9505      	str	r5, [sp, #20]
 8004f00:	69d3      	ldr	r3, [r2, #28]
 8004f02:	9106      	str	r1, [sp, #24]
 8004f04:	2c00      	cmp	r4, #0
 8004f06:	f000 80d9 	beq.w	80050bc <D64_GENERIC+0x1dc>
 8004f0a:	6a11      	ldr	r1, [r2, #32]
 8004f0c:	9102      	str	r1, [sp, #8]
 8004f0e:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 80050fc <D64_GENERIC+0x21c>
 8004f12:	f04f 0c00 	mov.w	ip, #0
 8004f16:	4681      	mov	r9, r0
 8004f18:	e0c1      	b.n	800509e <D64_GENERIC+0x1be>
 8004f1a:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 8004f1e:	4274      	negs	r4, r6
 8004f20:	eb09 0708 	add.w	r7, r9, r8
 8004f24:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 8004f28:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 8004f2c:	5d38      	ldrb	r0, [r7, r4]
 8004f2e:	5d29      	ldrb	r1, [r5, r4]
 8004f30:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 8004f34:	f819 a008 	ldrb.w	sl, [r9, r8]
 8004f38:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 8004f3c:	f899 7000 	ldrb.w	r7, [r9]
 8004f40:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 8004f44:	4425      	add	r5, r4
 8004f46:	0409      	lsls	r1, r1, #16
 8004f48:	0400      	lsls	r0, r0, #16
 8004f4a:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 8004f4e:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8004f52:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 8004f56:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 8004f5a:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8004f5e:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 8004f62:	4459      	add	r1, fp
 8004f64:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 8004f68:	4438      	add	r0, r7
 8004f6a:	b2c5      	uxtb	r5, r0
 8004f6c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8004f70:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 8004f74:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 8004f78:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8004f7c:	0e00      	lsrs	r0, r0, #24
 8004f7e:	eb03 0806 	add.w	r8, r3, r6
 8004f82:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 8004f86:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 8004f8a:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8004f8e:	b2c8      	uxtb	r0, r1
 8004f90:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8004f94:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8004f98:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 8004f9c:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8004fa0:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8004fa4:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8004fa8:	0e09      	lsrs	r1, r1, #24
 8004faa:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 8004fae:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 8004fb2:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8004fb6:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8004fba:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 8004fbe:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8004fc2:	f3ca 0309 	ubfx	r3, sl, #0, #10
 8004fc6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004fca:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004fce:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004fd2:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 8004fd6:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8004fda:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8004fde:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8004fe2:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8004fe6:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 8004fea:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8004fee:	0a8b      	lsrs	r3, r1, #10
 8004ff0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8004ff4:	4939      	ldr	r1, [pc, #228]	; (80050dc <D64_GENERIC+0x1fc>)
 8004ff6:	9c00      	ldr	r4, [sp, #0]
 8004ff8:	fb28 4101 	smlad	r1, r8, r1, r4
 8004ffc:	4c38      	ldr	r4, [pc, #224]	; (80050e0 <D64_GENERIC+0x200>)
 8004ffe:	fb27 1104 	smlad	r1, r7, r4, r1
 8005002:	4c38      	ldr	r4, [pc, #224]	; (80050e4 <D64_GENERIC+0x204>)
 8005004:	fb20 1104 	smlad	r1, r0, r4, r1
 8005008:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800500c:	fb2a 1106 	smlad	r1, sl, r6, r1
 8005010:	4c35      	ldr	r4, [pc, #212]	; (80050e8 <D64_GENERIC+0x208>)
 8005012:	9d01      	ldr	r5, [sp, #4]
 8005014:	fb28 5404 	smlad	r4, r8, r4, r5
 8005018:	4d33      	ldr	r5, [pc, #204]	; (80050e8 <D64_GENERIC+0x208>)
 800501a:	fb2a 4415 	smladx	r4, sl, r5, r4
 800501e:	4d33      	ldr	r5, [pc, #204]	; (80050ec <D64_GENERIC+0x20c>)
 8005020:	fb27 4405 	smlad	r4, r7, r5, r4
 8005024:	fb20 4415 	smladx	r4, r0, r5, r4
 8005028:	2501      	movs	r5, #1
 800502a:	9400      	str	r4, [sp, #0]
 800502c:	fb28 f805 	smuad	r8, r8, r5
 8005030:	4c2f      	ldr	r4, [pc, #188]	; (80050f0 <D64_GENERIC+0x210>)
 8005032:	fb27 8704 	smlad	r7, r7, r4, r8
 8005036:	4c2f      	ldr	r4, [pc, #188]	; (80050f4 <D64_GENERIC+0x214>)
 8005038:	fb20 7004 	smlad	r0, r0, r4, r7
 800503c:	4c2e      	ldr	r4, [pc, #184]	; (80050f8 <D64_GENERIC+0x218>)
 800503e:	fb2a 0004 	smlad	r0, sl, r4, r0
 8005042:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 8005046:	9902      	ldr	r1, [sp, #8]
 8005048:	9001      	str	r0, [sp, #4]
 800504a:	b189      	cbz	r1, 8005070 <D64_GENERIC+0x190>
 800504c:	9803      	ldr	r0, [sp, #12]
 800504e:	9c04      	ldr	r4, [sp, #16]
 8005050:	9604      	str	r6, [sp, #16]
 8005052:	4430      	add	r0, r6
 8005054:	1b00      	subs	r0, r0, r4
 8005056:	17c5      	asrs	r5, r0, #31
 8005058:	460f      	mov	r7, r1
 800505a:	fba0 0101 	umull	r0, r1, r0, r1
 800505e:	fb07 1105 	mla	r1, r7, r5, r1
 8005062:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8005066:	f141 0100 	adc.w	r1, r1, #0
 800506a:	0049      	lsls	r1, r1, #1
 800506c:	9103      	str	r1, [sp, #12]
 800506e:	460e      	mov	r6, r1
 8005070:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 8005072:	9905      	ldr	r1, [sp, #20]
 8005074:	9806      	ldr	r0, [sp, #24]
 8005076:	02b6      	lsls	r6, r6, #10
 8005078:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800507c:	f04f 0800 	mov.w	r8, #0
 8005080:	fb0c f404 	mul.w	r4, ip, r4
 8005084:	fbc1 7806 	smlal	r7, r8, r1, r6
 8005088:	4641      	mov	r1, r8
 800508a:	1089      	asrs	r1, r1, #2
 800508c:	f301 010f 	ssat	r1, #16, r1
 8005090:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8005094:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8005096:	f10c 0c01 	add.w	ip, ip, #1
 800509a:	4561      	cmp	r1, ip
 800509c:	dd0e      	ble.n	80050bc <D64_GENERIC+0x1dc>
 800509e:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 80050a0:	2e01      	cmp	r6, #1
 80050a2:	f47f af3a 	bne.w	8004f1a <D64_GENERIC+0x3a>
 80050a6:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80050a8:	06b4      	lsls	r4, r6, #26
 80050aa:	e899 0003 	ldmia.w	r9, {r0, r1}
 80050ae:	f109 0908 	add.w	r9, r9, #8
 80050b2:	f57f af5a 	bpl.w	8004f6a <D64_GENERIC+0x8a>
 80050b6:	ba40      	rev16	r0, r0
 80050b8:	ba49      	rev16	r1, r1
 80050ba:	e756      	b.n	8004f6a <D64_GENERIC+0x8a>
 80050bc:	61d3      	str	r3, [r2, #28]
 80050be:	9b03      	ldr	r3, [sp, #12]
 80050c0:	9901      	ldr	r1, [sp, #4]
 80050c2:	6113      	str	r3, [r2, #16]
 80050c4:	9b04      	ldr	r3, [sp, #16]
 80050c6:	6091      	str	r1, [r2, #8]
 80050c8:	6153      	str	r3, [r2, #20]
 80050ca:	9900      	ldr	r1, [sp, #0]
 80050cc:	9b07      	ldr	r3, [sp, #28]
 80050ce:	60d1      	str	r1, [r2, #12]
 80050d0:	2000      	movs	r0, #0
 80050d2:	6193      	str	r3, [r2, #24]
 80050d4:	b009      	add	sp, #36	; 0x24
 80050d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050da:	bf00      	nop
 80050dc:	001c0015 	.word	0x001c0015
 80050e0:	000f000a 	.word	0x000f000a
 80050e4:	00060003 	.word	0x00060003
 80050e8:	0024002a 	.word	0x0024002a
 80050ec:	002e0030 	.word	0x002e0030
 80050f0:	00030006 	.word	0x00030006
 80050f4:	000a000f 	.word	0x000a000f
 80050f8:	0015001c 	.word	0x0015001c
 80050fc:	20000000 	.word	0x20000000

08005100 <D80_GENERIC>:
 8005100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005104:	b08b      	sub	sp, #44	; 0x2c
 8005106:	6914      	ldr	r4, [r2, #16]
 8005108:	9404      	str	r4, [sp, #16]
 800510a:	6954      	ldr	r4, [r2, #20]
 800510c:	9405      	str	r4, [sp, #20]
 800510e:	6994      	ldr	r4, [r2, #24]
 8005110:	9409      	str	r4, [sp, #36]	; 0x24
 8005112:	6894      	ldr	r4, [r2, #8]
 8005114:	9402      	str	r4, [sp, #8]
 8005116:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8005118:	68d4      	ldr	r4, [r2, #12]
 800511a:	9401      	str	r4, [sp, #4]
 800511c:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800511e:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 8005122:	9406      	str	r4, [sp, #24]
 8005124:	9107      	str	r1, [sp, #28]
 8005126:	2b00      	cmp	r3, #0
 8005128:	f000 810f 	beq.w	800534a <D80_GENERIC+0x24a>
 800512c:	6a13      	ldr	r3, [r2, #32]
 800512e:	9308      	str	r3, [sp, #32]
 8005130:	2300      	movs	r3, #0
 8005132:	9200      	str	r2, [sp, #0]
 8005134:	f8df 9264 	ldr.w	r9, [pc, #612]	; 800539c <D80_GENERIC+0x29c>
 8005138:	f8cd b00c 	str.w	fp, [sp, #12]
 800513c:	461a      	mov	r2, r3
 800513e:	e0ed      	b.n	800531c <D80_GENERIC+0x21c>
 8005140:	fa5f fc8c 	uxtb.w	ip, ip
 8005144:	fa0f f48c 	sxth.w	r4, ip
 8005148:	0066      	lsls	r6, r4, #1
 800514a:	eb06 0804 	add.w	r8, r6, r4
 800514e:	f1cc 0500 	rsb	r5, ip, #0
 8005152:	eb00 0108 	add.w	r1, r0, r8
 8005156:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800515a:	194b      	adds	r3, r1, r5
 800515c:	5d49      	ldrb	r1, [r1, r5]
 800515e:	f810 a008 	ldrb.w	sl, [r0, r8]
 8005162:	f813 b004 	ldrb.w	fp, [r3, r4]
 8005166:	f810 c00c 	ldrb.w	ip, [r0, ip]
 800516a:	f890 8000 	ldrb.w	r8, [r0]
 800516e:	eb03 0e04 	add.w	lr, r3, r4
 8005172:	eb0e 0705 	add.w	r7, lr, r5
 8005176:	0409      	lsls	r1, r1, #16
 8005178:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800517c:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8005180:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8005184:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 8005188:	eb0a 0004 	add.w	r0, sl, r4
 800518c:	041b      	lsls	r3, r3, #16
 800518e:	f81a a004 	ldrb.w	sl, [sl, r4]
 8005192:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 8005196:	5d44      	ldrb	r4, [r0, r5]
 8005198:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800519c:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 80051a0:	4428      	add	r0, r5
 80051a2:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 80051a6:	4441      	add	r1, r8
 80051a8:	4430      	add	r0, r6
 80051aa:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 80051ae:	441f      	add	r7, r3
 80051b0:	b2cd      	uxtb	r5, r1
 80051b2:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80051b6:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 80051ba:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 80051be:	9b03      	ldr	r3, [sp, #12]
 80051c0:	f3c1 4507 	ubfx	r5, r1, #16, #8
 80051c4:	0e09      	lsrs	r1, r1, #24
 80051c6:	4433      	add	r3, r6
 80051c8:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 80051cc:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 80051d0:	b2fd      	uxtb	r5, r7
 80051d2:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 80051d6:	469b      	mov	fp, r3
 80051d8:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80051dc:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 80051e0:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 80051e4:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 80051e8:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 80051ec:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 80051f0:	0e3b      	lsrs	r3, r7, #24
 80051f2:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 80051f6:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 80051fa:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80051fe:	fa5f fe84 	uxtb.w	lr, r4
 8005202:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 8005206:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800520a:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800520e:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 8005212:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 8005216:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800521a:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 800521e:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8005222:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005226:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800522a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800522e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005232:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005236:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800523a:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800523e:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8005242:	f3c4 0109 	ubfx	r1, r4, #0, #10
 8005246:	0aa3      	lsrs	r3, r4, #10
 8005248:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800524c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8005250:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8005254:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 8005258:	9303      	str	r3, [sp, #12]
 800525a:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 800525e:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8005262:	4b42      	ldr	r3, [pc, #264]	; (800536c <D80_GENERIC+0x26c>)
 8005264:	9901      	ldr	r1, [sp, #4]
 8005266:	fb2b 1303 	smlad	r3, fp, r3, r1
 800526a:	4941      	ldr	r1, [pc, #260]	; (8005370 <D80_GENERIC+0x270>)
 800526c:	fb28 3301 	smlad	r3, r8, r1, r3
 8005270:	4940      	ldr	r1, [pc, #256]	; (8005374 <D80_GENERIC+0x274>)
 8005272:	fb2c 3301 	smlad	r3, ip, r1, r3
 8005276:	4940      	ldr	r1, [pc, #256]	; (8005378 <D80_GENERIC+0x278>)
 8005278:	fb27 3301 	smlad	r3, r7, r1, r3
 800527c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005280:	fb2e 3301 	smlad	r3, lr, r1, r3
 8005284:	493d      	ldr	r1, [pc, #244]	; (800537c <D80_GENERIC+0x27c>)
 8005286:	9c02      	ldr	r4, [sp, #8]
 8005288:	fb2b 4401 	smlad	r4, fp, r1, r4
 800528c:	493c      	ldr	r1, [pc, #240]	; (8005380 <D80_GENERIC+0x280>)
 800528e:	fb28 4401 	smlad	r4, r8, r1, r4
 8005292:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 8005296:	fb2c 4101 	smlad	r1, ip, r1, r4
 800529a:	4c3a      	ldr	r4, [pc, #232]	; (8005384 <D80_GENERIC+0x284>)
 800529c:	fb27 1104 	smlad	r1, r7, r4, r1
 80052a0:	4c39      	ldr	r4, [pc, #228]	; (8005388 <D80_GENERIC+0x288>)
 80052a2:	fb2e 1104 	smlad	r1, lr, r4, r1
 80052a6:	9101      	str	r1, [sp, #4]
 80052a8:	2101      	movs	r1, #1
 80052aa:	fb2b fb01 	smuad	fp, fp, r1
 80052ae:	4937      	ldr	r1, [pc, #220]	; (800538c <D80_GENERIC+0x28c>)
 80052b0:	fb28 b801 	smlad	r8, r8, r1, fp
 80052b4:	4d36      	ldr	r5, [pc, #216]	; (8005390 <D80_GENERIC+0x290>)
 80052b6:	fb2c 8c05 	smlad	ip, ip, r5, r8
 80052ba:	4d36      	ldr	r5, [pc, #216]	; (8005394 <D80_GENERIC+0x294>)
 80052bc:	fb27 c705 	smlad	r7, r7, r5, ip
 80052c0:	4d35      	ldr	r5, [pc, #212]	; (8005398 <D80_GENERIC+0x298>)
 80052c2:	fb2e 7105 	smlad	r1, lr, r5, r7
 80052c6:	9102      	str	r1, [sp, #8]
 80052c8:	9908      	ldr	r1, [sp, #32]
 80052ca:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 80052ce:	b181      	cbz	r1, 80052f2 <D80_GENERIC+0x1f2>
 80052d0:	9c04      	ldr	r4, [sp, #16]
 80052d2:	9d05      	ldr	r5, [sp, #20]
 80052d4:	9305      	str	r3, [sp, #20]
 80052d6:	441c      	add	r4, r3
 80052d8:	1b64      	subs	r4, r4, r5
 80052da:	17e7      	asrs	r7, r4, #31
 80052dc:	fba4 4501 	umull	r4, r5, r4, r1
 80052e0:	fb01 5507 	mla	r5, r1, r7, r5
 80052e4:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 80052e8:	f145 0500 	adc.w	r5, r5, #0
 80052ec:	0069      	lsls	r1, r5, #1
 80052ee:	9104      	str	r1, [sp, #16]
 80052f0:	460b      	mov	r3, r1
 80052f2:	9e00      	ldr	r6, [sp, #0]
 80052f4:	9f06      	ldr	r7, [sp, #24]
 80052f6:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 80052f8:	025b      	lsls	r3, r3, #9
 80052fa:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80052fe:	2500      	movs	r5, #0
 8005300:	fb02 f101 	mul.w	r1, r2, r1
 8005304:	fbc7 4503 	smlal	r4, r5, r7, r3
 8005308:	9c07      	ldr	r4, [sp, #28]
 800530a:	10ab      	asrs	r3, r5, #2
 800530c:	f303 030f 	ssat	r3, #16, r3
 8005310:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 8005314:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8005316:	3201      	adds	r2, #1
 8005318:	4293      	cmp	r3, r2
 800531a:	dd13      	ble.n	8005344 <D80_GENERIC+0x244>
 800531c:	9b00      	ldr	r3, [sp, #0]
 800531e:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 8005322:	f1bc 0f01 	cmp.w	ip, #1
 8005326:	f47f af0b 	bne.w	8005140 <D80_GENERIC+0x40>
 800532a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532c:	6884      	ldr	r4, [r0, #8]
 800532e:	069b      	lsls	r3, r3, #26
 8005330:	e890 0082 	ldmia.w	r0, {r1, r7}
 8005334:	f100 000a 	add.w	r0, r0, #10
 8005338:	f57f af3a 	bpl.w	80051b0 <D80_GENERIC+0xb0>
 800533c:	ba49      	rev16	r1, r1
 800533e:	ba7f      	rev16	r7, r7
 8005340:	ba64      	rev16	r4, r4
 8005342:	e735      	b.n	80051b0 <D80_GENERIC+0xb0>
 8005344:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005348:	4632      	mov	r2, r6
 800534a:	9b02      	ldr	r3, [sp, #8]
 800534c:	6093      	str	r3, [r2, #8]
 800534e:	9b01      	ldr	r3, [sp, #4]
 8005350:	60d3      	str	r3, [r2, #12]
 8005352:	9b04      	ldr	r3, [sp, #16]
 8005354:	6113      	str	r3, [r2, #16]
 8005356:	9b05      	ldr	r3, [sp, #20]
 8005358:	6153      	str	r3, [r2, #20]
 800535a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800535c:	f8c2 b01c 	str.w	fp, [r2, #28]
 8005360:	2000      	movs	r0, #0
 8005362:	6193      	str	r3, [r2, #24]
 8005364:	b00b      	add	sp, #44	; 0x2c
 8005366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800536a:	bf00      	nop
 800536c:	002d0024 	.word	0x002d0024
 8005370:	001c0015 	.word	0x001c0015
 8005374:	000f000a 	.word	0x000f000a
 8005378:	00060003 	.word	0x00060003
 800537c:	0037003f 	.word	0x0037003f
 8005380:	00450049 	.word	0x00450049
 8005384:	00490045 	.word	0x00490045
 8005388:	003f0037 	.word	0x003f0037
 800538c:	00030006 	.word	0x00030006
 8005390:	000a000f 	.word	0x000a000f
 8005394:	0015001c 	.word	0x0015001c
 8005398:	0024002d 	.word	0x0024002d
 800539c:	20000000 	.word	0x20000000

080053a0 <D128_GENERIC>:
 80053a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a4:	b093      	sub	sp, #76	; 0x4c
 80053a6:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80053a8:	9005      	str	r0, [sp, #20]
 80053aa:	4610      	mov	r0, r2
 80053ac:	9201      	str	r2, [sp, #4]
 80053ae:	6912      	ldr	r2, [r2, #16]
 80053b0:	920c      	str	r2, [sp, #48]	; 0x30
 80053b2:	4602      	mov	r2, r0
 80053b4:	6940      	ldr	r0, [r0, #20]
 80053b6:	900d      	str	r0, [sp, #52]	; 0x34
 80053b8:	4610      	mov	r0, r2
 80053ba:	4614      	mov	r4, r2
 80053bc:	6992      	ldr	r2, [r2, #24]
 80053be:	9211      	str	r2, [sp, #68]	; 0x44
 80053c0:	69c2      	ldr	r2, [r0, #28]
 80053c2:	9202      	str	r2, [sp, #8]
 80053c4:	68e2      	ldr	r2, [r4, #12]
 80053c6:	6880      	ldr	r0, [r0, #8]
 80053c8:	9203      	str	r2, [sp, #12]
 80053ca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80053cc:	9004      	str	r0, [sp, #16]
 80053ce:	920e      	str	r2, [sp, #56]	; 0x38
 80053d0:	910f      	str	r1, [sp, #60]	; 0x3c
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 819b 	beq.w	800570e <D128_GENERIC+0x36e>
 80053d8:	6a23      	ldr	r3, [r4, #32]
 80053da:	9310      	str	r3, [sp, #64]	; 0x40
 80053dc:	2300      	movs	r3, #0
 80053de:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 8005788 <D128_GENERIC+0x3e8>
 80053e2:	9306      	str	r3, [sp, #24]
 80053e4:	e17a      	b.n	80056dc <D128_GENERIC+0x33c>
 80053e6:	b2d2      	uxtb	r2, r2
 80053e8:	9d05      	ldr	r5, [sp, #20]
 80053ea:	b214      	sxth	r4, r2
 80053ec:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 80053f0:	4250      	negs	r0, r2
 80053f2:	eb05 010a 	add.w	r1, r5, sl
 80053f6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80053fa:	eb01 0800 	add.w	r8, r1, r0
 80053fe:	eb0b 0c04 	add.w	ip, fp, r4
 8005402:	eb08 070c 	add.w	r7, r8, ip
 8005406:	183b      	adds	r3, r7, r0
 8005408:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800540c:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 8005410:	eb0e 0604 	add.w	r6, lr, r4
 8005414:	9307      	str	r3, [sp, #28]
 8005416:	1833      	adds	r3, r6, r0
 8005418:	9305      	str	r3, [sp, #20]
 800541a:	462b      	mov	r3, r5
 800541c:	f815 a00a 	ldrb.w	sl, [r5, sl]
 8005420:	f8cd a020 	str.w	sl, [sp, #32]
 8005424:	f818 a00c 	ldrb.w	sl, [r8, ip]
 8005428:	f813 c002 	ldrb.w	ip, [r3, r2]
 800542c:	f81e 8004 	ldrb.w	r8, [lr, r4]
 8005430:	5c3a      	ldrb	r2, [r7, r0]
 8005432:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 8005436:	781f      	ldrb	r7, [r3, #0]
 8005438:	9b07      	ldr	r3, [sp, #28]
 800543a:	9d05      	ldr	r5, [sp, #20]
 800543c:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8005440:	5c09      	ldrb	r1, [r1, r0]
 8005442:	9709      	str	r7, [sp, #36]	; 0x24
 8005444:	9307      	str	r3, [sp, #28]
 8005446:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 800544a:	5c33      	ldrb	r3, [r6, r0]
 800544c:	0412      	lsls	r2, r2, #16
 800544e:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 8005452:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8005456:	9d08      	ldr	r5, [sp, #32]
 8005458:	eb06 0a04 	add.w	sl, r6, r4
 800545c:	0409      	lsls	r1, r1, #16
 800545e:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 8005462:	f81a 5000 	ldrb.w	r5, [sl, r0]
 8005466:	5d36      	ldrb	r6, [r6, r4]
 8005468:	9c05      	ldr	r4, [sp, #20]
 800546a:	042d      	lsls	r5, r5, #16
 800546c:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 8005470:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8005474:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 8005478:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 800547c:	eb0a 0c00 	add.w	ip, sl, r0
 8005480:	041b      	lsls	r3, r3, #16
 8005482:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8005486:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 800548a:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 800548e:	9d07      	ldr	r5, [sp, #28]
 8005490:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8005494:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 8005498:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800549a:	4458      	add	r0, fp
 800549c:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 80054a0:	9005      	str	r0, [sp, #20]
 80054a2:	4439      	add	r1, r7
 80054a4:	442a      	add	r2, r5
 80054a6:	44b2      	add	sl, r6
 80054a8:	1918      	adds	r0, r3, r4
 80054aa:	b2cb      	uxtb	r3, r1
 80054ac:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80054b0:	9e02      	ldr	r6, [sp, #8]
 80054b2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80054b6:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 80054ba:	f3c1 4407 	ubfx	r4, r1, #16, #8
 80054be:	441e      	add	r6, r3
 80054c0:	0e09      	lsrs	r1, r1, #24
 80054c2:	4633      	mov	r3, r6
 80054c4:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 80054c8:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 80054cc:	b2d4      	uxtb	r4, r2
 80054ce:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 80054d2:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80054d6:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 80054da:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 80054de:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80054e2:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80054e6:	0e12      	lsrs	r2, r2, #24
 80054e8:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 80054ec:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 80054f0:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 80054f4:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 80054f8:	9702      	str	r7, [sp, #8]
 80054fa:	b2c2      	uxtb	r2, r0
 80054fc:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8005500:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 8005504:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 8005508:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800550c:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8005510:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8005514:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8005518:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800551c:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 8005520:	0e00      	lsrs	r0, r0, #24
 8005522:	fa5f f68a 	uxtb.w	r6, sl
 8005526:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800552a:	9309      	str	r3, [sp, #36]	; 0x24
 800552c:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8005530:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8005534:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8005538:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800553c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005540:	950a      	str	r5, [sp, #40]	; 0x28
 8005542:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8005546:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800554a:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800554e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005552:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8005556:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800555a:	920b      	str	r2, [sp, #44]	; 0x2c
 800555c:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8005560:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005562:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8005566:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800556a:	9307      	str	r3, [sp, #28]
 800556c:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8005570:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8005574:	9b02      	ldr	r3, [sp, #8]
 8005576:	f8cd c008 	str.w	ip, [sp, #8]
 800557a:	4694      	mov	ip, r2
 800557c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800557e:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 8005582:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8005586:	9a02      	ldr	r2, [sp, #8]
 8005588:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800558c:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8005590:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005594:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005596:	f8cd a020 	str.w	sl, [sp, #32]
 800559a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800559e:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80055a2:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80055a6:	9b07      	ldr	r3, [sp, #28]
 80055a8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80055ac:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80055b0:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 80055b4:	9a08      	ldr	r2, [sp, #32]
 80055b6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80055ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055be:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80055c2:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80055c6:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 80055ca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80055ce:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80055d2:	0a96      	lsrs	r6, r2, #10
 80055d4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80055d8:	9602      	str	r6, [sp, #8]
 80055da:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80055de:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 80055e2:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 80055e6:	4e53      	ldr	r6, [pc, #332]	; (8005734 <D128_GENERIC+0x394>)
 80055e8:	9f03      	ldr	r7, [sp, #12]
 80055ea:	fb2c 7606 	smlad	r6, ip, r6, r7
 80055ee:	4f52      	ldr	r7, [pc, #328]	; (8005738 <D128_GENERIC+0x398>)
 80055f0:	fb2a 6607 	smlad	r6, sl, r7, r6
 80055f4:	4f51      	ldr	r7, [pc, #324]	; (800573c <D128_GENERIC+0x39c>)
 80055f6:	fb21 6607 	smlad	r6, r1, r7, r6
 80055fa:	4f51      	ldr	r7, [pc, #324]	; (8005740 <D128_GENERIC+0x3a0>)
 80055fc:	fb24 6607 	smlad	r6, r4, r7, r6
 8005600:	4f50      	ldr	r7, [pc, #320]	; (8005744 <D128_GENERIC+0x3a4>)
 8005602:	fb28 6607 	smlad	r6, r8, r7, r6
 8005606:	4f50      	ldr	r7, [pc, #320]	; (8005748 <D128_GENERIC+0x3a8>)
 8005608:	fb20 6607 	smlad	r6, r0, r7, r6
 800560c:	4f4f      	ldr	r7, [pc, #316]	; (800574c <D128_GENERIC+0x3ac>)
 800560e:	fb23 6607 	smlad	r6, r3, r7, r6
 8005612:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8005616:	fb25 6607 	smlad	r6, r5, r7, r6
 800561a:	4f4d      	ldr	r7, [pc, #308]	; (8005750 <D128_GENERIC+0x3b0>)
 800561c:	9a04      	ldr	r2, [sp, #16]
 800561e:	fb2c 2e07 	smlad	lr, ip, r7, r2
 8005622:	4a4c      	ldr	r2, [pc, #304]	; (8005754 <D128_GENERIC+0x3b4>)
 8005624:	fb2a ee02 	smlad	lr, sl, r2, lr
 8005628:	4f4b      	ldr	r7, [pc, #300]	; (8005758 <D128_GENERIC+0x3b8>)
 800562a:	fb21 ee07 	smlad	lr, r1, r7, lr
 800562e:	4f4b      	ldr	r7, [pc, #300]	; (800575c <D128_GENERIC+0x3bc>)
 8005630:	fb24 ee07 	smlad	lr, r4, r7, lr
 8005634:	4f4a      	ldr	r7, [pc, #296]	; (8005760 <D128_GENERIC+0x3c0>)
 8005636:	fb28 ee07 	smlad	lr, r8, r7, lr
 800563a:	4f4a      	ldr	r7, [pc, #296]	; (8005764 <D128_GENERIC+0x3c4>)
 800563c:	fb20 ee07 	smlad	lr, r0, r7, lr
 8005640:	4f49      	ldr	r7, [pc, #292]	; (8005768 <D128_GENERIC+0x3c8>)
 8005642:	fb23 e707 	smlad	r7, r3, r7, lr
 8005646:	f8df e144 	ldr.w	lr, [pc, #324]	; 800578c <D128_GENERIC+0x3ec>
 800564a:	fb25 720e 	smlad	r2, r5, lr, r7
 800564e:	f04f 0b01 	mov.w	fp, #1
 8005652:	9203      	str	r2, [sp, #12]
 8005654:	fb2c fb0b 	smuad	fp, ip, fp
 8005658:	4f44      	ldr	r7, [pc, #272]	; (800576c <D128_GENERIC+0x3cc>)
 800565a:	fb2a ba07 	smlad	sl, sl, r7, fp
 800565e:	4f44      	ldr	r7, [pc, #272]	; (8005770 <D128_GENERIC+0x3d0>)
 8005660:	fb21 aa07 	smlad	sl, r1, r7, sl
 8005664:	4f43      	ldr	r7, [pc, #268]	; (8005774 <D128_GENERIC+0x3d4>)
 8005666:	fb24 aa07 	smlad	sl, r4, r7, sl
 800566a:	4f43      	ldr	r7, [pc, #268]	; (8005778 <D128_GENERIC+0x3d8>)
 800566c:	fb28 a707 	smlad	r7, r8, r7, sl
 8005670:	4a42      	ldr	r2, [pc, #264]	; (800577c <D128_GENERIC+0x3dc>)
 8005672:	fb20 7702 	smlad	r7, r0, r2, r7
 8005676:	4a42      	ldr	r2, [pc, #264]	; (8005780 <D128_GENERIC+0x3e0>)
 8005678:	fb23 7702 	smlad	r7, r3, r2, r7
 800567c:	4b41      	ldr	r3, [pc, #260]	; (8005784 <D128_GENERIC+0x3e4>)
 800567e:	fb25 7303 	smlad	r3, r5, r3, r7
 8005682:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005684:	9304      	str	r3, [sp, #16]
 8005686:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800568a:	b185      	cbz	r5, 80056ae <D128_GENERIC+0x30e>
 800568c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800568e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005690:	960d      	str	r6, [sp, #52]	; 0x34
 8005692:	4432      	add	r2, r6
 8005694:	1a52      	subs	r2, r2, r1
 8005696:	17d1      	asrs	r1, r2, #31
 8005698:	fba2 2305 	umull	r2, r3, r2, r5
 800569c:	fb05 3301 	mla	r3, r5, r1, r3
 80056a0:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80056a4:	f143 0300 	adc.w	r3, r3, #0
 80056a8:	005b      	lsls	r3, r3, #1
 80056aa:	930c      	str	r3, [sp, #48]	; 0x30
 80056ac:	461e      	mov	r6, r3
 80056ae:	9801      	ldr	r0, [sp, #4]
 80056b0:	9c06      	ldr	r4, [sp, #24]
 80056b2:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 80056b4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80056b6:	01f6      	lsls	r6, r6, #7
 80056b8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80056bc:	2300      	movs	r3, #0
 80056be:	fbc5 2306 	smlal	r2, r3, r5, r6
 80056c2:	fb04 f101 	mul.w	r1, r4, r1
 80056c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80056c8:	109b      	asrs	r3, r3, #2
 80056ca:	f303 030f 	ssat	r3, #16, r3
 80056ce:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 80056d2:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80056d4:	1c62      	adds	r2, r4, #1
 80056d6:	4293      	cmp	r3, r2
 80056d8:	9206      	str	r2, [sp, #24]
 80056da:	dd18      	ble.n	800570e <D128_GENERIC+0x36e>
 80056dc:	9b01      	ldr	r3, [sp, #4]
 80056de:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80056e0:	2a01      	cmp	r2, #1
 80056e2:	f47f ae80 	bne.w	80053e6 <D128_GENERIC+0x46>
 80056e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e8:	9d05      	ldr	r5, [sp, #20]
 80056ea:	069b      	lsls	r3, r3, #26
 80056ec:	6829      	ldr	r1, [r5, #0]
 80056ee:	686a      	ldr	r2, [r5, #4]
 80056f0:	68a8      	ldr	r0, [r5, #8]
 80056f2:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 80056f6:	f105 0410 	add.w	r4, r5, #16
 80056fa:	d506      	bpl.n	800570a <D128_GENERIC+0x36a>
 80056fc:	ba49      	rev16	r1, r1
 80056fe:	ba52      	rev16	r2, r2
 8005700:	ba40      	rev16	r0, r0
 8005702:	fa9a fa9a 	rev16.w	sl, sl
 8005706:	9405      	str	r4, [sp, #20]
 8005708:	e6cf      	b.n	80054aa <D128_GENERIC+0x10a>
 800570a:	9405      	str	r4, [sp, #20]
 800570c:	e6cd      	b.n	80054aa <D128_GENERIC+0x10a>
 800570e:	9a01      	ldr	r2, [sp, #4]
 8005710:	9904      	ldr	r1, [sp, #16]
 8005712:	6091      	str	r1, [r2, #8]
 8005714:	9903      	ldr	r1, [sp, #12]
 8005716:	60d1      	str	r1, [r2, #12]
 8005718:	9b02      	ldr	r3, [sp, #8]
 800571a:	61d3      	str	r3, [r2, #28]
 800571c:	4611      	mov	r1, r2
 800571e:	4613      	mov	r3, r2
 8005720:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005722:	610a      	str	r2, [r1, #16]
 8005724:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005726:	6159      	str	r1, [r3, #20]
 8005728:	9911      	ldr	r1, [sp, #68]	; 0x44
 800572a:	6199      	str	r1, [r3, #24]
 800572c:	2000      	movs	r0, #0
 800572e:	b013      	add	sp, #76	; 0x4c
 8005730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005734:	00780069 	.word	0x00780069
 8005738:	005b004e 	.word	0x005b004e
 800573c:	00420037 	.word	0x00420037
 8005740:	002d0024 	.word	0x002d0024
 8005744:	001c0015 	.word	0x001c0015
 8005748:	000f000a 	.word	0x000f000a
 800574c:	00060003 	.word	0x00060003
 8005750:	00880096 	.word	0x00880096
 8005754:	00a200ac 	.word	0x00a200ac
 8005758:	00b400ba 	.word	0x00b400ba
 800575c:	00be00c0 	.word	0x00be00c0
 8005760:	00c000be 	.word	0x00c000be
 8005764:	00ba00b4 	.word	0x00ba00b4
 8005768:	00ac00a2 	.word	0x00ac00a2
 800576c:	00030006 	.word	0x00030006
 8005770:	000a000f 	.word	0x000a000f
 8005774:	0015001c 	.word	0x0015001c
 8005778:	0024002d 	.word	0x0024002d
 800577c:	00370042 	.word	0x00370042
 8005780:	004e005b 	.word	0x004e005b
 8005784:	00690078 	.word	0x00690078
 8005788:	20000000 	.word	0x20000000
 800578c:	00960088 	.word	0x00960088

08005790 <D16_1CH_HTONS_VOL_HP>:
 8005790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005794:	4691      	mov	r9, r2
 8005796:	b083      	sub	sp, #12
 8005798:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800579a:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800579e:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	4680      	mov	r8, r0
 80057a6:	f8d9 7014 	ldr.w	r7, [r9, #20]
 80057aa:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80057ae:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80057b2:	f8d9 5008 	ldr.w	r5, [r9, #8]
 80057b6:	9401      	str	r4, [sp, #4]
 80057b8:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 80057bc:	f8d9 e020 	ldr.w	lr, [r9, #32]
 80057c0:	2a00      	cmp	r2, #0
 80057c2:	d04e      	beq.n	8005862 <D16_1CH_HTONS_VOL_HP+0xd2>
 80057c4:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 8005870 <D16_1CH_HTONS_VOL_HP+0xe0>
 80057c8:	1e8c      	subs	r4, r1, #2
 80057ca:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 80057ce:	f858 2b02 	ldr.w	r2, [r8], #2
 80057d2:	ba52      	rev16	r2, r2
 80057d4:	b2d6      	uxtb	r6, r2
 80057d6:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80057da:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 80057de:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 80057e2:	4413      	add	r3, r2
 80057e4:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 80057e8:	f3c2 0109 	ubfx	r1, r2, #0, #10
 80057ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80057f4:	0a93      	lsrs	r3, r2, #10
 80057f6:	4a1c      	ldr	r2, [pc, #112]	; (8005868 <D16_1CH_HTONS_VOL_HP+0xd8>)
 80057f8:	fb21 5202 	smlad	r2, r1, r2, r5
 80057fc:	4d1b      	ldr	r5, [pc, #108]	; (800586c <D16_1CH_HTONS_VOL_HP+0xdc>)
 80057fe:	fb21 f505 	smuad	r5, r1, r5
 8005802:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8005806:	4410      	add	r0, r2
 8005808:	1bc0      	subs	r0, r0, r7
 800580a:	17c7      	asrs	r7, r0, #31
 800580c:	fba0 010e 	umull	r0, r1, r0, lr
 8005810:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8005814:	fb0e 1107 	mla	r1, lr, r7, r1
 8005818:	f141 0100 	adc.w	r1, r1, #0
 800581c:	0448      	lsls	r0, r1, #17
 800581e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005822:	2700      	movs	r7, #0
 8005824:	fbc0 670a 	smlal	r6, r7, r0, sl
 8005828:	45d8      	cmp	r8, fp
 800582a:	ea4f 0041 	mov.w	r0, r1, lsl #1
 800582e:	ea4f 01a7 	mov.w	r1, r7, asr #2
 8005832:	4617      	mov	r7, r2
 8005834:	f301 010f 	ssat	r1, #16, r1
 8005838:	f824 1f02 	strh.w	r1, [r4, #2]!
 800583c:	d1c7      	bne.n	80057ce <D16_1CH_HTONS_VOL_HP+0x3e>
 800583e:	9901      	ldr	r1, [sp, #4]
 8005840:	f8c9 301c 	str.w	r3, [r9, #28]
 8005844:	9b00      	ldr	r3, [sp, #0]
 8005846:	f8c9 0010 	str.w	r0, [r9, #16]
 800584a:	2000      	movs	r0, #0
 800584c:	f8c9 5008 	str.w	r5, [r9, #8]
 8005850:	f8c9 100c 	str.w	r1, [r9, #12]
 8005854:	f8c9 2014 	str.w	r2, [r9, #20]
 8005858:	f8c9 3018 	str.w	r3, [r9, #24]
 800585c:	b003      	add	sp, #12
 800585e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005862:	463a      	mov	r2, r7
 8005864:	4621      	mov	r1, r4
 8005866:	e7eb      	b.n	8005840 <D16_1CH_HTONS_VOL_HP+0xb0>
 8005868:	00030001 	.word	0x00030001
 800586c:	00010003 	.word	0x00010003
 8005870:	20000000 	.word	0x20000000

08005874 <D24_1CH_HTONS_VOL_HP>:
 8005874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005878:	b089      	sub	sp, #36	; 0x24
 800587a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800587c:	6996      	ldr	r6, [r2, #24]
 800587e:	9304      	str	r3, [sp, #16]
 8005880:	6b17      	ldr	r7, [r2, #48]	; 0x30
 8005882:	9207      	str	r2, [sp, #28]
 8005884:	6915      	ldr	r5, [r2, #16]
 8005886:	6954      	ldr	r4, [r2, #20]
 8005888:	9606      	str	r6, [sp, #24]
 800588a:	6893      	ldr	r3, [r2, #8]
 800588c:	69d6      	ldr	r6, [r2, #28]
 800588e:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8005892:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8005896:	9a04      	ldr	r2, [sp, #16]
 8005898:	9705      	str	r7, [sp, #20]
 800589a:	2a00      	cmp	r2, #0
 800589c:	d07e      	beq.n	800599c <D24_1CH_HTONS_VOL_HP+0x128>
 800589e:	f1a1 0b02 	sub.w	fp, r1, #2
 80058a2:	2700      	movs	r7, #0
 80058a4:	46a8      	mov	r8, r5
 80058a6:	f8cd b004 	str.w	fp, [sp, #4]
 80058aa:	4655      	mov	r5, sl
 80058ac:	46e3      	mov	fp, ip
 80058ae:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 80059a8 <D24_1CH_HTONS_VOL_HP+0x134>
 80058b2:	46ba      	mov	sl, r7
 80058b4:	469c      	mov	ip, r3
 80058b6:	e055      	b.n	8005964 <D24_1CH_HTONS_VOL_HP+0xf0>
 80058b8:	7802      	ldrb	r2, [r0, #0]
 80058ba:	78c3      	ldrb	r3, [r0, #3]
 80058bc:	7841      	ldrb	r1, [r0, #1]
 80058be:	0212      	lsls	r2, r2, #8
 80058c0:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 80058c4:	440b      	add	r3, r1
 80058c6:	3002      	adds	r0, #2
 80058c8:	b2d9      	uxtb	r1, r3
 80058ca:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80058ce:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 80058d2:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 80058d6:	0c1b      	lsrs	r3, r3, #16
 80058d8:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 80058dc:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 80058e0:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 80058e4:	f3c7 0309 	ubfx	r3, r7, #0, #10
 80058e8:	f3c2 0709 	ubfx	r7, r2, #0, #10
 80058ec:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 80058f0:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 80058f4:	4a2a      	ldr	r2, [pc, #168]	; (80059a0 <D24_1CH_HTONS_VOL_HP+0x12c>)
 80058f6:	fb23 b102 	smlad	r1, r3, r2, fp
 80058fa:	4a2a      	ldr	r2, [pc, #168]	; (80059a4 <D24_1CH_HTONS_VOL_HP+0x130>)
 80058fc:	fb23 cb02 	smlad	fp, r3, r2, ip
 8005900:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 8005904:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8005908:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 800590c:	2201      	movs	r2, #1
 800590e:	fb23 f702 	smuad	r7, r3, r2
 8005912:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 8005916:	eb01 0208 	add.w	r2, r1, r8
 800591a:	1b12      	subs	r2, r2, r4
 800591c:	17d4      	asrs	r4, r2, #31
 800591e:	fba2 2305 	umull	r2, r3, r2, r5
 8005922:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8005926:	fb05 3304 	mla	r3, r5, r4, r3
 800592a:	f143 0300 	adc.w	r3, r3, #0
 800592e:	9c05      	ldr	r4, [sp, #20]
 8005930:	03da      	lsls	r2, r3, #15
 8005932:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005936:	f04f 0900 	mov.w	r9, #0
 800593a:	fbc4 8902 	smlal	r8, r9, r4, r2
 800593e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8005942:	9a01      	ldr	r2, [sp, #4]
 8005944:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8005948:	9b03      	ldr	r3, [sp, #12]
 800594a:	109b      	asrs	r3, r3, #2
 800594c:	f303 030f 	ssat	r3, #16, r3
 8005950:	f822 3f02 	strh.w	r3, [r2, #2]!
 8005954:	9b04      	ldr	r3, [sp, #16]
 8005956:	9201      	str	r2, [sp, #4]
 8005958:	f10a 0a01 	add.w	sl, sl, #1
 800595c:	459a      	cmp	sl, r3
 800595e:	44bc      	add	ip, r7
 8005960:	460c      	mov	r4, r1
 8005962:	d00b      	beq.n	800597c <D24_1CH_HTONS_VOL_HP+0x108>
 8005964:	f01a 0f01 	tst.w	sl, #1
 8005968:	d0a6      	beq.n	80058b8 <D24_1CH_HTONS_VOL_HP+0x44>
 800596a:	78c2      	ldrb	r2, [r0, #3]
 800596c:	7883      	ldrb	r3, [r0, #2]
 800596e:	f810 1b04 	ldrb.w	r1, [r0], #4
 8005972:	0212      	lsls	r2, r2, #8
 8005974:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8005978:	440b      	add	r3, r1
 800597a:	e7a5      	b.n	80058c8 <D24_1CH_HTONS_VOL_HP+0x54>
 800597c:	4663      	mov	r3, ip
 800597e:	4645      	mov	r5, r8
 8005980:	46dc      	mov	ip, fp
 8005982:	9807      	ldr	r0, [sp, #28]
 8005984:	6141      	str	r1, [r0, #20]
 8005986:	9906      	ldr	r1, [sp, #24]
 8005988:	6083      	str	r3, [r0, #8]
 800598a:	f8c0 c00c 	str.w	ip, [r0, #12]
 800598e:	61c6      	str	r6, [r0, #28]
 8005990:	6105      	str	r5, [r0, #16]
 8005992:	6181      	str	r1, [r0, #24]
 8005994:	2000      	movs	r0, #0
 8005996:	b009      	add	sp, #36	; 0x24
 8005998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800599c:	4621      	mov	r1, r4
 800599e:	e7f0      	b.n	8005982 <D24_1CH_HTONS_VOL_HP+0x10e>
 80059a0:	00030001 	.word	0x00030001
 80059a4:	00060007 	.word	0x00060007
 80059a8:	20000000 	.word	0x20000000

080059ac <D32_1CH_HTONS_VOL_HP>:
 80059ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b0:	4692      	mov	sl, r2
 80059b2:	b087      	sub	sp, #28
 80059b4:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80059b6:	f8da 3018 	ldr.w	r3, [sl, #24]
 80059ba:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 80059be:	9304      	str	r3, [sp, #16]
 80059c0:	f8da 4010 	ldr.w	r4, [sl, #16]
 80059c4:	f8da 8014 	ldr.w	r8, [sl, #20]
 80059c8:	f8da 601c 	ldr.w	r6, [sl, #28]
 80059cc:	f8da 3008 	ldr.w	r3, [sl, #8]
 80059d0:	f8da e00c 	ldr.w	lr, [sl, #12]
 80059d4:	9501      	str	r5, [sp, #4]
 80059d6:	f8da c020 	ldr.w	ip, [sl, #32]
 80059da:	2a00      	cmp	r2, #0
 80059dc:	d07b      	beq.n	8005ad6 <D32_1CH_HTONS_VOL_HP+0x12a>
 80059de:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80059e2:	4f3e      	ldr	r7, [pc, #248]	; (8005adc <D32_1CH_HTONS_VOL_HP+0x130>)
 80059e4:	f8cd c00c 	str.w	ip, [sp, #12]
 80059e8:	9202      	str	r2, [sp, #8]
 80059ea:	460d      	mov	r5, r1
 80059ec:	46a1      	mov	r9, r4
 80059ee:	4684      	mov	ip, r0
 80059f0:	f8cd a014 	str.w	sl, [sp, #20]
 80059f4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80059f8:	ba49      	rev16	r1, r1
 80059fa:	b2c8      	uxtb	r0, r1
 80059fc:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8005a00:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8005a04:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8005a08:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8005a0c:	0e09      	lsrs	r1, r1, #24
 8005a0e:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8005a12:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 8005a16:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8005a1a:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 8005a1e:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 8005a22:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 8005a26:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005a2a:	f3c6 0109 	ubfx	r1, r6, #0, #10
 8005a2e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005a32:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8005a36:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 8005a3a:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 8005a3e:	4a28      	ldr	r2, [pc, #160]	; (8005ae0 <D32_1CH_HTONS_VOL_HP+0x134>)
 8005a40:	fb20 e202 	smlad	r2, r0, r2, lr
 8005a44:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005a48:	fb2a 2101 	smlad	r1, sl, r1, r2
 8005a4c:	4a25      	ldr	r2, [pc, #148]	; (8005ae4 <D32_1CH_HTONS_VOL_HP+0x138>)
 8005a4e:	fb20 3302 	smlad	r3, r0, r2, r3
 8005a52:	4a25      	ldr	r2, [pc, #148]	; (8005ae8 <D32_1CH_HTONS_VOL_HP+0x13c>)
 8005a54:	fb2a 3e02 	smlad	lr, sl, r2, r3
 8005a58:	2301      	movs	r3, #1
 8005a5a:	fb20 f003 	smuad	r0, r0, r3
 8005a5e:	4b23      	ldr	r3, [pc, #140]	; (8005aec <D32_1CH_HTONS_VOL_HP+0x140>)
 8005a60:	fb2a 0303 	smlad	r3, sl, r3, r0
 8005a64:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 8005a68:	9c03      	ldr	r4, [sp, #12]
 8005a6a:	eb02 0009 	add.w	r0, r2, r9
 8005a6e:	eba0 0008 	sub.w	r0, r0, r8
 8005a72:	ea4f 7be0 	mov.w	fp, r0, asr #31
 8005a76:	fba0 0104 	umull	r0, r1, r0, r4
 8005a7a:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8005a7e:	fb04 110b 	mla	r1, r4, fp, r1
 8005a82:	f141 0100 	adc.w	r1, r1, #0
 8005a86:	9c01      	ldr	r4, [sp, #4]
 8005a88:	0388      	lsls	r0, r1, #14
 8005a8a:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005a8e:	f04f 0900 	mov.w	r9, #0
 8005a92:	fbc0 8904 	smlal	r8, r9, r0, r4
 8005a96:	ea4f 00a9 	mov.w	r0, r9, asr #2
 8005a9a:	ea4f 0941 	mov.w	r9, r1, lsl #1
 8005a9e:	f300 000f 	ssat	r0, #16, r0
 8005aa2:	9902      	ldr	r1, [sp, #8]
 8005aa4:	f825 0b02 	strh.w	r0, [r5], #2
 8005aa8:	428d      	cmp	r5, r1
 8005aaa:	4690      	mov	r8, r2
 8005aac:	d1a2      	bne.n	80059f4 <D32_1CH_HTONS_VOL_HP+0x48>
 8005aae:	f8dd a014 	ldr.w	sl, [sp, #20]
 8005ab2:	464c      	mov	r4, r9
 8005ab4:	f8ca 3008 	str.w	r3, [sl, #8]
 8005ab8:	9b04      	ldr	r3, [sp, #16]
 8005aba:	f8ca e00c 	str.w	lr, [sl, #12]
 8005abe:	2000      	movs	r0, #0
 8005ac0:	f8ca 601c 	str.w	r6, [sl, #28]
 8005ac4:	f8ca 4010 	str.w	r4, [sl, #16]
 8005ac8:	f8ca 2014 	str.w	r2, [sl, #20]
 8005acc:	f8ca 3018 	str.w	r3, [sl, #24]
 8005ad0:	b007      	add	sp, #28
 8005ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ad6:	4642      	mov	r2, r8
 8005ad8:	e7ec      	b.n	8005ab4 <D32_1CH_HTONS_VOL_HP+0x108>
 8005ada:	bf00      	nop
 8005adc:	20000000 	.word	0x20000000
 8005ae0:	00060003 	.word	0x00060003
 8005ae4:	000a000c 	.word	0x000a000c
 8005ae8:	000c000a 	.word	0x000c000a
 8005aec:	00030006 	.word	0x00030006

08005af0 <D48_1CH_HTONS_VOL_HP>:
 8005af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005af4:	4613      	mov	r3, r2
 8005af6:	461c      	mov	r4, r3
 8005af8:	b087      	sub	sp, #28
 8005afa:	4625      	mov	r5, r4
 8005afc:	4626      	mov	r6, r4
 8005afe:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 8005b00:	9205      	str	r2, [sp, #20]
 8005b02:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8005b04:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8005b08:	9501      	str	r5, [sp, #4]
 8005b0a:	4680      	mov	r8, r0
 8005b0c:	6a35      	ldr	r5, [r6, #32]
 8005b0e:	6918      	ldr	r0, [r3, #16]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	9304      	str	r3, [sp, #16]
 8005b14:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 8005b18:	68a3      	ldr	r3, [r4, #8]
 8005b1a:	9502      	str	r5, [sp, #8]
 8005b1c:	68e4      	ldr	r4, [r4, #12]
 8005b1e:	2a00      	cmp	r2, #0
 8005b20:	f000 808c 	beq.w	8005c3c <D48_1CH_HTONS_VOL_HP+0x14c>
 8005b24:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8005b28:	4d45      	ldr	r5, [pc, #276]	; (8005c40 <D48_1CH_HTONS_VOL_HP+0x150>)
 8005b2a:	9203      	str	r2, [sp, #12]
 8005b2c:	468c      	mov	ip, r1
 8005b2e:	e898 0044 	ldmia.w	r8, {r2, r6}
 8005b32:	f108 0806 	add.w	r8, r8, #6
 8005b36:	ba52      	rev16	r2, r2
 8005b38:	ba76      	rev16	r6, r6
 8005b3a:	b2d7      	uxtb	r7, r2
 8005b3c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8005b40:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 8005b44:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8005b48:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8005b4c:	0e12      	lsrs	r2, r2, #24
 8005b4e:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 8005b52:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 8005b56:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8005b5a:	fa5f fb86 	uxtb.w	fp, r6
 8005b5e:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8005b62:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 8005b66:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8005b6a:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 8005b6e:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 8005b72:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8005b76:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8005b7a:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8005b7e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005b82:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005b86:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 8005b8a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8005b8e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005b92:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005b96:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8005b9a:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 8005b9e:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 8005ba2:	4a28      	ldr	r2, [pc, #160]	; (8005c44 <D48_1CH_HTONS_VOL_HP+0x154>)
 8005ba4:	fb2a 4202 	smlad	r2, sl, r2, r4
 8005ba8:	4927      	ldr	r1, [pc, #156]	; (8005c48 <D48_1CH_HTONS_VOL_HP+0x158>)
 8005baa:	fb27 2201 	smlad	r2, r7, r1, r2
 8005bae:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005bb2:	fb26 2201 	smlad	r2, r6, r1, r2
 8005bb6:	4925      	ldr	r1, [pc, #148]	; (8005c4c <D48_1CH_HTONS_VOL_HP+0x15c>)
 8005bb8:	fb2a 3401 	smlad	r4, sl, r1, r3
 8005bbc:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 8005bc0:	fb27 4403 	smlad	r4, r7, r3, r4
 8005bc4:	4b22      	ldr	r3, [pc, #136]	; (8005c50 <D48_1CH_HTONS_VOL_HP+0x160>)
 8005bc6:	fb26 4403 	smlad	r4, r6, r3, r4
 8005bca:	2101      	movs	r1, #1
 8005bcc:	fb2a fa01 	smuad	sl, sl, r1
 8005bd0:	4b20      	ldr	r3, [pc, #128]	; (8005c54 <D48_1CH_HTONS_VOL_HP+0x164>)
 8005bd2:	fb27 a703 	smlad	r7, r7, r3, sl
 8005bd6:	4b20      	ldr	r3, [pc, #128]	; (8005c58 <D48_1CH_HTONS_VOL_HP+0x168>)
 8005bd8:	fb26 7303 	smlad	r3, r6, r3, r7
 8005bdc:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 8005be0:	9e02      	ldr	r6, [sp, #8]
 8005be2:	9f01      	ldr	r7, [sp, #4]
 8005be4:	4410      	add	r0, r2
 8005be6:	eba0 0009 	sub.w	r0, r0, r9
 8005bea:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 8005bee:	fba0 0106 	umull	r0, r1, r0, r6
 8005bf2:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8005bf6:	fb06 110a 	mla	r1, r6, sl, r1
 8005bfa:	f141 0100 	adc.w	r1, r1, #0
 8005bfe:	0308      	lsls	r0, r1, #12
 8005c00:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8005c04:	f04f 0a00 	mov.w	sl, #0
 8005c08:	fbc0 9a07 	smlal	r9, sl, r0, r7
 8005c0c:	4657      	mov	r7, sl
 8005c0e:	10b8      	asrs	r0, r7, #2
 8005c10:	f300 000f 	ssat	r0, #16, r0
 8005c14:	f82c 0b02 	strh.w	r0, [ip], #2
 8005c18:	0048      	lsls	r0, r1, #1
 8005c1a:	9903      	ldr	r1, [sp, #12]
 8005c1c:	458c      	cmp	ip, r1
 8005c1e:	4691      	mov	r9, r2
 8005c20:	d185      	bne.n	8005b2e <D48_1CH_HTONS_VOL_HP+0x3e>
 8005c22:	9d05      	ldr	r5, [sp, #20]
 8005c24:	616a      	str	r2, [r5, #20]
 8005c26:	9a04      	ldr	r2, [sp, #16]
 8005c28:	6128      	str	r0, [r5, #16]
 8005c2a:	2000      	movs	r0, #0
 8005c2c:	60ab      	str	r3, [r5, #8]
 8005c2e:	60ec      	str	r4, [r5, #12]
 8005c30:	f8c5 e01c 	str.w	lr, [r5, #28]
 8005c34:	61aa      	str	r2, [r5, #24]
 8005c36:	b007      	add	sp, #28
 8005c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c3c:	464a      	mov	r2, r9
 8005c3e:	e7f0      	b.n	8005c22 <D48_1CH_HTONS_VOL_HP+0x132>
 8005c40:	20000000 	.word	0x20000000
 8005c44:	000f000a 	.word	0x000f000a
 8005c48:	00060003 	.word	0x00060003
 8005c4c:	00150019 	.word	0x00150019
 8005c50:	00190015 	.word	0x00190015
 8005c54:	00030006 	.word	0x00030006
 8005c58:	000a000f 	.word	0x000a000f

08005c5c <D64_1CH_HTONS_VOL_HP>:
 8005c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c60:	b089      	sub	sp, #36	; 0x24
 8005c62:	4614      	mov	r4, r2
 8005c64:	9207      	str	r2, [sp, #28]
 8005c66:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8005c68:	f8d2 c010 	ldr.w	ip, [r2, #16]
 8005c6c:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8005c70:	6992      	ldr	r2, [r2, #24]
 8005c72:	9206      	str	r2, [sp, #24]
 8005c74:	68e2      	ldr	r2, [r4, #12]
 8005c76:	9201      	str	r2, [sp, #4]
 8005c78:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005c7a:	9203      	str	r2, [sp, #12]
 8005c7c:	6a22      	ldr	r2, [r4, #32]
 8005c7e:	69e5      	ldr	r5, [r4, #28]
 8005c80:	68a6      	ldr	r6, [r4, #8]
 8005c82:	9204      	str	r2, [sp, #16]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f000 80b0 	beq.w	8005dea <D64_1CH_HTONS_VOL_HP+0x18e>
 8005c8a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8005c8e:	4f58      	ldr	r7, [pc, #352]	; (8005df0 <D64_1CH_HTONS_VOL_HP+0x194>)
 8005c90:	9305      	str	r3, [sp, #20]
 8005c92:	9102      	str	r1, [sp, #8]
 8005c94:	f850 2b08 	ldr.w	r2, [r0], #8
 8005c98:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005c9c:	ba52      	rev16	r2, r2
 8005c9e:	fa93 f993 	rev16.w	r9, r3
 8005ca2:	b2d4      	uxtb	r4, r2
 8005ca4:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8005ca8:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 8005cac:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8005cb0:	9901      	ldr	r1, [sp, #4]
 8005cb2:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8005cb6:	0e12      	lsrs	r2, r2, #24
 8005cb8:	44ab      	add	fp, r5
 8005cba:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005cbe:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 8005cc2:	fa5f f289 	uxtb.w	r2, r9
 8005cc6:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 8005cca:	f3c9 2307 	ubfx	r3, r9, #8, #8
 8005cce:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 8005cd2:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8005cd6:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8005cda:	f3c9 4507 	ubfx	r5, r9, #16, #8
 8005cde:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 8005ce2:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8005ce6:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8005cea:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8005cee:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 8005cf2:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 8005cf6:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8005cfa:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 8005cfe:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8005d02:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8005d06:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8005d0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d0e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005d12:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 8005d16:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005d1a:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 8005d1e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005d22:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8005d26:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 8005d2a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005d2e:	ea4f 2599 	mov.w	r5, r9, lsr #10
 8005d32:	4b30      	ldr	r3, [pc, #192]	; (8005df4 <D64_1CH_HTONS_VOL_HP+0x198>)
 8005d34:	fb2b 1303 	smlad	r3, fp, r3, r1
 8005d38:	492f      	ldr	r1, [pc, #188]	; (8005df8 <D64_1CH_HTONS_VOL_HP+0x19c>)
 8005d3a:	fb24 3301 	smlad	r3, r4, r1, r3
 8005d3e:	492f      	ldr	r1, [pc, #188]	; (8005dfc <D64_1CH_HTONS_VOL_HP+0x1a0>)
 8005d40:	fb22 3301 	smlad	r3, r2, r1, r3
 8005d44:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8005d48:	fb2e 390a 	smlad	r9, lr, sl, r3
 8005d4c:	4b2c      	ldr	r3, [pc, #176]	; (8005e00 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 8005d4e:	fb2b 6603 	smlad	r6, fp, r3, r6
 8005d52:	fb2e 6613 	smladx	r6, lr, r3, r6
 8005d56:	4b2b      	ldr	r3, [pc, #172]	; (8005e04 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 8005d58:	fb24 6603 	smlad	r6, r4, r3, r6
 8005d5c:	fb22 6313 	smladx	r3, r2, r3, r6
 8005d60:	f04f 0a01 	mov.w	sl, #1
 8005d64:	9301      	str	r3, [sp, #4]
 8005d66:	fb2b fb0a 	smuad	fp, fp, sl
 8005d6a:	4b27      	ldr	r3, [pc, #156]	; (8005e08 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 8005d6c:	fb24 ba03 	smlad	sl, r4, r3, fp
 8005d70:	4b26      	ldr	r3, [pc, #152]	; (8005e0c <D64_1CH_HTONS_VOL_HP+0x1b0>)
 8005d72:	fb22 a203 	smlad	r2, r2, r3, sl
 8005d76:	4b26      	ldr	r3, [pc, #152]	; (8005e10 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 8005d78:	fb2e 2603 	smlad	r6, lr, r3, r2
 8005d7c:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 8005d80:	eb0a 020c 	add.w	r2, sl, ip
 8005d84:	9c04      	ldr	r4, [sp, #16]
 8005d86:	9903      	ldr	r1, [sp, #12]
 8005d88:	eba2 0208 	sub.w	r2, r2, r8
 8005d8c:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8005d90:	fba2 2304 	umull	r2, r3, r2, r4
 8005d94:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8005d98:	fb04 3309 	mla	r3, r4, r9, r3
 8005d9c:	f143 0300 	adc.w	r3, r3, #0
 8005da0:	02da      	lsls	r2, r3, #11
 8005da2:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005da6:	f04f 0900 	mov.w	r9, #0
 8005daa:	fbc1 8902 	smlal	r8, r9, r1, r2
 8005dae:	9902      	ldr	r1, [sp, #8]
 8005db0:	ea4f 02a9 	mov.w	r2, r9, asr #2
 8005db4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005db8:	f302 020f 	ssat	r2, #16, r2
 8005dbc:	9b05      	ldr	r3, [sp, #20]
 8005dbe:	f821 2b02 	strh.w	r2, [r1], #2
 8005dc2:	4299      	cmp	r1, r3
 8005dc4:	9102      	str	r1, [sp, #8]
 8005dc6:	46d0      	mov	r8, sl
 8005dc8:	f47f af64 	bne.w	8005c94 <D64_1CH_HTONS_VOL_HP+0x38>
 8005dcc:	9a07      	ldr	r2, [sp, #28]
 8005dce:	9901      	ldr	r1, [sp, #4]
 8005dd0:	60d1      	str	r1, [r2, #12]
 8005dd2:	9906      	ldr	r1, [sp, #24]
 8005dd4:	6096      	str	r6, [r2, #8]
 8005dd6:	2000      	movs	r0, #0
 8005dd8:	61d5      	str	r5, [r2, #28]
 8005dda:	f8c2 c010 	str.w	ip, [r2, #16]
 8005dde:	f8c2 a014 	str.w	sl, [r2, #20]
 8005de2:	6191      	str	r1, [r2, #24]
 8005de4:	b009      	add	sp, #36	; 0x24
 8005de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dea:	46c2      	mov	sl, r8
 8005dec:	4622      	mov	r2, r4
 8005dee:	e7ee      	b.n	8005dce <D64_1CH_HTONS_VOL_HP+0x172>
 8005df0:	20000000 	.word	0x20000000
 8005df4:	001c0015 	.word	0x001c0015
 8005df8:	000f000a 	.word	0x000f000a
 8005dfc:	00060003 	.word	0x00060003
 8005e00:	0024002a 	.word	0x0024002a
 8005e04:	002e0030 	.word	0x002e0030
 8005e08:	00030006 	.word	0x00030006
 8005e0c:	000a000f 	.word	0x000a000f
 8005e10:	0015001c 	.word	0x0015001c

08005e14 <D80_1CH_HTONS_VOL_HP>:
 8005e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e18:	4613      	mov	r3, r2
 8005e1a:	b089      	sub	sp, #36	; 0x24
 8005e1c:	4686      	mov	lr, r0
 8005e1e:	6918      	ldr	r0, [r3, #16]
 8005e20:	9000      	str	r0, [sp, #0]
 8005e22:	4618      	mov	r0, r3
 8005e24:	461c      	mov	r4, r3
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	9302      	str	r3, [sp, #8]
 8005e2a:	6983      	ldr	r3, [r0, #24]
 8005e2c:	9306      	str	r3, [sp, #24]
 8005e2e:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8005e32:	69c3      	ldr	r3, [r0, #28]
 8005e34:	68c0      	ldr	r0, [r0, #12]
 8005e36:	9207      	str	r2, [sp, #28]
 8005e38:	9001      	str	r0, [sp, #4]
 8005e3a:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8005e3c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005e3e:	9003      	str	r0, [sp, #12]
 8005e40:	6a20      	ldr	r0, [r4, #32]
 8005e42:	9004      	str	r0, [sp, #16]
 8005e44:	2a00      	cmp	r2, #0
 8005e46:	f000 80d2 	beq.w	8005fee <D80_1CH_HTONS_VOL_HP+0x1da>
 8005e4a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8005e4e:	4869      	ldr	r0, [pc, #420]	; (8005ff4 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 8005e50:	9205      	str	r2, [sp, #20]
 8005e52:	461c      	mov	r4, r3
 8005e54:	f8de 5000 	ldr.w	r5, [lr]
 8005e58:	f8de 2004 	ldr.w	r2, [lr, #4]
 8005e5c:	f8de 3008 	ldr.w	r3, [lr, #8]
 8005e60:	f10e 0e0a 	add.w	lr, lr, #10
 8005e64:	ba6d      	rev16	r5, r5
 8005e66:	ba52      	rev16	r2, r2
 8005e68:	fa93 fb93 	rev16.w	fp, r3
 8005e6c:	b2ee      	uxtb	r6, r5
 8005e6e:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8005e72:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8005e76:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005e7a:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8005e7e:	eb04 0a07 	add.w	sl, r4, r7
 8005e82:	0e2d      	lsrs	r5, r5, #24
 8005e84:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8005e88:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8005e8c:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 8005e90:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 8005e94:	b2d5      	uxtb	r5, r2
 8005e96:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8005e9a:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 8005e9e:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 8005ea2:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8005ea6:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8005eaa:	0e12      	lsrs	r2, r2, #24
 8005eac:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 8005eb0:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 8005eb4:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8005eb8:	fa5f f48b 	uxtb.w	r4, fp
 8005ebc:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8005ec0:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8005ec4:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8005ec8:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8005ecc:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 8005ed0:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8005ed4:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 8005ed8:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 8005edc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005ee0:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8005ee4:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8005ee8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005eec:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005ef0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005ef4:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 8005ef8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005efc:	f3cb 0609 	ubfx	r6, fp, #0, #10
 8005f00:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8005f04:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005f08:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8005f0c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8005f10:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 8005f14:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8005f18:	ea4f 249b 	mov.w	r4, fp, lsr #10
 8005f1c:	4d36      	ldr	r5, [pc, #216]	; (8005ff8 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 8005f1e:	9f01      	ldr	r7, [sp, #4]
 8005f20:	fb23 7505 	smlad	r5, r3, r5, r7
 8005f24:	4f35      	ldr	r7, [pc, #212]	; (8005ffc <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8005f26:	fb29 5507 	smlad	r5, r9, r7, r5
 8005f2a:	4f35      	ldr	r7, [pc, #212]	; (8006000 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8005f2c:	fb28 5507 	smlad	r5, r8, r7, r5
 8005f30:	4f34      	ldr	r7, [pc, #208]	; (8006004 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 8005f32:	fb22 5507 	smlad	r5, r2, r7, r5
 8005f36:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8005f3a:	fb26 5b0a 	smlad	fp, r6, sl, r5
 8005f3e:	4d32      	ldr	r5, [pc, #200]	; (8006008 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 8005f40:	fb23 cc05 	smlad	ip, r3, r5, ip
 8005f44:	4d31      	ldr	r5, [pc, #196]	; (800600c <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8005f46:	fb29 cc05 	smlad	ip, r9, r5, ip
 8005f4a:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 8005f4e:	fb28 c505 	smlad	r5, r8, r5, ip
 8005f52:	4f2f      	ldr	r7, [pc, #188]	; (8006010 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 8005f54:	fb22 5507 	smlad	r5, r2, r7, r5
 8005f58:	4f2e      	ldr	r7, [pc, #184]	; (8006014 <D80_1CH_HTONS_VOL_HP+0x200>)
 8005f5a:	fb26 5507 	smlad	r5, r6, r7, r5
 8005f5e:	f04f 0a01 	mov.w	sl, #1
 8005f62:	9501      	str	r5, [sp, #4]
 8005f64:	fb23 fa0a 	smuad	sl, r3, sl
 8005f68:	4b2b      	ldr	r3, [pc, #172]	; (8006018 <D80_1CH_HTONS_VOL_HP+0x204>)
 8005f6a:	fb29 a903 	smlad	r9, r9, r3, sl
 8005f6e:	4d2b      	ldr	r5, [pc, #172]	; (800601c <D80_1CH_HTONS_VOL_HP+0x208>)
 8005f70:	fb28 9805 	smlad	r8, r8, r5, r9
 8005f74:	4d2a      	ldr	r5, [pc, #168]	; (8006020 <D80_1CH_HTONS_VOL_HP+0x20c>)
 8005f76:	fb22 8205 	smlad	r2, r2, r5, r8
 8005f7a:	4b2a      	ldr	r3, [pc, #168]	; (8006024 <D80_1CH_HTONS_VOL_HP+0x210>)
 8005f7c:	fb26 2c03 	smlad	ip, r6, r3, r2
 8005f80:	9b00      	ldr	r3, [sp, #0]
 8005f82:	9d04      	ldr	r5, [sp, #16]
 8005f84:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 8005f88:	4453      	add	r3, sl
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	9b02      	ldr	r3, [sp, #8]
 8005f8e:	f8cd a008 	str.w	sl, [sp, #8]
 8005f92:	1ad2      	subs	r2, r2, r3
 8005f94:	17d7      	asrs	r7, r2, #31
 8005f96:	fba2 2305 	umull	r2, r3, r2, r5
 8005f9a:	fb05 3307 	mla	r3, r5, r7, r3
 8005f9e:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8005fa2:	f143 0300 	adc.w	r3, r3, #0
 8005fa6:	9d03      	ldr	r5, [sp, #12]
 8005fa8:	029a      	lsls	r2, r3, #10
 8005faa:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005fae:	2700      	movs	r7, #0
 8005fb0:	005b      	lsls	r3, r3, #1
 8005fb2:	fbc5 6702 	smlal	r6, r7, r5, r2
 8005fb6:	10ba      	asrs	r2, r7, #2
 8005fb8:	9300      	str	r3, [sp, #0]
 8005fba:	f302 020f 	ssat	r2, #16, r2
 8005fbe:	9b05      	ldr	r3, [sp, #20]
 8005fc0:	f821 2b02 	strh.w	r2, [r1], #2
 8005fc4:	4299      	cmp	r1, r3
 8005fc6:	f47f af45 	bne.w	8005e54 <D80_1CH_HTONS_VOL_HP+0x40>
 8005fca:	4623      	mov	r3, r4
 8005fcc:	9907      	ldr	r1, [sp, #28]
 8005fce:	9801      	ldr	r0, [sp, #4]
 8005fd0:	60c8      	str	r0, [r1, #12]
 8005fd2:	9a00      	ldr	r2, [sp, #0]
 8005fd4:	f8c1 c008 	str.w	ip, [r1, #8]
 8005fd8:	4608      	mov	r0, r1
 8005fda:	61cb      	str	r3, [r1, #28]
 8005fdc:	610a      	str	r2, [r1, #16]
 8005fde:	f8c1 a014 	str.w	sl, [r1, #20]
 8005fe2:	9906      	ldr	r1, [sp, #24]
 8005fe4:	6181      	str	r1, [r0, #24]
 8005fe6:	2000      	movs	r0, #0
 8005fe8:	b009      	add	sp, #36	; 0x24
 8005fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fee:	f8dd a008 	ldr.w	sl, [sp, #8]
 8005ff2:	e7eb      	b.n	8005fcc <D80_1CH_HTONS_VOL_HP+0x1b8>
 8005ff4:	20000000 	.word	0x20000000
 8005ff8:	002d0024 	.word	0x002d0024
 8005ffc:	001c0015 	.word	0x001c0015
 8006000:	000f000a 	.word	0x000f000a
 8006004:	00060003 	.word	0x00060003
 8006008:	0037003f 	.word	0x0037003f
 800600c:	00450049 	.word	0x00450049
 8006010:	00490045 	.word	0x00490045
 8006014:	003f0037 	.word	0x003f0037
 8006018:	00030006 	.word	0x00030006
 800601c:	000a000f 	.word	0x000a000f
 8006020:	0015001c 	.word	0x0015001c
 8006024:	0024002d 	.word	0x0024002d

08006028 <D128_1CH_HTONS_VOL_HP>:
 8006028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800602c:	b093      	sub	sp, #76	; 0x4c
 800602e:	4614      	mov	r4, r2
 8006030:	9211      	str	r2, [sp, #68]	; 0x44
 8006032:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8006034:	6912      	ldr	r2, [r2, #16]
 8006036:	9203      	str	r2, [sp, #12]
 8006038:	4622      	mov	r2, r4
 800603a:	4615      	mov	r5, r2
 800603c:	6964      	ldr	r4, [r4, #20]
 800603e:	9406      	str	r4, [sp, #24]
 8006040:	4614      	mov	r4, r2
 8006042:	6992      	ldr	r2, [r2, #24]
 8006044:	9210      	str	r2, [sp, #64]	; 0x40
 8006046:	68ea      	ldr	r2, [r5, #12]
 8006048:	9204      	str	r2, [sp, #16]
 800604a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800604c:	69e6      	ldr	r6, [r4, #28]
 800604e:	920d      	str	r2, [sp, #52]	; 0x34
 8006050:	68a4      	ldr	r4, [r4, #8]
 8006052:	6a2a      	ldr	r2, [r5, #32]
 8006054:	9405      	str	r4, [sp, #20]
 8006056:	920e      	str	r2, [sp, #56]	; 0x38
 8006058:	2b00      	cmp	r3, #0
 800605a:	f000 8145 	beq.w	80062e8 <D128_1CH_HTONS_VOL_HP+0x2c0>
 800605e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8006062:	930f      	str	r3, [sp, #60]	; 0x3c
 8006064:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 8006344 <D128_1CH_HTONS_VOL_HP+0x31c>
 8006068:	9107      	str	r1, [sp, #28]
 800606a:	f100 0310 	add.w	r3, r0, #16
 800606e:	4699      	mov	r9, r3
 8006070:	f1a9 0110 	sub.w	r1, r9, #16
 8006074:	c90e      	ldmia	r1, {r1, r2, r3}
 8006076:	f859 0c04 	ldr.w	r0, [r9, #-4]
 800607a:	ba49      	rev16	r1, r1
 800607c:	ba52      	rev16	r2, r2
 800607e:	ba5b      	rev16	r3, r3
 8006080:	fa90 fa90 	rev16.w	sl, r0
 8006084:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8006088:	b2cc      	uxtb	r4, r1
 800608a:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 800608e:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8006092:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8006096:	0e09      	lsrs	r1, r1, #24
 8006098:	4426      	add	r6, r4
 800609a:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800609e:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 80060a2:	b2d0      	uxtb	r0, r2
 80060a4:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 80060a8:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 80060ac:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80060b0:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 80060b4:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 80060b8:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 80060bc:	f3c2 4007 	ubfx	r0, r2, #16, #8
 80060c0:	0e12      	lsrs	r2, r2, #24
 80060c2:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 80060c6:	9701      	str	r7, [sp, #4]
 80060c8:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 80060cc:	4627      	mov	r7, r4
 80060ce:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 80060d2:	9702      	str	r7, [sp, #8]
 80060d4:	b2da      	uxtb	r2, r3
 80060d6:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 80060da:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 80060de:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 80060e2:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 80060e6:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 80060ea:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80060ee:	f3c3 4007 	ubfx	r0, r3, #16, #8
 80060f2:	0e1b      	lsrs	r3, r3, #24
 80060f4:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 80060f8:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 80060fc:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 8006100:	fa5f f38a 	uxtb.w	r3, sl
 8006104:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8006108:	960a      	str	r6, [sp, #40]	; 0x28
 800610a:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800610e:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 8006112:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8006116:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800611a:	950b      	str	r5, [sp, #44]	; 0x2c
 800611c:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8006120:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8006124:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8006128:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800612c:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 8006130:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8006134:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8006138:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800613c:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 8006140:	9308      	str	r3, [sp, #32]
 8006142:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8006146:	9b01      	ldr	r3, [sp, #4]
 8006148:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800614c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006150:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8006154:	9b02      	ldr	r3, [sp, #8]
 8006156:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800615a:	9302      	str	r3, [sp, #8]
 800615c:	9b08      	ldr	r3, [sp, #32]
 800615e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006162:	9308      	str	r3, [sp, #32]
 8006164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006166:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800616a:	950c      	str	r5, [sp, #48]	; 0x30
 800616c:	461d      	mov	r5, r3
 800616e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006170:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8006174:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006178:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800617c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8006180:	9301      	str	r3, [sp, #4]
 8006182:	9b02      	ldr	r3, [sp, #8]
 8006184:	9202      	str	r2, [sp, #8]
 8006186:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006188:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800618a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800618e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8006192:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8006196:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800619a:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800619e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80061a2:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 80061a6:	9b08      	ldr	r3, [sp, #32]
 80061a8:	9f01      	ldr	r7, [sp, #4]
 80061aa:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80061ae:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80061b2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80061b6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80061ba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80061be:	46be      	mov	lr, r7
 80061c0:	0a96      	lsrs	r6, r2, #10
 80061c2:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 80061c6:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 80061ca:	4f49      	ldr	r7, [pc, #292]	; (80062f0 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 80061cc:	9a04      	ldr	r2, [sp, #16]
 80061ce:	fb2e 2e07 	smlad	lr, lr, r7, r2
 80061d2:	4a48      	ldr	r2, [pc, #288]	; (80062f4 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 80061d4:	fb2a ee02 	smlad	lr, sl, r2, lr
 80061d8:	4a47      	ldr	r2, [pc, #284]	; (80062f8 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 80061da:	fb21 ee02 	smlad	lr, r1, r2, lr
 80061de:	4a47      	ldr	r2, [pc, #284]	; (80062fc <D128_1CH_HTONS_VOL_HP+0x2d4>)
 80061e0:	fb24 ee02 	smlad	lr, r4, r2, lr
 80061e4:	4a46      	ldr	r2, [pc, #280]	; (8006300 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 80061e6:	9f02      	ldr	r7, [sp, #8]
 80061e8:	fb27 ee02 	smlad	lr, r7, r2, lr
 80061ec:	4a45      	ldr	r2, [pc, #276]	; (8006304 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 80061ee:	fb20 ee02 	smlad	lr, r0, r2, lr
 80061f2:	4a45      	ldr	r2, [pc, #276]	; (8006308 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 80061f4:	fb23 e702 	smlad	r7, r3, r2, lr
 80061f8:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 80061fc:	fb25 7e0e 	smlad	lr, r5, lr, r7
 8006200:	9f01      	ldr	r7, [sp, #4]
 8006202:	4a42      	ldr	r2, [pc, #264]	; (800630c <D128_1CH_HTONS_VOL_HP+0x2e4>)
 8006204:	46bc      	mov	ip, r7
 8006206:	9f05      	ldr	r7, [sp, #20]
 8006208:	fb2c 7c02 	smlad	ip, ip, r2, r7
 800620c:	4a40      	ldr	r2, [pc, #256]	; (8006310 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 800620e:	fb2a cc02 	smlad	ip, sl, r2, ip
 8006212:	4f40      	ldr	r7, [pc, #256]	; (8006314 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 8006214:	fb21 cc07 	smlad	ip, r1, r7, ip
 8006218:	4f3f      	ldr	r7, [pc, #252]	; (8006318 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 800621a:	fb24 cc07 	smlad	ip, r4, r7, ip
 800621e:	4f3f      	ldr	r7, [pc, #252]	; (800631c <D128_1CH_HTONS_VOL_HP+0x2f4>)
 8006220:	9a02      	ldr	r2, [sp, #8]
 8006222:	fb22 cc07 	smlad	ip, r2, r7, ip
 8006226:	4f3e      	ldr	r7, [pc, #248]	; (8006320 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 8006228:	fb20 cc07 	smlad	ip, r0, r7, ip
 800622c:	4f3d      	ldr	r7, [pc, #244]	; (8006324 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 800622e:	fb23 c707 	smlad	r7, r3, r7, ip
 8006232:	f8df c114 	ldr.w	ip, [pc, #276]	; 8006348 <D128_1CH_HTONS_VOL_HP+0x320>
 8006236:	fb25 720c 	smlad	r2, r5, ip, r7
 800623a:	f04f 0b01 	mov.w	fp, #1
 800623e:	9204      	str	r2, [sp, #16]
 8006240:	9f01      	ldr	r7, [sp, #4]
 8006242:	fb27 fb0b 	smuad	fp, r7, fp
 8006246:	4f38      	ldr	r7, [pc, #224]	; (8006328 <D128_1CH_HTONS_VOL_HP+0x300>)
 8006248:	fb2a ba07 	smlad	sl, sl, r7, fp
 800624c:	4f37      	ldr	r7, [pc, #220]	; (800632c <D128_1CH_HTONS_VOL_HP+0x304>)
 800624e:	fb21 aa07 	smlad	sl, r1, r7, sl
 8006252:	4f37      	ldr	r7, [pc, #220]	; (8006330 <D128_1CH_HTONS_VOL_HP+0x308>)
 8006254:	fb24 aa07 	smlad	sl, r4, r7, sl
 8006258:	4f36      	ldr	r7, [pc, #216]	; (8006334 <D128_1CH_HTONS_VOL_HP+0x30c>)
 800625a:	9a02      	ldr	r2, [sp, #8]
 800625c:	fb22 a707 	smlad	r7, r2, r7, sl
 8006260:	4a35      	ldr	r2, [pc, #212]	; (8006338 <D128_1CH_HTONS_VOL_HP+0x310>)
 8006262:	fb20 7702 	smlad	r7, r0, r2, r7
 8006266:	4a35      	ldr	r2, [pc, #212]	; (800633c <D128_1CH_HTONS_VOL_HP+0x314>)
 8006268:	fb23 7702 	smlad	r7, r3, r2, r7
 800626c:	4b34      	ldr	r3, [pc, #208]	; (8006340 <D128_1CH_HTONS_VOL_HP+0x318>)
 800626e:	fb25 7303 	smlad	r3, r5, r3, r7
 8006272:	9305      	str	r3, [sp, #20]
 8006274:	9b03      	ldr	r3, [sp, #12]
 8006276:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8006278:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800627c:	4473      	add	r3, lr
 800627e:	461a      	mov	r2, r3
 8006280:	9b06      	ldr	r3, [sp, #24]
 8006282:	f8cd e018 	str.w	lr, [sp, #24]
 8006286:	1ad2      	subs	r2, r2, r3
 8006288:	17d1      	asrs	r1, r2, #31
 800628a:	fba2 2304 	umull	r2, r3, r2, r4
 800628e:	fb04 3301 	mla	r3, r4, r1, r3
 8006292:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8006296:	f143 0300 	adc.w	r3, r3, #0
 800629a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800629c:	021a      	lsls	r2, r3, #8
 800629e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80062a2:	2100      	movs	r1, #0
 80062a4:	fbc4 0102 	smlal	r0, r1, r4, r2
 80062a8:	108a      	asrs	r2, r1, #2
 80062aa:	9907      	ldr	r1, [sp, #28]
 80062ac:	f302 020f 	ssat	r2, #16, r2
 80062b0:	005b      	lsls	r3, r3, #1
 80062b2:	f821 2b02 	strh.w	r2, [r1], #2
 80062b6:	9303      	str	r3, [sp, #12]
 80062b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062ba:	9107      	str	r1, [sp, #28]
 80062bc:	4299      	cmp	r1, r3
 80062be:	f109 0910 	add.w	r9, r9, #16
 80062c2:	f47f aed5 	bne.w	8006070 <D128_1CH_HTONS_VOL_HP+0x48>
 80062c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80062c8:	9905      	ldr	r1, [sp, #20]
 80062ca:	6091      	str	r1, [r2, #8]
 80062cc:	9904      	ldr	r1, [sp, #16]
 80062ce:	60d1      	str	r1, [r2, #12]
 80062d0:	4613      	mov	r3, r2
 80062d2:	61d6      	str	r6, [r2, #28]
 80062d4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80062d6:	9a03      	ldr	r2, [sp, #12]
 80062d8:	611a      	str	r2, [r3, #16]
 80062da:	2000      	movs	r0, #0
 80062dc:	f8c3 e014 	str.w	lr, [r3, #20]
 80062e0:	6199      	str	r1, [r3, #24]
 80062e2:	b013      	add	sp, #76	; 0x4c
 80062e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062e8:	f8dd e018 	ldr.w	lr, [sp, #24]
 80062ec:	e7eb      	b.n	80062c6 <D128_1CH_HTONS_VOL_HP+0x29e>
 80062ee:	bf00      	nop
 80062f0:	00780069 	.word	0x00780069
 80062f4:	005b004e 	.word	0x005b004e
 80062f8:	00420037 	.word	0x00420037
 80062fc:	002d0024 	.word	0x002d0024
 8006300:	001c0015 	.word	0x001c0015
 8006304:	000f000a 	.word	0x000f000a
 8006308:	00060003 	.word	0x00060003
 800630c:	00880096 	.word	0x00880096
 8006310:	00a200ac 	.word	0x00a200ac
 8006314:	00b400ba 	.word	0x00b400ba
 8006318:	00be00c0 	.word	0x00be00c0
 800631c:	00c000be 	.word	0x00c000be
 8006320:	00ba00b4 	.word	0x00ba00b4
 8006324:	00ac00a2 	.word	0x00ac00a2
 8006328:	00030006 	.word	0x00030006
 800632c:	000a000f 	.word	0x000a000f
 8006330:	0015001c 	.word	0x0015001c
 8006334:	0024002d 	.word	0x0024002d
 8006338:	00370042 	.word	0x00370042
 800633c:	004e005b 	.word	0x004e005b
 8006340:	00690078 	.word	0x00690078
 8006344:	20000000 	.word	0x20000000
 8006348:	00960088 	.word	0x00960088

0800634c <PDM_Filter_Init>:
 800634c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800634e:	2240      	movs	r2, #64	; 0x40
 8006350:	4604      	mov	r4, r0
 8006352:	2100      	movs	r1, #0
 8006354:	300c      	adds	r0, #12
 8006356:	f000 f9f9 	bl	800674c <memset>
 800635a:	493b      	ldr	r1, [pc, #236]	; (8006448 <PDM_Filter_Init+0xfc>)
 800635c:	483b      	ldr	r0, [pc, #236]	; (800644c <PDM_Filter_Init+0x100>)
 800635e:	f000 f98d 	bl	800667c <CRC_Lock>
 8006362:	8822      	ldrh	r2, [r4, #0]
 8006364:	8963      	ldrh	r3, [r4, #10]
 8006366:	4938      	ldr	r1, [pc, #224]	; (8006448 <PDM_Filter_Init+0xfc>)
 8006368:	8925      	ldrh	r5, [r4, #8]
 800636a:	86a3      	strh	r3, [r4, #52]	; 0x34
 800636c:	2801      	cmp	r0, #1
 800636e:	f04f 0300 	mov.w	r3, #0
 8006372:	bf18      	it	ne
 8006374:	2100      	movne	r1, #0
 8006376:	2a01      	cmp	r2, #1
 8006378:	6461      	str	r1, [r4, #68]	; 0x44
 800637a:	86e5      	strh	r5, [r4, #54]	; 0x36
 800637c:	61a3      	str	r3, [r4, #24]
 800637e:	6123      	str	r3, [r4, #16]
 8006380:	6163      	str	r3, [r4, #20]
 8006382:	60e3      	str	r3, [r4, #12]
 8006384:	6263      	str	r3, [r4, #36]	; 0x24
 8006386:	61e3      	str	r3, [r4, #28]
 8006388:	6223      	str	r3, [r4, #32]
 800638a:	6423      	str	r3, [r4, #64]	; 0x40
 800638c:	d918      	bls.n	80063c0 <PDM_Filter_Init+0x74>
 800638e:	2003      	movs	r0, #3
 8006390:	2302      	movs	r3, #2
 8006392:	8862      	ldrh	r2, [r4, #2]
 8006394:	2a01      	cmp	r2, #1
 8006396:	d91d      	bls.n	80063d4 <PDM_Filter_Init+0x88>
 8006398:	2140      	movs	r1, #64	; 0x40
 800639a:	2300      	movs	r3, #0
 800639c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800639e:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 80063a2:	6862      	ldr	r2, [r4, #4]
 80063a4:	bf04      	itt	eq
 80063a6:	6421      	streq	r1, [r4, #64]	; 0x40
 80063a8:	460b      	moveq	r3, r1
 80063aa:	b11a      	cbz	r2, 80063b4 <PDM_Filter_Init+0x68>
 80063ac:	f043 0310 	orr.w	r3, r3, #16
 80063b0:	6423      	str	r3, [r4, #64]	; 0x40
 80063b2:	62e2      	str	r2, [r4, #44]	; 0x2c
 80063b4:	2200      	movs	r2, #0
 80063b6:	8722      	strh	r2, [r4, #56]	; 0x38
 80063b8:	b908      	cbnz	r0, 80063be <PDM_Filter_Init+0x72>
 80063ba:	3380      	adds	r3, #128	; 0x80
 80063bc:	6423      	str	r3, [r4, #64]	; 0x40
 80063be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063c0:	4d23      	ldr	r5, [pc, #140]	; (8006450 <PDM_Filter_Init+0x104>)
 80063c2:	d010      	beq.n	80063e6 <PDM_Filter_Init+0x9a>
 80063c4:	782a      	ldrb	r2, [r5, #0]
 80063c6:	2a01      	cmp	r2, #1
 80063c8:	d027      	beq.n	800641a <PDM_Filter_Init+0xce>
 80063ca:	8862      	ldrh	r2, [r4, #2]
 80063cc:	2a01      	cmp	r2, #1
 80063ce:	f04f 0001 	mov.w	r0, #1
 80063d2:	d8e1      	bhi.n	8006398 <PDM_Filter_Init+0x4c>
 80063d4:	d001      	beq.n	80063da <PDM_Filter_Init+0x8e>
 80063d6:	4618      	mov	r0, r3
 80063d8:	e7de      	b.n	8006398 <PDM_Filter_Init+0x4c>
 80063da:	2220      	movs	r2, #32
 80063dc:	4618      	mov	r0, r3
 80063de:	6422      	str	r2, [r4, #64]	; 0x40
 80063e0:	4613      	mov	r3, r2
 80063e2:	2160      	movs	r1, #96	; 0x60
 80063e4:	e7da      	b.n	800639c <PDM_Filter_Init+0x50>
 80063e6:	7829      	ldrb	r1, [r5, #0]
 80063e8:	2900      	cmp	r1, #0
 80063ea:	d1ee      	bne.n	80063ca <PDM_Filter_Init+0x7e>
 80063ec:	4919      	ldr	r1, [pc, #100]	; (8006454 <PDM_Filter_Init+0x108>)
 80063ee:	f8df e06c 	ldr.w	lr, [pc, #108]	; 800645c <PDM_Filter_Init+0x110>
 80063f2:	4f19      	ldr	r7, [pc, #100]	; (8006458 <PDM_Filter_Init+0x10c>)
 80063f4:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 80063f8:	684a      	ldr	r2, [r1, #4]
 80063fa:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 80063fe:	ea02 0007 	and.w	r0, r2, r7
 8006402:	4303      	orrs	r3, r0
 8006404:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8006408:	4413      	add	r3, r2
 800640a:	f841 3f04 	str.w	r3, [r1, #4]!
 800640e:	428e      	cmp	r6, r1
 8006410:	d1f2      	bne.n	80063f8 <PDM_Filter_Init+0xac>
 8006412:	2001      	movs	r0, #1
 8006414:	7028      	strb	r0, [r5, #0]
 8006416:	2300      	movs	r3, #0
 8006418:	e7bb      	b.n	8006392 <PDM_Filter_Init+0x46>
 800641a:	490e      	ldr	r1, [pc, #56]	; (8006454 <PDM_Filter_Init+0x108>)
 800641c:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800645c <PDM_Filter_Init+0x110>
 8006420:	4f0d      	ldr	r7, [pc, #52]	; (8006458 <PDM_Filter_Init+0x10c>)
 8006422:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 8006426:	684a      	ldr	r2, [r1, #4]
 8006428:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800642c:	ea02 0007 	and.w	r0, r2, r7
 8006430:	4303      	orrs	r3, r0
 8006432:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8006436:	4413      	add	r3, r2
 8006438:	f841 3f04 	str.w	r3, [r1, #4]!
 800643c:	428e      	cmp	r6, r1
 800643e:	d1f2      	bne.n	8006426 <PDM_Filter_Init+0xda>
 8006440:	2300      	movs	r3, #0
 8006442:	702b      	strb	r3, [r5, #0]
 8006444:	e7c1      	b.n	80063ca <PDM_Filter_Init+0x7e>
 8006446:	bf00      	nop
 8006448:	b5e8b5cd 	.word	0xb5e8b5cd
 800644c:	f407a5c2 	.word	0xf407a5c2
 8006450:	20000494 	.word	0x20000494
 8006454:	1ffffffc 	.word	0x1ffffffc
 8006458:	000ffc00 	.word	0x000ffc00
 800645c:	3ff00000 	.word	0x3ff00000

08006460 <PDM_Filter_setConfig>:
 8006460:	4b66      	ldr	r3, [pc, #408]	; (80065fc <PDM_Filter_setConfig+0x19c>)
 8006462:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006464:	429a      	cmp	r2, r3
 8006466:	d001      	beq.n	800646c <PDM_Filter_setConfig+0xc>
 8006468:	2004      	movs	r0, #4
 800646a:	4770      	bx	lr
 800646c:	b530      	push	{r4, r5, lr}
 800646e:	880a      	ldrh	r2, [r1, #0]
 8006470:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006472:	ed2d 8b04 	vpush	{d8-d9}
 8006476:	4604      	mov	r4, r0
 8006478:	460d      	mov	r5, r1
 800647a:	1e51      	subs	r1, r2, #1
 800647c:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 8006480:	2906      	cmp	r1, #6
 8006482:	b083      	sub	sp, #12
 8006484:	6420      	str	r0, [r4, #64]	; 0x40
 8006486:	d91a      	bls.n	80064be <PDM_Filter_setConfig+0x5e>
 8006488:	2008      	movs	r0, #8
 800648a:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800648e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8006492:	4299      	cmp	r1, r3
 8006494:	d07e      	beq.n	8006594 <PDM_Filter_setConfig+0x134>
 8006496:	f113 0f0c 	cmn.w	r3, #12
 800649a:	da2a      	bge.n	80064f2 <PDM_Filter_setConfig+0x92>
 800649c:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 80064a0:	3040      	adds	r0, #64	; 0x40
 80064a2:	80ab      	strh	r3, [r5, #4]
 80064a4:	8622      	strh	r2, [r4, #48]	; 0x30
 80064a6:	886b      	ldrh	r3, [r5, #2]
 80064a8:	8663      	strh	r3, [r4, #50]	; 0x32
 80064aa:	b920      	cbnz	r0, 80064b6 <PDM_Filter_setConfig+0x56>
 80064ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064b2:	6423      	str	r3, [r4, #64]	; 0x40
 80064b4:	2000      	movs	r0, #0
 80064b6:	b003      	add	sp, #12
 80064b8:	ecbd 8b04 	vpop	{d8-d9}
 80064bc:	bd30      	pop	{r4, r5, pc}
 80064be:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 80064c0:	4291      	cmp	r1, r2
 80064c2:	d06c      	beq.n	800659e <PDM_Filter_setConfig+0x13e>
 80064c4:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 80064c8:	f023 0301 	bic.w	r3, r3, #1
 80064cc:	4313      	orrs	r3, r2
 80064ce:	f003 0170 	and.w	r1, r3, #112	; 0x70
 80064d2:	6423      	str	r3, [r4, #64]	; 0x40
 80064d4:	2970      	cmp	r1, #112	; 0x70
 80064d6:	f003 030f 	and.w	r3, r3, #15
 80064da:	f103 33ff 	add.w	r3, r3, #4294967295
 80064de:	d066      	beq.n	80065ae <PDM_Filter_setConfig+0x14e>
 80064e0:	2b06      	cmp	r3, #6
 80064e2:	f200 8089 	bhi.w	80065f8 <PDM_Filter_setConfig+0x198>
 80064e6:	e8df f003 	tbb	[pc, r3]
 80064ea:	4f52      	.short	0x4f52
 80064ec:	3d43494c 	.word	0x3d43494c
 80064f0:	46          	.byte	0x46
 80064f1:	00          	.byte	0x00
 80064f2:	2b33      	cmp	r3, #51	; 0x33
 80064f4:	dc32      	bgt.n	800655c <PDM_Filter_setConfig+0xfc>
 80064f6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80064f8:	f002 020f 	and.w	r2, r2, #15
 80064fc:	3a01      	subs	r2, #1
 80064fe:	2a06      	cmp	r2, #6
 8006500:	d872      	bhi.n	80065e8 <PDM_Filter_setConfig+0x188>
 8006502:	493f      	ldr	r1, [pc, #252]	; (8006600 <PDM_Filter_setConfig+0x1a0>)
 8006504:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8006508:	ed92 9a00 	vldr	s18, [r2]
 800650c:	ed92 8a07 	vldr	s16, [r2, #28]
 8006510:	9001      	str	r0, [sp, #4]
 8006512:	ee07 3a90 	vmov	s15, r3
 8006516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800651a:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800651e:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 8006522:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8006526:	f000 f93d 	bl	80067a4 <powf>
 800652a:	eddf 0a36 	vldr	s1, [pc, #216]	; 8006604 <PDM_Filter_setConfig+0x1a4>
 800652e:	eef0 8a40 	vmov.f32	s17, s0
 8006532:	ee70 0ac9 	vsub.f32	s1, s1, s18
 8006536:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800653a:	f000 f933 	bl	80067a4 <powf>
 800653e:	ee28 8a28 	vmul.f32	s16, s16, s17
 8006542:	ee28 0a00 	vmul.f32	s0, s16, s0
 8006546:	f000 f909 	bl	800675c <roundf>
 800654a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800654e:	88ab      	ldrh	r3, [r5, #4]
 8006550:	882a      	ldrh	r2, [r5, #0]
 8006552:	9801      	ldr	r0, [sp, #4]
 8006554:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 8006558:	8723      	strh	r3, [r4, #56]	; 0x38
 800655a:	e7a3      	b.n	80064a4 <PDM_Filter_setConfig+0x44>
 800655c:	2333      	movs	r3, #51	; 0x33
 800655e:	3040      	adds	r0, #64	; 0x40
 8006560:	80ab      	strh	r3, [r5, #4]
 8006562:	e79f      	b.n	80064a4 <PDM_Filter_setConfig+0x44>
 8006564:	4b28      	ldr	r3, [pc, #160]	; (8006608 <PDM_Filter_setConfig+0x1a8>)
 8006566:	64a3      	str	r3, [r4, #72]	; 0x48
 8006568:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800656c:	2000      	movs	r0, #0
 800656e:	e792      	b.n	8006496 <PDM_Filter_setConfig+0x36>
 8006570:	4b26      	ldr	r3, [pc, #152]	; (800660c <PDM_Filter_setConfig+0x1ac>)
 8006572:	64a3      	str	r3, [r4, #72]	; 0x48
 8006574:	e7f8      	b.n	8006568 <PDM_Filter_setConfig+0x108>
 8006576:	4b26      	ldr	r3, [pc, #152]	; (8006610 <PDM_Filter_setConfig+0x1b0>)
 8006578:	64a3      	str	r3, [r4, #72]	; 0x48
 800657a:	e7f5      	b.n	8006568 <PDM_Filter_setConfig+0x108>
 800657c:	4b25      	ldr	r3, [pc, #148]	; (8006614 <PDM_Filter_setConfig+0x1b4>)
 800657e:	64a3      	str	r3, [r4, #72]	; 0x48
 8006580:	e7f2      	b.n	8006568 <PDM_Filter_setConfig+0x108>
 8006582:	4b25      	ldr	r3, [pc, #148]	; (8006618 <PDM_Filter_setConfig+0x1b8>)
 8006584:	64a3      	str	r3, [r4, #72]	; 0x48
 8006586:	e7ef      	b.n	8006568 <PDM_Filter_setConfig+0x108>
 8006588:	4b24      	ldr	r3, [pc, #144]	; (800661c <PDM_Filter_setConfig+0x1bc>)
 800658a:	64a3      	str	r3, [r4, #72]	; 0x48
 800658c:	e7ec      	b.n	8006568 <PDM_Filter_setConfig+0x108>
 800658e:	4b24      	ldr	r3, [pc, #144]	; (8006620 <PDM_Filter_setConfig+0x1c0>)
 8006590:	64a3      	str	r3, [r4, #72]	; 0x48
 8006592:	e7e9      	b.n	8006568 <PDM_Filter_setConfig+0x108>
 8006594:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8006596:	4291      	cmp	r1, r2
 8006598:	f47f af7d 	bne.w	8006496 <PDM_Filter_setConfig+0x36>
 800659c:	e783      	b.n	80064a6 <PDM_Filter_setConfig+0x46>
 800659e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80065a2:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 80065a6:	4299      	cmp	r1, r3
 80065a8:	d023      	beq.n	80065f2 <PDM_Filter_setConfig+0x192>
 80065aa:	2000      	movs	r0, #0
 80065ac:	e773      	b.n	8006496 <PDM_Filter_setConfig+0x36>
 80065ae:	2b06      	cmp	r3, #6
 80065b0:	d822      	bhi.n	80065f8 <PDM_Filter_setConfig+0x198>
 80065b2:	e8df f003 	tbb	[pc, r3]
 80065b6:	1316      	.short	0x1316
 80065b8:	070a0d10 	.word	0x070a0d10
 80065bc:	04          	.byte	0x04
 80065bd:	00          	.byte	0x00
 80065be:	4b19      	ldr	r3, [pc, #100]	; (8006624 <PDM_Filter_setConfig+0x1c4>)
 80065c0:	64a3      	str	r3, [r4, #72]	; 0x48
 80065c2:	e7d1      	b.n	8006568 <PDM_Filter_setConfig+0x108>
 80065c4:	4b18      	ldr	r3, [pc, #96]	; (8006628 <PDM_Filter_setConfig+0x1c8>)
 80065c6:	64a3      	str	r3, [r4, #72]	; 0x48
 80065c8:	e7ce      	b.n	8006568 <PDM_Filter_setConfig+0x108>
 80065ca:	4b18      	ldr	r3, [pc, #96]	; (800662c <PDM_Filter_setConfig+0x1cc>)
 80065cc:	64a3      	str	r3, [r4, #72]	; 0x48
 80065ce:	e7cb      	b.n	8006568 <PDM_Filter_setConfig+0x108>
 80065d0:	4b17      	ldr	r3, [pc, #92]	; (8006630 <PDM_Filter_setConfig+0x1d0>)
 80065d2:	64a3      	str	r3, [r4, #72]	; 0x48
 80065d4:	e7c8      	b.n	8006568 <PDM_Filter_setConfig+0x108>
 80065d6:	4b17      	ldr	r3, [pc, #92]	; (8006634 <PDM_Filter_setConfig+0x1d4>)
 80065d8:	64a3      	str	r3, [r4, #72]	; 0x48
 80065da:	e7c5      	b.n	8006568 <PDM_Filter_setConfig+0x108>
 80065dc:	4b16      	ldr	r3, [pc, #88]	; (8006638 <PDM_Filter_setConfig+0x1d8>)
 80065de:	64a3      	str	r3, [r4, #72]	; 0x48
 80065e0:	e7c2      	b.n	8006568 <PDM_Filter_setConfig+0x108>
 80065e2:	4b16      	ldr	r3, [pc, #88]	; (800663c <PDM_Filter_setConfig+0x1dc>)
 80065e4:	64a3      	str	r3, [r4, #72]	; 0x48
 80065e6:	e7bf      	b.n	8006568 <PDM_Filter_setConfig+0x108>
 80065e8:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8006640 <PDM_Filter_setConfig+0x1e0>
 80065ec:	eeb0 9a48 	vmov.f32	s18, s16
 80065f0:	e78e      	b.n	8006510 <PDM_Filter_setConfig+0xb0>
 80065f2:	886b      	ldrh	r3, [r5, #2]
 80065f4:	8663      	strh	r3, [r4, #50]	; 0x32
 80065f6:	e759      	b.n	80064ac <PDM_Filter_setConfig+0x4c>
 80065f8:	2000      	movs	r0, #0
 80065fa:	e746      	b.n	800648a <PDM_Filter_setConfig+0x2a>
 80065fc:	b5e8b5cd 	.word	0xb5e8b5cd
 8006600:	08006f68 	.word	0x08006f68
 8006604:	42000000 	.word	0x42000000
 8006608:	080049cd 	.word	0x080049cd
 800660c:	080048ad 	.word	0x080048ad
 8006610:	08004b5d 	.word	0x08004b5d
 8006614:	080053a1 	.word	0x080053a1
 8006618:	08005101 	.word	0x08005101
 800661c:	08004ee1 	.word	0x08004ee1
 8006620:	08004cf5 	.word	0x08004cf5
 8006624:	080059ad 	.word	0x080059ad
 8006628:	08005875 	.word	0x08005875
 800662c:	08005791 	.word	0x08005791
 8006630:	08006029 	.word	0x08006029
 8006634:	08005e15 	.word	0x08005e15
 8006638:	08005c5d 	.word	0x08005c5d
 800663c:	08005af1 	.word	0x08005af1
 8006640:	00000000 	.word	0x00000000

08006644 <PDM_Filter>:
 8006644:	b410      	push	{r4}
 8006646:	4b0c      	ldr	r3, [pc, #48]	; (8006678 <PDM_Filter+0x34>)
 8006648:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800664a:	429c      	cmp	r4, r3
 800664c:	d003      	beq.n	8006656 <PDM_Filter+0x12>
 800664e:	2004      	movs	r0, #4
 8006650:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006658:	05dc      	lsls	r4, r3, #23
 800665a:	d407      	bmi.n	800666c <PDM_Filter+0x28>
 800665c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006660:	bf14      	ite	ne
 8006662:	2020      	movne	r0, #32
 8006664:	2030      	moveq	r0, #48	; 0x30
 8006666:	f85d 4b04 	ldr.w	r4, [sp], #4
 800666a:	4770      	bx	lr
 800666c:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800666e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006672:	320c      	adds	r2, #12
 8006674:	4718      	bx	r3
 8006676:	bf00      	nop
 8006678:	b5e8b5cd 	.word	0xb5e8b5cd

0800667c <CRC_Lock>:
 800667c:	4a17      	ldr	r2, [pc, #92]	; (80066dc <CRC_Lock+0x60>)
 800667e:	6813      	ldr	r3, [r2, #0]
 8006680:	b410      	push	{r4}
 8006682:	f023 0301 	bic.w	r3, r3, #1
 8006686:	4c16      	ldr	r4, [pc, #88]	; (80066e0 <CRC_Lock+0x64>)
 8006688:	6013      	str	r3, [r2, #0]
 800668a:	6823      	ldr	r3, [r4, #0]
 800668c:	b933      	cbnz	r3, 800669c <CRC_Lock+0x20>
 800668e:	4b15      	ldr	r3, [pc, #84]	; (80066e4 <CRC_Lock+0x68>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006696:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800669a:	d00f      	beq.n	80066bc <CRC_Lock+0x40>
 800669c:	4a12      	ldr	r2, [pc, #72]	; (80066e8 <CRC_Lock+0x6c>)
 800669e:	2301      	movs	r3, #1
 80066a0:	6013      	str	r3, [r2, #0]
 80066a2:	6813      	ldr	r3, [r2, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1fc      	bne.n	80066a2 <CRC_Lock+0x26>
 80066a8:	4b10      	ldr	r3, [pc, #64]	; (80066ec <CRC_Lock+0x70>)
 80066aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066ae:	6018      	str	r0, [r3, #0]
 80066b0:	6818      	ldr	r0, [r3, #0]
 80066b2:	1a08      	subs	r0, r1, r0
 80066b4:	fab0 f080 	clz	r0, r0
 80066b8:	0940      	lsrs	r0, r0, #5
 80066ba:	4770      	bx	lr
 80066bc:	4a0c      	ldr	r2, [pc, #48]	; (80066f0 <CRC_Lock+0x74>)
 80066be:	2301      	movs	r3, #1
 80066c0:	6013      	str	r3, [r2, #0]
 80066c2:	6813      	ldr	r3, [r2, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1fc      	bne.n	80066c2 <CRC_Lock+0x46>
 80066c8:	4b0a      	ldr	r3, [pc, #40]	; (80066f4 <CRC_Lock+0x78>)
 80066ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066ce:	6018      	str	r0, [r3, #0]
 80066d0:	6818      	ldr	r0, [r3, #0]
 80066d2:	1a40      	subs	r0, r0, r1
 80066d4:	fab0 f080 	clz	r0, r0
 80066d8:	0940      	lsrs	r0, r0, #5
 80066da:	4770      	bx	lr
 80066dc:	e0002000 	.word	0xe0002000
 80066e0:	e0042000 	.word	0xe0042000
 80066e4:	5c001000 	.word	0x5c001000
 80066e8:	40023008 	.word	0x40023008
 80066ec:	40023000 	.word	0x40023000
 80066f0:	58024c08 	.word	0x58024c08
 80066f4:	58024c00 	.word	0x58024c00

080066f8 <__errno>:
 80066f8:	4b01      	ldr	r3, [pc, #4]	; (8006700 <__errno+0x8>)
 80066fa:	6818      	ldr	r0, [r3, #0]
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	20000414 	.word	0x20000414

08006704 <__libc_init_array>:
 8006704:	b570      	push	{r4, r5, r6, lr}
 8006706:	4d0d      	ldr	r5, [pc, #52]	; (800673c <__libc_init_array+0x38>)
 8006708:	4c0d      	ldr	r4, [pc, #52]	; (8006740 <__libc_init_array+0x3c>)
 800670a:	1b64      	subs	r4, r4, r5
 800670c:	10a4      	asrs	r4, r4, #2
 800670e:	2600      	movs	r6, #0
 8006710:	42a6      	cmp	r6, r4
 8006712:	d109      	bne.n	8006728 <__libc_init_array+0x24>
 8006714:	4d0b      	ldr	r5, [pc, #44]	; (8006744 <__libc_init_array+0x40>)
 8006716:	4c0c      	ldr	r4, [pc, #48]	; (8006748 <__libc_init_array+0x44>)
 8006718:	f000 fc16 	bl	8006f48 <_init>
 800671c:	1b64      	subs	r4, r4, r5
 800671e:	10a4      	asrs	r4, r4, #2
 8006720:	2600      	movs	r6, #0
 8006722:	42a6      	cmp	r6, r4
 8006724:	d105      	bne.n	8006732 <__libc_init_array+0x2e>
 8006726:	bd70      	pop	{r4, r5, r6, pc}
 8006728:	f855 3b04 	ldr.w	r3, [r5], #4
 800672c:	4798      	blx	r3
 800672e:	3601      	adds	r6, #1
 8006730:	e7ee      	b.n	8006710 <__libc_init_array+0xc>
 8006732:	f855 3b04 	ldr.w	r3, [r5], #4
 8006736:	4798      	blx	r3
 8006738:	3601      	adds	r6, #1
 800673a:	e7f2      	b.n	8006722 <__libc_init_array+0x1e>
 800673c:	08007d3c 	.word	0x08007d3c
 8006740:	08007d3c 	.word	0x08007d3c
 8006744:	08007d3c 	.word	0x08007d3c
 8006748:	08007d40 	.word	0x08007d40

0800674c <memset>:
 800674c:	4402      	add	r2, r0
 800674e:	4603      	mov	r3, r0
 8006750:	4293      	cmp	r3, r2
 8006752:	d100      	bne.n	8006756 <memset+0xa>
 8006754:	4770      	bx	lr
 8006756:	f803 1b01 	strb.w	r1, [r3], #1
 800675a:	e7f9      	b.n	8006750 <memset+0x4>

0800675c <roundf>:
 800675c:	ee10 0a10 	vmov	r0, s0
 8006760:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8006764:	3a7f      	subs	r2, #127	; 0x7f
 8006766:	2a16      	cmp	r2, #22
 8006768:	dc15      	bgt.n	8006796 <roundf+0x3a>
 800676a:	2a00      	cmp	r2, #0
 800676c:	da08      	bge.n	8006780 <roundf+0x24>
 800676e:	3201      	adds	r2, #1
 8006770:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8006774:	d101      	bne.n	800677a <roundf+0x1e>
 8006776:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800677a:	ee00 3a10 	vmov	s0, r3
 800677e:	4770      	bx	lr
 8006780:	4907      	ldr	r1, [pc, #28]	; (80067a0 <roundf+0x44>)
 8006782:	4111      	asrs	r1, r2
 8006784:	4208      	tst	r0, r1
 8006786:	d0fa      	beq.n	800677e <roundf+0x22>
 8006788:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800678c:	4113      	asrs	r3, r2
 800678e:	4403      	add	r3, r0
 8006790:	ea23 0301 	bic.w	r3, r3, r1
 8006794:	e7f1      	b.n	800677a <roundf+0x1e>
 8006796:	2a80      	cmp	r2, #128	; 0x80
 8006798:	d1f1      	bne.n	800677e <roundf+0x22>
 800679a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800679e:	4770      	bx	lr
 80067a0:	007fffff 	.word	0x007fffff

080067a4 <powf>:
 80067a4:	b508      	push	{r3, lr}
 80067a6:	ed2d 8b04 	vpush	{d8-d9}
 80067aa:	eeb0 8a60 	vmov.f32	s16, s1
 80067ae:	eeb0 9a40 	vmov.f32	s18, s0
 80067b2:	f000 f84f 	bl	8006854 <__ieee754_powf>
 80067b6:	eeb4 8a48 	vcmp.f32	s16, s16
 80067ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067be:	eef0 8a40 	vmov.f32	s17, s0
 80067c2:	d63e      	bvs.n	8006842 <powf+0x9e>
 80067c4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80067c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067cc:	d112      	bne.n	80067f4 <powf+0x50>
 80067ce:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80067d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067d6:	d039      	beq.n	800684c <powf+0xa8>
 80067d8:	eeb0 0a48 	vmov.f32	s0, s16
 80067dc:	f000 fb35 	bl	8006e4a <finitef>
 80067e0:	b378      	cbz	r0, 8006842 <powf+0x9e>
 80067e2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80067e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067ea:	d52a      	bpl.n	8006842 <powf+0x9e>
 80067ec:	f7ff ff84 	bl	80066f8 <__errno>
 80067f0:	2322      	movs	r3, #34	; 0x22
 80067f2:	e014      	b.n	800681e <powf+0x7a>
 80067f4:	f000 fb29 	bl	8006e4a <finitef>
 80067f8:	b998      	cbnz	r0, 8006822 <powf+0x7e>
 80067fa:	eeb0 0a49 	vmov.f32	s0, s18
 80067fe:	f000 fb24 	bl	8006e4a <finitef>
 8006802:	b170      	cbz	r0, 8006822 <powf+0x7e>
 8006804:	eeb0 0a48 	vmov.f32	s0, s16
 8006808:	f000 fb1f 	bl	8006e4a <finitef>
 800680c:	b148      	cbz	r0, 8006822 <powf+0x7e>
 800680e:	eef4 8a68 	vcmp.f32	s17, s17
 8006812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006816:	d7e9      	bvc.n	80067ec <powf+0x48>
 8006818:	f7ff ff6e 	bl	80066f8 <__errno>
 800681c:	2321      	movs	r3, #33	; 0x21
 800681e:	6003      	str	r3, [r0, #0]
 8006820:	e00f      	b.n	8006842 <powf+0x9e>
 8006822:	eef5 8a40 	vcmp.f32	s17, #0.0
 8006826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800682a:	d10a      	bne.n	8006842 <powf+0x9e>
 800682c:	eeb0 0a49 	vmov.f32	s0, s18
 8006830:	f000 fb0b 	bl	8006e4a <finitef>
 8006834:	b128      	cbz	r0, 8006842 <powf+0x9e>
 8006836:	eeb0 0a48 	vmov.f32	s0, s16
 800683a:	f000 fb06 	bl	8006e4a <finitef>
 800683e:	2800      	cmp	r0, #0
 8006840:	d1d4      	bne.n	80067ec <powf+0x48>
 8006842:	eeb0 0a68 	vmov.f32	s0, s17
 8006846:	ecbd 8b04 	vpop	{d8-d9}
 800684a:	bd08      	pop	{r3, pc}
 800684c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8006850:	e7f7      	b.n	8006842 <powf+0x9e>
	...

08006854 <__ieee754_powf>:
 8006854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006858:	ee10 4a90 	vmov	r4, s1
 800685c:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8006860:	ed2d 8b02 	vpush	{d8}
 8006864:	ee10 6a10 	vmov	r6, s0
 8006868:	eeb0 8a40 	vmov.f32	s16, s0
 800686c:	eef0 8a60 	vmov.f32	s17, s1
 8006870:	d10c      	bne.n	800688c <__ieee754_powf+0x38>
 8006872:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8006876:	0076      	lsls	r6, r6, #1
 8006878:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800687c:	f240 8296 	bls.w	8006dac <__ieee754_powf+0x558>
 8006880:	ee38 0a28 	vadd.f32	s0, s16, s17
 8006884:	ecbd 8b02 	vpop	{d8}
 8006888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800688c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8006890:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8006894:	dcf4      	bgt.n	8006880 <__ieee754_powf+0x2c>
 8006896:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800689a:	dd08      	ble.n	80068ae <__ieee754_powf+0x5a>
 800689c:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 80068a0:	d1ee      	bne.n	8006880 <__ieee754_powf+0x2c>
 80068a2:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 80068a6:	0064      	lsls	r4, r4, #1
 80068a8:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 80068ac:	e7e6      	b.n	800687c <__ieee754_powf+0x28>
 80068ae:	2e00      	cmp	r6, #0
 80068b0:	da20      	bge.n	80068f4 <__ieee754_powf+0xa0>
 80068b2:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 80068b6:	da2d      	bge.n	8006914 <__ieee754_powf+0xc0>
 80068b8:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80068bc:	f2c0 827f 	blt.w	8006dbe <__ieee754_powf+0x56a>
 80068c0:	ea4f 53e8 	mov.w	r3, r8, asr #23
 80068c4:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80068c8:	fa48 f703 	asr.w	r7, r8, r3
 80068cc:	fa07 f303 	lsl.w	r3, r7, r3
 80068d0:	4543      	cmp	r3, r8
 80068d2:	f040 8274 	bne.w	8006dbe <__ieee754_powf+0x56a>
 80068d6:	f007 0701 	and.w	r7, r7, #1
 80068da:	f1c7 0702 	rsb	r7, r7, #2
 80068de:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80068e2:	d11f      	bne.n	8006924 <__ieee754_powf+0xd0>
 80068e4:	2c00      	cmp	r4, #0
 80068e6:	f280 8267 	bge.w	8006db8 <__ieee754_powf+0x564>
 80068ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80068ee:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80068f2:	e7c7      	b.n	8006884 <__ieee754_powf+0x30>
 80068f4:	2700      	movs	r7, #0
 80068f6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80068fa:	d1f0      	bne.n	80068de <__ieee754_powf+0x8a>
 80068fc:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8006900:	f000 8254 	beq.w	8006dac <__ieee754_powf+0x558>
 8006904:	dd08      	ble.n	8006918 <__ieee754_powf+0xc4>
 8006906:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8006c10 <__ieee754_powf+0x3bc>
 800690a:	2c00      	cmp	r4, #0
 800690c:	bfa8      	it	ge
 800690e:	eeb0 0a68 	vmovge.f32	s0, s17
 8006912:	e7b7      	b.n	8006884 <__ieee754_powf+0x30>
 8006914:	2702      	movs	r7, #2
 8006916:	e7ee      	b.n	80068f6 <__ieee754_powf+0xa2>
 8006918:	2c00      	cmp	r4, #0
 800691a:	f280 824a 	bge.w	8006db2 <__ieee754_powf+0x55e>
 800691e:	eeb1 0a68 	vneg.f32	s0, s17
 8006922:	e7af      	b.n	8006884 <__ieee754_powf+0x30>
 8006924:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8006928:	d102      	bne.n	8006930 <__ieee754_powf+0xdc>
 800692a:	ee28 0a08 	vmul.f32	s0, s16, s16
 800692e:	e7a9      	b.n	8006884 <__ieee754_powf+0x30>
 8006930:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8006934:	eeb0 0a48 	vmov.f32	s0, s16
 8006938:	d107      	bne.n	800694a <__ieee754_powf+0xf6>
 800693a:	2e00      	cmp	r6, #0
 800693c:	db05      	blt.n	800694a <__ieee754_powf+0xf6>
 800693e:	ecbd 8b02 	vpop	{d8}
 8006942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006946:	f000 ba53 	b.w	8006df0 <__ieee754_sqrtf>
 800694a:	f000 fa77 	bl	8006e3c <fabsf>
 800694e:	b125      	cbz	r5, 800695a <__ieee754_powf+0x106>
 8006950:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8006954:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8006958:	d116      	bne.n	8006988 <__ieee754_powf+0x134>
 800695a:	2c00      	cmp	r4, #0
 800695c:	bfbc      	itt	lt
 800695e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8006962:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8006966:	2e00      	cmp	r6, #0
 8006968:	da8c      	bge.n	8006884 <__ieee754_powf+0x30>
 800696a:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800696e:	ea55 0307 	orrs.w	r3, r5, r7
 8006972:	d104      	bne.n	800697e <__ieee754_powf+0x12a>
 8006974:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006978:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800697c:	e782      	b.n	8006884 <__ieee754_powf+0x30>
 800697e:	2f01      	cmp	r7, #1
 8006980:	d180      	bne.n	8006884 <__ieee754_powf+0x30>
 8006982:	eeb1 0a40 	vneg.f32	s0, s0
 8006986:	e77d      	b.n	8006884 <__ieee754_powf+0x30>
 8006988:	0ff0      	lsrs	r0, r6, #31
 800698a:	3801      	subs	r0, #1
 800698c:	ea57 0300 	orrs.w	r3, r7, r0
 8006990:	d104      	bne.n	800699c <__ieee754_powf+0x148>
 8006992:	ee38 8a48 	vsub.f32	s16, s16, s16
 8006996:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800699a:	e773      	b.n	8006884 <__ieee754_powf+0x30>
 800699c:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 80069a0:	dd74      	ble.n	8006a8c <__ieee754_powf+0x238>
 80069a2:	4b9c      	ldr	r3, [pc, #624]	; (8006c14 <__ieee754_powf+0x3c0>)
 80069a4:	429d      	cmp	r5, r3
 80069a6:	dc08      	bgt.n	80069ba <__ieee754_powf+0x166>
 80069a8:	2c00      	cmp	r4, #0
 80069aa:	da0b      	bge.n	80069c4 <__ieee754_powf+0x170>
 80069ac:	2000      	movs	r0, #0
 80069ae:	ecbd 8b02 	vpop	{d8}
 80069b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069b6:	f000 ba3b 	b.w	8006e30 <__math_oflowf>
 80069ba:	4b97      	ldr	r3, [pc, #604]	; (8006c18 <__ieee754_powf+0x3c4>)
 80069bc:	429d      	cmp	r5, r3
 80069be:	dd08      	ble.n	80069d2 <__ieee754_powf+0x17e>
 80069c0:	2c00      	cmp	r4, #0
 80069c2:	dcf3      	bgt.n	80069ac <__ieee754_powf+0x158>
 80069c4:	2000      	movs	r0, #0
 80069c6:	ecbd 8b02 	vpop	{d8}
 80069ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069ce:	f000 ba29 	b.w	8006e24 <__math_uflowf>
 80069d2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80069d6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80069da:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006c1c <__ieee754_powf+0x3c8>
 80069de:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80069e2:	eee0 6a67 	vfms.f32	s13, s0, s15
 80069e6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80069ea:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80069ee:	ee20 7a00 	vmul.f32	s14, s0, s0
 80069f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069f6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8006c20 <__ieee754_powf+0x3cc>
 80069fa:	ee67 7a67 	vnmul.f32	s15, s14, s15
 80069fe:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8006c24 <__ieee754_powf+0x3d0>
 8006a02:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006a06:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8006c28 <__ieee754_powf+0x3d4>
 8006a0a:	eef0 6a67 	vmov.f32	s13, s15
 8006a0e:	eee0 6a07 	vfma.f32	s13, s0, s14
 8006a12:	ee16 3a90 	vmov	r3, s13
 8006a16:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006a1a:	f023 030f 	bic.w	r3, r3, #15
 8006a1e:	ee00 3a90 	vmov	s1, r3
 8006a22:	eee0 0a47 	vfms.f32	s1, s0, s14
 8006a26:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8006a2a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8006a2e:	f024 040f 	bic.w	r4, r4, #15
 8006a32:	ee07 4a10 	vmov	s14, r4
 8006a36:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8006a3a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8006a3e:	ee07 3a90 	vmov	s15, r3
 8006a42:	eee7 0a27 	vfma.f32	s1, s14, s15
 8006a46:	3f01      	subs	r7, #1
 8006a48:	ea57 0200 	orrs.w	r2, r7, r0
 8006a4c:	ee07 4a10 	vmov	s14, r4
 8006a50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006a54:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8006a58:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8006a5c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8006a60:	ee17 4a10 	vmov	r4, s14
 8006a64:	bf08      	it	eq
 8006a66:	eeb0 8a40 	vmoveq.f32	s16, s0
 8006a6a:	2c00      	cmp	r4, #0
 8006a6c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006a70:	f340 817e 	ble.w	8006d70 <__ieee754_powf+0x51c>
 8006a74:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8006a78:	f340 80f8 	ble.w	8006c6c <__ieee754_powf+0x418>
 8006a7c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a84:	bf4c      	ite	mi
 8006a86:	2001      	movmi	r0, #1
 8006a88:	2000      	movpl	r0, #0
 8006a8a:	e790      	b.n	80069ae <__ieee754_powf+0x15a>
 8006a8c:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8006a90:	bf01      	itttt	eq
 8006a92:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8006c2c <__ieee754_powf+0x3d8>
 8006a96:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8006a9a:	f06f 0217 	mvneq.w	r2, #23
 8006a9e:	ee17 5a90 	vmoveq	r5, s15
 8006aa2:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8006aa6:	bf18      	it	ne
 8006aa8:	2200      	movne	r2, #0
 8006aaa:	3b7f      	subs	r3, #127	; 0x7f
 8006aac:	4413      	add	r3, r2
 8006aae:	4a60      	ldr	r2, [pc, #384]	; (8006c30 <__ieee754_powf+0x3dc>)
 8006ab0:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8006ab4:	4295      	cmp	r5, r2
 8006ab6:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8006aba:	dd06      	ble.n	8006aca <__ieee754_powf+0x276>
 8006abc:	4a5d      	ldr	r2, [pc, #372]	; (8006c34 <__ieee754_powf+0x3e0>)
 8006abe:	4295      	cmp	r5, r2
 8006ac0:	f340 80a4 	ble.w	8006c0c <__ieee754_powf+0x3b8>
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8006aca:	2500      	movs	r5, #0
 8006acc:	4a5a      	ldr	r2, [pc, #360]	; (8006c38 <__ieee754_powf+0x3e4>)
 8006ace:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8006ad2:	ee07 1a90 	vmov	s15, r1
 8006ad6:	ed92 7a00 	vldr	s14, [r2]
 8006ada:	4a58      	ldr	r2, [pc, #352]	; (8006c3c <__ieee754_powf+0x3e8>)
 8006adc:	ee37 6a27 	vadd.f32	s12, s14, s15
 8006ae0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8006ae4:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8006ae8:	1049      	asrs	r1, r1, #1
 8006aea:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8006aee:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8006af2:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8006af6:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8006afa:	ee06 1a10 	vmov	s12, r1
 8006afe:	ee65 4a26 	vmul.f32	s9, s10, s13
 8006b02:	ee36 7a47 	vsub.f32	s14, s12, s14
 8006b06:	ee14 6a90 	vmov	r6, s9
 8006b0a:	4016      	ands	r6, r2
 8006b0c:	ee05 6a90 	vmov	s11, r6
 8006b10:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8006b14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b18:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8006c40 <__ieee754_powf+0x3ec>
 8006b1c:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8006b20:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8006b24:	ee25 6a26 	vmul.f32	s12, s10, s13
 8006b28:	eddf 6a46 	vldr	s13, [pc, #280]	; 8006c44 <__ieee754_powf+0x3f0>
 8006b2c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8006b30:	eddf 6a45 	vldr	s13, [pc, #276]	; 8006c48 <__ieee754_powf+0x3f4>
 8006b34:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006b38:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8006c1c <__ieee754_powf+0x3c8>
 8006b3c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006b40:	eddf 6a42 	vldr	s13, [pc, #264]	; 8006c4c <__ieee754_powf+0x3f8>
 8006b44:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006b48:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8006c50 <__ieee754_powf+0x3fc>
 8006b4c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006b50:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8006b54:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8006b58:	ee66 6a86 	vmul.f32	s13, s13, s12
 8006b5c:	eee5 6a07 	vfma.f32	s13, s10, s14
 8006b60:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8006b64:	eef0 7a45 	vmov.f32	s15, s10
 8006b68:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8006b6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b70:	ee17 1a90 	vmov	r1, s15
 8006b74:	4011      	ands	r1, r2
 8006b76:	ee07 1a90 	vmov	s15, r1
 8006b7a:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8006b7e:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8006b82:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006b86:	ee27 7a24 	vmul.f32	s14, s14, s9
 8006b8a:	eea6 7a27 	vfma.f32	s14, s12, s15
 8006b8e:	eeb0 6a47 	vmov.f32	s12, s14
 8006b92:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8006b96:	ee16 1a10 	vmov	r1, s12
 8006b9a:	4011      	ands	r1, r2
 8006b9c:	ee06 1a90 	vmov	s13, r1
 8006ba0:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8006ba4:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8006c54 <__ieee754_powf+0x400>
 8006ba8:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8006c58 <__ieee754_powf+0x404>
 8006bac:	ee37 7a66 	vsub.f32	s14, s14, s13
 8006bb0:	ee06 1a10 	vmov	s12, r1
 8006bb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006bb8:	eddf 7a28 	vldr	s15, [pc, #160]	; 8006c5c <__ieee754_powf+0x408>
 8006bbc:	4928      	ldr	r1, [pc, #160]	; (8006c60 <__ieee754_powf+0x40c>)
 8006bbe:	eea6 7a27 	vfma.f32	s14, s12, s15
 8006bc2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8006bc6:	edd1 7a00 	vldr	s15, [r1]
 8006bca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006bce:	ee07 3a90 	vmov	s15, r3
 8006bd2:	4b24      	ldr	r3, [pc, #144]	; (8006c64 <__ieee754_powf+0x410>)
 8006bd4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006bd8:	eef0 7a47 	vmov.f32	s15, s14
 8006bdc:	eee6 7a25 	vfma.f32	s15, s12, s11
 8006be0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8006be4:	edd5 0a00 	vldr	s1, [r5]
 8006be8:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8006bec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bf0:	ee17 3a90 	vmov	r3, s15
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	ee07 3a90 	vmov	s15, r3
 8006bfa:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8006bfe:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8006c02:	eee6 6a65 	vfms.f32	s13, s12, s11
 8006c06:	ee77 7a66 	vsub.f32	s15, s14, s13
 8006c0a:	e70e      	b.n	8006a2a <__ieee754_powf+0x1d6>
 8006c0c:	2501      	movs	r5, #1
 8006c0e:	e75d      	b.n	8006acc <__ieee754_powf+0x278>
 8006c10:	00000000 	.word	0x00000000
 8006c14:	3f7ffff3 	.word	0x3f7ffff3
 8006c18:	3f800007 	.word	0x3f800007
 8006c1c:	3eaaaaab 	.word	0x3eaaaaab
 8006c20:	3fb8aa3b 	.word	0x3fb8aa3b
 8006c24:	36eca570 	.word	0x36eca570
 8006c28:	3fb8aa00 	.word	0x3fb8aa00
 8006c2c:	4b800000 	.word	0x4b800000
 8006c30:	001cc471 	.word	0x001cc471
 8006c34:	005db3d6 	.word	0x005db3d6
 8006c38:	08007d1c 	.word	0x08007d1c
 8006c3c:	fffff000 	.word	0xfffff000
 8006c40:	3e6c3255 	.word	0x3e6c3255
 8006c44:	3e53f142 	.word	0x3e53f142
 8006c48:	3e8ba305 	.word	0x3e8ba305
 8006c4c:	3edb6db7 	.word	0x3edb6db7
 8006c50:	3f19999a 	.word	0x3f19999a
 8006c54:	3f76384f 	.word	0x3f76384f
 8006c58:	3f763800 	.word	0x3f763800
 8006c5c:	369dc3a0 	.word	0x369dc3a0
 8006c60:	08007d2c 	.word	0x08007d2c
 8006c64:	08007d24 	.word	0x08007d24
 8006c68:	3338aa3c 	.word	0x3338aa3c
 8006c6c:	f040 8095 	bne.w	8006d9a <__ieee754_powf+0x546>
 8006c70:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8006c68 <__ieee754_powf+0x414>
 8006c74:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006c78:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8006c7c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8006c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c84:	f73f aefa 	bgt.w	8006a7c <__ieee754_powf+0x228>
 8006c88:	15db      	asrs	r3, r3, #23
 8006c8a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8006c8e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006c92:	4103      	asrs	r3, r0
 8006c94:	4423      	add	r3, r4
 8006c96:	494b      	ldr	r1, [pc, #300]	; (8006dc4 <__ieee754_powf+0x570>)
 8006c98:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006c9c:	3a7f      	subs	r2, #127	; 0x7f
 8006c9e:	4111      	asrs	r1, r2
 8006ca0:	ea23 0101 	bic.w	r1, r3, r1
 8006ca4:	ee07 1a10 	vmov	s14, r1
 8006ca8:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8006cac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006cb0:	f1c2 0217 	rsb	r2, r2, #23
 8006cb4:	4110      	asrs	r0, r2
 8006cb6:	2c00      	cmp	r4, #0
 8006cb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006cbc:	bfb8      	it	lt
 8006cbe:	4240      	neglt	r0, r0
 8006cc0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8006cc4:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8006dc8 <__ieee754_powf+0x574>
 8006cc8:	eddf 6a40 	vldr	s13, [pc, #256]	; 8006dcc <__ieee754_powf+0x578>
 8006ccc:	ee17 3a10 	vmov	r3, s14
 8006cd0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006cd4:	f023 030f 	bic.w	r3, r3, #15
 8006cd8:	ee07 3a10 	vmov	s14, r3
 8006cdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ce0:	ee27 0a00 	vmul.f32	s0, s14, s0
 8006ce4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8006ce8:	eddf 7a39 	vldr	s15, [pc, #228]	; 8006dd0 <__ieee754_powf+0x57c>
 8006cec:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8006cf0:	eef0 7a40 	vmov.f32	s15, s0
 8006cf4:	eee7 7a26 	vfma.f32	s15, s14, s13
 8006cf8:	eeb0 6a67 	vmov.f32	s12, s15
 8006cfc:	eea7 6a66 	vfms.f32	s12, s14, s13
 8006d00:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006d04:	ee30 0a46 	vsub.f32	s0, s0, s12
 8006d08:	eddf 6a32 	vldr	s13, [pc, #200]	; 8006dd4 <__ieee754_powf+0x580>
 8006d0c:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8006dd8 <__ieee754_powf+0x584>
 8006d10:	eee7 6a06 	vfma.f32	s13, s14, s12
 8006d14:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8006ddc <__ieee754_powf+0x588>
 8006d18:	eea6 6a87 	vfma.f32	s12, s13, s14
 8006d1c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8006de0 <__ieee754_powf+0x58c>
 8006d20:	eee6 6a07 	vfma.f32	s13, s12, s14
 8006d24:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8006de4 <__ieee754_powf+0x590>
 8006d28:	eea6 6a87 	vfma.f32	s12, s13, s14
 8006d2c:	eef0 6a67 	vmov.f32	s13, s15
 8006d30:	eee6 6a47 	vfms.f32	s13, s12, s14
 8006d34:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006d38:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8006d3c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8006d40:	eea7 0a80 	vfma.f32	s0, s15, s0
 8006d44:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8006d48:	ee37 0a40 	vsub.f32	s0, s14, s0
 8006d4c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8006d50:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006d54:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006d58:	ee10 3a10 	vmov	r3, s0
 8006d5c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8006d60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d64:	da1f      	bge.n	8006da6 <__ieee754_powf+0x552>
 8006d66:	f000 f87d 	bl	8006e64 <scalbnf>
 8006d6a:	ee20 0a08 	vmul.f32	s0, s0, s16
 8006d6e:	e589      	b.n	8006884 <__ieee754_powf+0x30>
 8006d70:	4a1d      	ldr	r2, [pc, #116]	; (8006de8 <__ieee754_powf+0x594>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	dd07      	ble.n	8006d86 <__ieee754_powf+0x532>
 8006d76:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d7e:	bf4c      	ite	mi
 8006d80:	2001      	movmi	r0, #1
 8006d82:	2000      	movpl	r0, #0
 8006d84:	e61f      	b.n	80069c6 <__ieee754_powf+0x172>
 8006d86:	d108      	bne.n	8006d9a <__ieee754_powf+0x546>
 8006d88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006d8c:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8006d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d94:	f6ff af78 	blt.w	8006c88 <__ieee754_powf+0x434>
 8006d98:	e7ed      	b.n	8006d76 <__ieee754_powf+0x522>
 8006d9a:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8006d9e:	f73f af73 	bgt.w	8006c88 <__ieee754_powf+0x434>
 8006da2:	2000      	movs	r0, #0
 8006da4:	e78c      	b.n	8006cc0 <__ieee754_powf+0x46c>
 8006da6:	ee00 3a10 	vmov	s0, r3
 8006daa:	e7de      	b.n	8006d6a <__ieee754_powf+0x516>
 8006dac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006db0:	e568      	b.n	8006884 <__ieee754_powf+0x30>
 8006db2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8006dec <__ieee754_powf+0x598>
 8006db6:	e565      	b.n	8006884 <__ieee754_powf+0x30>
 8006db8:	eeb0 0a48 	vmov.f32	s0, s16
 8006dbc:	e562      	b.n	8006884 <__ieee754_powf+0x30>
 8006dbe:	2700      	movs	r7, #0
 8006dc0:	e58d      	b.n	80068de <__ieee754_powf+0x8a>
 8006dc2:	bf00      	nop
 8006dc4:	007fffff 	.word	0x007fffff
 8006dc8:	35bfbe8c 	.word	0x35bfbe8c
 8006dcc:	3f317200 	.word	0x3f317200
 8006dd0:	3f317218 	.word	0x3f317218
 8006dd4:	b5ddea0e 	.word	0xb5ddea0e
 8006dd8:	3331bb4c 	.word	0x3331bb4c
 8006ddc:	388ab355 	.word	0x388ab355
 8006de0:	bb360b61 	.word	0xbb360b61
 8006de4:	3e2aaaab 	.word	0x3e2aaaab
 8006de8:	43160000 	.word	0x43160000
 8006dec:	00000000 	.word	0x00000000

08006df0 <__ieee754_sqrtf>:
 8006df0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006df4:	4770      	bx	lr

08006df6 <with_errnof>:
 8006df6:	b513      	push	{r0, r1, r4, lr}
 8006df8:	4604      	mov	r4, r0
 8006dfa:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006dfe:	f7ff fc7b 	bl	80066f8 <__errno>
 8006e02:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006e06:	6004      	str	r4, [r0, #0]
 8006e08:	b002      	add	sp, #8
 8006e0a:	bd10      	pop	{r4, pc}

08006e0c <xflowf>:
 8006e0c:	b130      	cbz	r0, 8006e1c <xflowf+0x10>
 8006e0e:	eef1 7a40 	vneg.f32	s15, s0
 8006e12:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006e16:	2022      	movs	r0, #34	; 0x22
 8006e18:	f7ff bfed 	b.w	8006df6 <with_errnof>
 8006e1c:	eef0 7a40 	vmov.f32	s15, s0
 8006e20:	e7f7      	b.n	8006e12 <xflowf+0x6>
	...

08006e24 <__math_uflowf>:
 8006e24:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006e2c <__math_uflowf+0x8>
 8006e28:	f7ff bff0 	b.w	8006e0c <xflowf>
 8006e2c:	10000000 	.word	0x10000000

08006e30 <__math_oflowf>:
 8006e30:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006e38 <__math_oflowf+0x8>
 8006e34:	f7ff bfea 	b.w	8006e0c <xflowf>
 8006e38:	70000000 	.word	0x70000000

08006e3c <fabsf>:
 8006e3c:	ee10 3a10 	vmov	r3, s0
 8006e40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e44:	ee00 3a10 	vmov	s0, r3
 8006e48:	4770      	bx	lr

08006e4a <finitef>:
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006e50:	9801      	ldr	r0, [sp, #4]
 8006e52:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006e56:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8006e5a:	bfac      	ite	ge
 8006e5c:	2000      	movge	r0, #0
 8006e5e:	2001      	movlt	r0, #1
 8006e60:	b002      	add	sp, #8
 8006e62:	4770      	bx	lr

08006e64 <scalbnf>:
 8006e64:	ee10 3a10 	vmov	r3, s0
 8006e68:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8006e6c:	d025      	beq.n	8006eba <scalbnf+0x56>
 8006e6e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8006e72:	d302      	bcc.n	8006e7a <scalbnf+0x16>
 8006e74:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006e78:	4770      	bx	lr
 8006e7a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8006e7e:	d122      	bne.n	8006ec6 <scalbnf+0x62>
 8006e80:	4b2a      	ldr	r3, [pc, #168]	; (8006f2c <scalbnf+0xc8>)
 8006e82:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8006f30 <scalbnf+0xcc>
 8006e86:	4298      	cmp	r0, r3
 8006e88:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006e8c:	db16      	blt.n	8006ebc <scalbnf+0x58>
 8006e8e:	ee10 3a10 	vmov	r3, s0
 8006e92:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006e96:	3a19      	subs	r2, #25
 8006e98:	4402      	add	r2, r0
 8006e9a:	2afe      	cmp	r2, #254	; 0xfe
 8006e9c:	dd15      	ble.n	8006eca <scalbnf+0x66>
 8006e9e:	ee10 3a10 	vmov	r3, s0
 8006ea2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8006f34 <scalbnf+0xd0>
 8006ea6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8006f38 <scalbnf+0xd4>
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	eeb0 7a67 	vmov.f32	s14, s15
 8006eb0:	bfb8      	it	lt
 8006eb2:	eef0 7a66 	vmovlt.f32	s15, s13
 8006eb6:	ee27 0a27 	vmul.f32	s0, s14, s15
 8006eba:	4770      	bx	lr
 8006ebc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8006f3c <scalbnf+0xd8>
 8006ec0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006ec4:	4770      	bx	lr
 8006ec6:	0dd2      	lsrs	r2, r2, #23
 8006ec8:	e7e6      	b.n	8006e98 <scalbnf+0x34>
 8006eca:	2a00      	cmp	r2, #0
 8006ecc:	dd06      	ble.n	8006edc <scalbnf+0x78>
 8006ece:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006ed2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8006ed6:	ee00 3a10 	vmov	s0, r3
 8006eda:	4770      	bx	lr
 8006edc:	f112 0f16 	cmn.w	r2, #22
 8006ee0:	da1a      	bge.n	8006f18 <scalbnf+0xb4>
 8006ee2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006ee6:	4298      	cmp	r0, r3
 8006ee8:	ee10 3a10 	vmov	r3, s0
 8006eec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ef0:	dd0a      	ble.n	8006f08 <scalbnf+0xa4>
 8006ef2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8006f34 <scalbnf+0xd0>
 8006ef6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8006f38 <scalbnf+0xd4>
 8006efa:	eef0 7a40 	vmov.f32	s15, s0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	bf18      	it	ne
 8006f02:	eeb0 0a47 	vmovne.f32	s0, s14
 8006f06:	e7db      	b.n	8006ec0 <scalbnf+0x5c>
 8006f08:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8006f3c <scalbnf+0xd8>
 8006f0c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006f40 <scalbnf+0xdc>
 8006f10:	eef0 7a40 	vmov.f32	s15, s0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	e7f3      	b.n	8006f00 <scalbnf+0x9c>
 8006f18:	3219      	adds	r2, #25
 8006f1a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006f1e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8006f22:	eddf 7a08 	vldr	s15, [pc, #32]	; 8006f44 <scalbnf+0xe0>
 8006f26:	ee07 3a10 	vmov	s14, r3
 8006f2a:	e7c4      	b.n	8006eb6 <scalbnf+0x52>
 8006f2c:	ffff3cb0 	.word	0xffff3cb0
 8006f30:	4c000000 	.word	0x4c000000
 8006f34:	7149f2ca 	.word	0x7149f2ca
 8006f38:	f149f2ca 	.word	0xf149f2ca
 8006f3c:	0da24260 	.word	0x0da24260
 8006f40:	8da24260 	.word	0x8da24260
 8006f44:	33000000 	.word	0x33000000

08006f48 <_init>:
 8006f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f4a:	bf00      	nop
 8006f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f4e:	bc08      	pop	{r3}
 8006f50:	469e      	mov	lr, r3
 8006f52:	4770      	bx	lr

08006f54 <_fini>:
 8006f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f56:	bf00      	nop
 8006f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f5a:	bc08      	pop	{r3}
 8006f5c:	469e      	mov	lr, r3
 8006f5e:	4770      	bx	lr
